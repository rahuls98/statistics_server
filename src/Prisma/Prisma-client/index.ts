// Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  autoIncrement: (where?: AutoIncrementWhereInput) => Promise<boolean>;
  buyer: (where?: BuyerWhereInput) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  component: (where?: ComponentWhereInput) => Promise<boolean>;
  device: (where?: DeviceWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  firebaseProfile: (where?: FirebaseProfileWhereInput) => Promise<boolean>;
  invoice: (where?: InvoiceWhereInput) => Promise<boolean>;
  model: (where?: ModelWhereInput) => Promise<boolean>;
  modelConfig: (where?: ModelConfigWhereInput) => Promise<boolean>;
  peripheral: (where?: PeripheralWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productSpec: (where?: ProductSpecWhereInput) => Promise<boolean>;
  ride: (where?: RideWhereInput) => Promise<boolean>;
  serviceTicket: (where?: ServiceTicketWhereInput) => Promise<boolean>;
  stakeHolder: (where?: StakeHolderWhereInput) => Promise<boolean>;
  ticketActivity: (where?: TicketActivityWhereInput) => Promise<boolean>;
  trackingPermission: (
    where?: TrackingPermissionWhereInput
  ) => Promise<boolean>;
  txInfo: (where?: TxInfoWhereInput) => Promise<boolean>;
  txNode: (where?: TxNodeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vehicle: (where?: VehicleWhereInput) => Promise<boolean>;
  warranty: (where?: WarrantyWhereInput) => Promise<boolean>;
  pauseActivity: (where?: pauseActivityWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  autoIncrement: (where: AutoIncrementWhereUniqueInput) => AutoIncrementPromise;
  autoIncrements: (
    args?: {
      where?: AutoIncrementWhereInput;
      orderBy?: AutoIncrementOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AutoIncrement>;
  autoIncrementsConnection: (
    args?: {
      where?: AutoIncrementWhereInput;
      orderBy?: AutoIncrementOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AutoIncrementConnectionPromise;
  buyer: (where: BuyerWhereUniqueInput) => BuyerPromise;
  buyers: (
    args?: {
      where?: BuyerWhereInput;
      orderBy?: BuyerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Buyer>;
  buyersConnection: (
    args?: {
      where?: BuyerWhereInput;
      orderBy?: BuyerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BuyerConnectionPromise;
  company: (where: CompanyWhereUniqueInput) => CompanyPromise;
  companies: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Company>;
  companiesConnection: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CompanyConnectionPromise;
  component: (where: ComponentWhereUniqueInput) => ComponentPromise;
  components: (
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Component>;
  componentsConnection: (
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ComponentConnectionPromise;
  device: (where: DeviceWhereUniqueInput) => DevicePromise;
  devices: (
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Device>;
  devicesConnection: (
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeviceConnectionPromise;
  file: (where: FileWhereUniqueInput) => FilePromise;
  files: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<File>;
  filesConnection: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FileConnectionPromise;
  firebaseProfile: (
    where: FirebaseProfileWhereUniqueInput
  ) => FirebaseProfilePromise;
  firebaseProfiles: (
    args?: {
      where?: FirebaseProfileWhereInput;
      orderBy?: FirebaseProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<FirebaseProfile>;
  firebaseProfilesConnection: (
    args?: {
      where?: FirebaseProfileWhereInput;
      orderBy?: FirebaseProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FirebaseProfileConnectionPromise;
  invoice: (where: InvoiceWhereUniqueInput) => InvoicePromise;
  invoices: (
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Invoice>;
  invoicesConnection: (
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InvoiceConnectionPromise;
  model: (where: ModelWhereUniqueInput) => ModelPromise;
  models: (
    args?: {
      where?: ModelWhereInput;
      orderBy?: ModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Model>;
  modelsConnection: (
    args?: {
      where?: ModelWhereInput;
      orderBy?: ModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ModelConnectionPromise;
  modelConfig: (where: ModelConfigWhereUniqueInput) => ModelConfigPromise;
  modelConfigs: (
    args?: {
      where?: ModelConfigWhereInput;
      orderBy?: ModelConfigOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ModelConfig>;
  modelConfigsConnection: (
    args?: {
      where?: ModelConfigWhereInput;
      orderBy?: ModelConfigOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ModelConfigConnectionPromise;
  peripheral: (where: PeripheralWhereUniqueInput) => PeripheralPromise;
  peripherals: (
    args?: {
      where?: PeripheralWhereInput;
      orderBy?: PeripheralOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Peripheral>;
  peripheralsConnection: (
    args?: {
      where?: PeripheralWhereInput;
      orderBy?: PeripheralOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PeripheralConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  productSpec: (where: ProductSpecWhereUniqueInput) => ProductSpecPromise;
  productSpecs: (
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProductSpec>;
  productSpecsConnection: (
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductSpecConnectionPromise;
  ride: (where: RideWhereUniqueInput) => RidePromise;
  rides: (
    args?: {
      where?: RideWhereInput;
      orderBy?: RideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ride>;
  ridesConnection: (
    args?: {
      where?: RideWhereInput;
      orderBy?: RideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RideConnectionPromise;
  serviceTicket: (where: ServiceTicketWhereUniqueInput) => ServiceTicketPromise;
  serviceTickets: (
    args?: {
      where?: ServiceTicketWhereInput;
      orderBy?: ServiceTicketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ServiceTicket>;
  serviceTicketsConnection: (
    args?: {
      where?: ServiceTicketWhereInput;
      orderBy?: ServiceTicketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceTicketConnectionPromise;
  stakeHolder: (where: StakeHolderWhereUniqueInput) => StakeHolderPromise;
  stakeHolders: (
    args?: {
      where?: StakeHolderWhereInput;
      orderBy?: StakeHolderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<StakeHolder>;
  stakeHoldersConnection: (
    args?: {
      where?: StakeHolderWhereInput;
      orderBy?: StakeHolderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StakeHolderConnectionPromise;
  ticketActivity: (
    where: TicketActivityWhereUniqueInput
  ) => TicketActivityPromise;
  ticketActivities: (
    args?: {
      where?: TicketActivityWhereInput;
      orderBy?: TicketActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TicketActivity>;
  ticketActivitiesConnection: (
    args?: {
      where?: TicketActivityWhereInput;
      orderBy?: TicketActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TicketActivityConnectionPromise;
  trackingPermission: (
    where: TrackingPermissionWhereUniqueInput
  ) => TrackingPermissionPromise;
  trackingPermissions: (
    args?: {
      where?: TrackingPermissionWhereInput;
      orderBy?: TrackingPermissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TrackingPermission>;
  trackingPermissionsConnection: (
    args?: {
      where?: TrackingPermissionWhereInput;
      orderBy?: TrackingPermissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TrackingPermissionConnectionPromise;
  txInfo: (where: TxInfoWhereUniqueInput) => TxInfoPromise;
  txInfoes: (
    args?: {
      where?: TxInfoWhereInput;
      orderBy?: TxInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TxInfo>;
  txInfoesConnection: (
    args?: {
      where?: TxInfoWhereInput;
      orderBy?: TxInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TxInfoConnectionPromise;
  txNode: (where: TxNodeWhereUniqueInput) => TxNodePromise;
  txNodes: (
    args?: {
      where?: TxNodeWhereInput;
      orderBy?: TxNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TxNode>;
  txNodesConnection: (
    args?: {
      where?: TxNodeWhereInput;
      orderBy?: TxNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TxNodeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  vehicle: (where: VehicleWhereUniqueInput) => VehiclePromise;
  vehicles: (
    args?: {
      where?: VehicleWhereInput;
      orderBy?: VehicleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Vehicle>;
  vehiclesConnection: (
    args?: {
      where?: VehicleWhereInput;
      orderBy?: VehicleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VehicleConnectionPromise;
  warranty: (where: WarrantyWhereUniqueInput) => WarrantyPromise;
  warranties: (
    args?: {
      where?: WarrantyWhereInput;
      orderBy?: WarrantyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Warranty>;
  warrantiesConnection: (
    args?: {
      where?: WarrantyWhereInput;
      orderBy?: WarrantyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WarrantyConnectionPromise;
  pauseActivity: (where: pauseActivityWhereUniqueInput) => pauseActivityPromise;
  pauseActivities: (
    args?: {
      where?: pauseActivityWhereInput;
      orderBy?: pauseActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<pauseActivity>;
  pauseActivitiesConnection: (
    args?: {
      where?: pauseActivityWhereInput;
      orderBy?: pauseActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => pauseActivityConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAutoIncrement: (data: AutoIncrementCreateInput) => AutoIncrementPromise;
  updateAutoIncrement: (
    args: {
      data: AutoIncrementUpdateInput;
      where: AutoIncrementWhereUniqueInput;
    }
  ) => AutoIncrementPromise;
  updateManyAutoIncrements: (
    args: {
      data: AutoIncrementUpdateManyMutationInput;
      where?: AutoIncrementWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAutoIncrement: (
    args: {
      where: AutoIncrementWhereUniqueInput;
      create: AutoIncrementCreateInput;
      update: AutoIncrementUpdateInput;
    }
  ) => AutoIncrementPromise;
  deleteAutoIncrement: (
    where: AutoIncrementWhereUniqueInput
  ) => AutoIncrementPromise;
  deleteManyAutoIncrements: (
    where?: AutoIncrementWhereInput
  ) => BatchPayloadPromise;
  createBuyer: (data: BuyerCreateInput) => BuyerPromise;
  updateBuyer: (
    args: { data: BuyerUpdateInput; where: BuyerWhereUniqueInput }
  ) => BuyerPromise;
  updateManyBuyers: (
    args: { data: BuyerUpdateManyMutationInput; where?: BuyerWhereInput }
  ) => BatchPayloadPromise;
  upsertBuyer: (
    args: {
      where: BuyerWhereUniqueInput;
      create: BuyerCreateInput;
      update: BuyerUpdateInput;
    }
  ) => BuyerPromise;
  deleteBuyer: (where: BuyerWhereUniqueInput) => BuyerPromise;
  deleteManyBuyers: (where?: BuyerWhereInput) => BatchPayloadPromise;
  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (
    args: { data: CompanyUpdateInput; where: CompanyWhereUniqueInput }
  ) => CompanyPromise;
  updateManyCompanies: (
    args: { data: CompanyUpdateManyMutationInput; where?: CompanyWhereInput }
  ) => BatchPayloadPromise;
  upsertCompany: (
    args: {
      where: CompanyWhereUniqueInput;
      create: CompanyCreateInput;
      update: CompanyUpdateInput;
    }
  ) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createComponent: (data: ComponentCreateInput) => ComponentPromise;
  updateComponent: (
    args: { data: ComponentUpdateInput; where: ComponentWhereUniqueInput }
  ) => ComponentPromise;
  updateManyComponents: (
    args: {
      data: ComponentUpdateManyMutationInput;
      where?: ComponentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertComponent: (
    args: {
      where: ComponentWhereUniqueInput;
      create: ComponentCreateInput;
      update: ComponentUpdateInput;
    }
  ) => ComponentPromise;
  deleteComponent: (where: ComponentWhereUniqueInput) => ComponentPromise;
  deleteManyComponents: (where?: ComponentWhereInput) => BatchPayloadPromise;
  createDevice: (data: DeviceCreateInput) => DevicePromise;
  updateDevice: (
    args: { data: DeviceUpdateInput; where: DeviceWhereUniqueInput }
  ) => DevicePromise;
  updateManyDevices: (
    args: { data: DeviceUpdateManyMutationInput; where?: DeviceWhereInput }
  ) => BatchPayloadPromise;
  upsertDevice: (
    args: {
      where: DeviceWhereUniqueInput;
      create: DeviceCreateInput;
      update: DeviceUpdateInput;
    }
  ) => DevicePromise;
  deleteDevice: (where: DeviceWhereUniqueInput) => DevicePromise;
  deleteManyDevices: (where?: DeviceWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (
    args: { data: FileUpdateInput; where: FileWhereUniqueInput }
  ) => FilePromise;
  updateManyFiles: (
    args: { data: FileUpdateManyMutationInput; where?: FileWhereInput }
  ) => BatchPayloadPromise;
  upsertFile: (
    args: {
      where: FileWhereUniqueInput;
      create: FileCreateInput;
      update: FileUpdateInput;
    }
  ) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createFirebaseProfile: (
    data: FirebaseProfileCreateInput
  ) => FirebaseProfilePromise;
  updateFirebaseProfile: (
    args: {
      data: FirebaseProfileUpdateInput;
      where: FirebaseProfileWhereUniqueInput;
    }
  ) => FirebaseProfilePromise;
  updateManyFirebaseProfiles: (
    args: {
      data: FirebaseProfileUpdateManyMutationInput;
      where?: FirebaseProfileWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertFirebaseProfile: (
    args: {
      where: FirebaseProfileWhereUniqueInput;
      create: FirebaseProfileCreateInput;
      update: FirebaseProfileUpdateInput;
    }
  ) => FirebaseProfilePromise;
  deleteFirebaseProfile: (
    where: FirebaseProfileWhereUniqueInput
  ) => FirebaseProfilePromise;
  deleteManyFirebaseProfiles: (
    where?: FirebaseProfileWhereInput
  ) => BatchPayloadPromise;
  createInvoice: (data: InvoiceCreateInput) => InvoicePromise;
  updateInvoice: (
    args: { data: InvoiceUpdateInput; where: InvoiceWhereUniqueInput }
  ) => InvoicePromise;
  updateManyInvoices: (
    args: { data: InvoiceUpdateManyMutationInput; where?: InvoiceWhereInput }
  ) => BatchPayloadPromise;
  upsertInvoice: (
    args: {
      where: InvoiceWhereUniqueInput;
      create: InvoiceCreateInput;
      update: InvoiceUpdateInput;
    }
  ) => InvoicePromise;
  deleteInvoice: (where: InvoiceWhereUniqueInput) => InvoicePromise;
  deleteManyInvoices: (where?: InvoiceWhereInput) => BatchPayloadPromise;
  createModel: (data: ModelCreateInput) => ModelPromise;
  updateModel: (
    args: { data: ModelUpdateInput; where: ModelWhereUniqueInput }
  ) => ModelPromise;
  updateManyModels: (
    args: { data: ModelUpdateManyMutationInput; where?: ModelWhereInput }
  ) => BatchPayloadPromise;
  upsertModel: (
    args: {
      where: ModelWhereUniqueInput;
      create: ModelCreateInput;
      update: ModelUpdateInput;
    }
  ) => ModelPromise;
  deleteModel: (where: ModelWhereUniqueInput) => ModelPromise;
  deleteManyModels: (where?: ModelWhereInput) => BatchPayloadPromise;
  createModelConfig: (data: ModelConfigCreateInput) => ModelConfigPromise;
  updateModelConfig: (
    args: { data: ModelConfigUpdateInput; where: ModelConfigWhereUniqueInput }
  ) => ModelConfigPromise;
  updateManyModelConfigs: (
    args: {
      data: ModelConfigUpdateManyMutationInput;
      where?: ModelConfigWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertModelConfig: (
    args: {
      where: ModelConfigWhereUniqueInput;
      create: ModelConfigCreateInput;
      update: ModelConfigUpdateInput;
    }
  ) => ModelConfigPromise;
  deleteModelConfig: (where: ModelConfigWhereUniqueInput) => ModelConfigPromise;
  deleteManyModelConfigs: (
    where?: ModelConfigWhereInput
  ) => BatchPayloadPromise;
  createPeripheral: (data: PeripheralCreateInput) => PeripheralPromise;
  updatePeripheral: (
    args: { data: PeripheralUpdateInput; where: PeripheralWhereUniqueInput }
  ) => PeripheralPromise;
  upsertPeripheral: (
    args: {
      where: PeripheralWhereUniqueInput;
      create: PeripheralCreateInput;
      update: PeripheralUpdateInput;
    }
  ) => PeripheralPromise;
  deletePeripheral: (where: PeripheralWhereUniqueInput) => PeripheralPromise;
  deleteManyPeripherals: (where?: PeripheralWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductSpec: (data: ProductSpecCreateInput) => ProductSpecPromise;
  updateProductSpec: (
    args: { data: ProductSpecUpdateInput; where: ProductSpecWhereUniqueInput }
  ) => ProductSpecPromise;
  updateManyProductSpecs: (
    args: {
      data: ProductSpecUpdateManyMutationInput;
      where?: ProductSpecWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProductSpec: (
    args: {
      where: ProductSpecWhereUniqueInput;
      create: ProductSpecCreateInput;
      update: ProductSpecUpdateInput;
    }
  ) => ProductSpecPromise;
  deleteProductSpec: (where: ProductSpecWhereUniqueInput) => ProductSpecPromise;
  deleteManyProductSpecs: (
    where?: ProductSpecWhereInput
  ) => BatchPayloadPromise;
  createRide: (data: RideCreateInput) => RidePromise;
  updateRide: (
    args: { data: RideUpdateInput; where: RideWhereUniqueInput }
  ) => RidePromise;
  updateManyRides: (
    args: { data: RideUpdateManyMutationInput; where?: RideWhereInput }
  ) => BatchPayloadPromise;
  upsertRide: (
    args: {
      where: RideWhereUniqueInput;
      create: RideCreateInput;
      update: RideUpdateInput;
    }
  ) => RidePromise;
  deleteRide: (where: RideWhereUniqueInput) => RidePromise;
  deleteManyRides: (where?: RideWhereInput) => BatchPayloadPromise;
  createServiceTicket: (data: ServiceTicketCreateInput) => ServiceTicketPromise;
  updateServiceTicket: (
    args: {
      data: ServiceTicketUpdateInput;
      where: ServiceTicketWhereUniqueInput;
    }
  ) => ServiceTicketPromise;
  updateManyServiceTickets: (
    args: {
      data: ServiceTicketUpdateManyMutationInput;
      where?: ServiceTicketWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertServiceTicket: (
    args: {
      where: ServiceTicketWhereUniqueInput;
      create: ServiceTicketCreateInput;
      update: ServiceTicketUpdateInput;
    }
  ) => ServiceTicketPromise;
  deleteServiceTicket: (
    where: ServiceTicketWhereUniqueInput
  ) => ServiceTicketPromise;
  deleteManyServiceTickets: (
    where?: ServiceTicketWhereInput
  ) => BatchPayloadPromise;
  createStakeHolder: (data: StakeHolderCreateInput) => StakeHolderPromise;
  updateStakeHolder: (
    args: { data: StakeHolderUpdateInput; where: StakeHolderWhereUniqueInput }
  ) => StakeHolderPromise;
  updateManyStakeHolders: (
    args: {
      data: StakeHolderUpdateManyMutationInput;
      where?: StakeHolderWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertStakeHolder: (
    args: {
      where: StakeHolderWhereUniqueInput;
      create: StakeHolderCreateInput;
      update: StakeHolderUpdateInput;
    }
  ) => StakeHolderPromise;
  deleteStakeHolder: (where: StakeHolderWhereUniqueInput) => StakeHolderPromise;
  deleteManyStakeHolders: (
    where?: StakeHolderWhereInput
  ) => BatchPayloadPromise;
  createTicketActivity: (
    data: TicketActivityCreateInput
  ) => TicketActivityPromise;
  updateTicketActivity: (
    args: {
      data: TicketActivityUpdateInput;
      where: TicketActivityWhereUniqueInput;
    }
  ) => TicketActivityPromise;
  updateManyTicketActivities: (
    args: {
      data: TicketActivityUpdateManyMutationInput;
      where?: TicketActivityWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertTicketActivity: (
    args: {
      where: TicketActivityWhereUniqueInput;
      create: TicketActivityCreateInput;
      update: TicketActivityUpdateInput;
    }
  ) => TicketActivityPromise;
  deleteTicketActivity: (
    where: TicketActivityWhereUniqueInput
  ) => TicketActivityPromise;
  deleteManyTicketActivities: (
    where?: TicketActivityWhereInput
  ) => BatchPayloadPromise;
  createTrackingPermission: (
    data: TrackingPermissionCreateInput
  ) => TrackingPermissionPromise;
  updateTrackingPermission: (
    args: {
      data: TrackingPermissionUpdateInput;
      where: TrackingPermissionWhereUniqueInput;
    }
  ) => TrackingPermissionPromise;
  updateManyTrackingPermissions: (
    args: {
      data: TrackingPermissionUpdateManyMutationInput;
      where?: TrackingPermissionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertTrackingPermission: (
    args: {
      where: TrackingPermissionWhereUniqueInput;
      create: TrackingPermissionCreateInput;
      update: TrackingPermissionUpdateInput;
    }
  ) => TrackingPermissionPromise;
  deleteTrackingPermission: (
    where: TrackingPermissionWhereUniqueInput
  ) => TrackingPermissionPromise;
  deleteManyTrackingPermissions: (
    where?: TrackingPermissionWhereInput
  ) => BatchPayloadPromise;
  createTxInfo: (data: TxInfoCreateInput) => TxInfoPromise;
  updateTxInfo: (
    args: { data: TxInfoUpdateInput; where: TxInfoWhereUniqueInput }
  ) => TxInfoPromise;
  updateManyTxInfoes: (
    args: { data: TxInfoUpdateManyMutationInput; where?: TxInfoWhereInput }
  ) => BatchPayloadPromise;
  upsertTxInfo: (
    args: {
      where: TxInfoWhereUniqueInput;
      create: TxInfoCreateInput;
      update: TxInfoUpdateInput;
    }
  ) => TxInfoPromise;
  deleteTxInfo: (where: TxInfoWhereUniqueInput) => TxInfoPromise;
  deleteManyTxInfoes: (where?: TxInfoWhereInput) => BatchPayloadPromise;
  createTxNode: (data: TxNodeCreateInput) => TxNodePromise;
  updateTxNode: (
    args: { data: TxNodeUpdateInput; where: TxNodeWhereUniqueInput }
  ) => TxNodePromise;
  updateManyTxNodes: (
    args: { data: TxNodeUpdateManyMutationInput; where?: TxNodeWhereInput }
  ) => BatchPayloadPromise;
  upsertTxNode: (
    args: {
      where: TxNodeWhereUniqueInput;
      create: TxNodeCreateInput;
      update: TxNodeUpdateInput;
    }
  ) => TxNodePromise;
  deleteTxNode: (where: TxNodeWhereUniqueInput) => TxNodePromise;
  deleteManyTxNodes: (where?: TxNodeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVehicle: (data: VehicleCreateInput) => VehiclePromise;
  updateVehicle: (
    args: { data: VehicleUpdateInput; where: VehicleWhereUniqueInput }
  ) => VehiclePromise;
  updateManyVehicles: (
    args: { data: VehicleUpdateManyMutationInput; where?: VehicleWhereInput }
  ) => BatchPayloadPromise;
  upsertVehicle: (
    args: {
      where: VehicleWhereUniqueInput;
      create: VehicleCreateInput;
      update: VehicleUpdateInput;
    }
  ) => VehiclePromise;
  deleteVehicle: (where: VehicleWhereUniqueInput) => VehiclePromise;
  deleteManyVehicles: (where?: VehicleWhereInput) => BatchPayloadPromise;
  createWarranty: (data: WarrantyCreateInput) => WarrantyPromise;
  updateWarranty: (
    args: { data: WarrantyUpdateInput; where: WarrantyWhereUniqueInput }
  ) => WarrantyPromise;
  updateManyWarranties: (
    args: { data: WarrantyUpdateManyMutationInput; where?: WarrantyWhereInput }
  ) => BatchPayloadPromise;
  upsertWarranty: (
    args: {
      where: WarrantyWhereUniqueInput;
      create: WarrantyCreateInput;
      update: WarrantyUpdateInput;
    }
  ) => WarrantyPromise;
  deleteWarranty: (where: WarrantyWhereUniqueInput) => WarrantyPromise;
  deleteManyWarranties: (where?: WarrantyWhereInput) => BatchPayloadPromise;
  createpauseActivity: (data: pauseActivityCreateInput) => pauseActivityPromise;
  updatepauseActivity: (
    args: {
      data: pauseActivityUpdateInput;
      where: pauseActivityWhereUniqueInput;
    }
  ) => pauseActivityPromise;
  updateManypauseActivities: (
    args: {
      data: pauseActivityUpdateManyMutationInput;
      where?: pauseActivityWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertpauseActivity: (
    args: {
      where: pauseActivityWhereUniqueInput;
      create: pauseActivityCreateInput;
      update: pauseActivityUpdateInput;
    }
  ) => pauseActivityPromise;
  deletepauseActivity: (
    where: pauseActivityWhereUniqueInput
  ) => pauseActivityPromise;
  deleteManypauseActivities: (
    where?: pauseActivityWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  autoIncrement: (
    where?: AutoIncrementSubscriptionWhereInput
  ) => AutoIncrementSubscriptionPayloadSubscription;
  buyer: (
    where?: BuyerSubscriptionWhereInput
  ) => BuyerSubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  component: (
    where?: ComponentSubscriptionWhereInput
  ) => ComponentSubscriptionPayloadSubscription;
  device: (
    where?: DeviceSubscriptionWhereInput
  ) => DeviceSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  firebaseProfile: (
    where?: FirebaseProfileSubscriptionWhereInput
  ) => FirebaseProfileSubscriptionPayloadSubscription;
  invoice: (
    where?: InvoiceSubscriptionWhereInput
  ) => InvoiceSubscriptionPayloadSubscription;
  model: (
    where?: ModelSubscriptionWhereInput
  ) => ModelSubscriptionPayloadSubscription;
  modelConfig: (
    where?: ModelConfigSubscriptionWhereInput
  ) => ModelConfigSubscriptionPayloadSubscription;
  peripheral: (
    where?: PeripheralSubscriptionWhereInput
  ) => PeripheralSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productSpec: (
    where?: ProductSpecSubscriptionWhereInput
  ) => ProductSpecSubscriptionPayloadSubscription;
  ride: (
    where?: RideSubscriptionWhereInput
  ) => RideSubscriptionPayloadSubscription;
  serviceTicket: (
    where?: ServiceTicketSubscriptionWhereInput
  ) => ServiceTicketSubscriptionPayloadSubscription;
  stakeHolder: (
    where?: StakeHolderSubscriptionWhereInput
  ) => StakeHolderSubscriptionPayloadSubscription;
  ticketActivity: (
    where?: TicketActivitySubscriptionWhereInput
  ) => TicketActivitySubscriptionPayloadSubscription;
  trackingPermission: (
    where?: TrackingPermissionSubscriptionWhereInput
  ) => TrackingPermissionSubscriptionPayloadSubscription;
  txInfo: (
    where?: TxInfoSubscriptionWhereInput
  ) => TxInfoSubscriptionPayloadSubscription;
  txNode: (
    where?: TxNodeSubscriptionWhereInput
  ) => TxNodeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vehicle: (
    where?: VehicleSubscriptionWhereInput
  ) => VehicleSubscriptionPayloadSubscription;
  warranty: (
    where?: WarrantySubscriptionWhereInput
  ) => WarrantySubscriptionPayloadSubscription;
  pauseActivity: (
    where?: pauseActivitySubscriptionWhereInput
  ) => pauseActivitySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type statusType =
  | "ACTIVE"
  | "INACTIVE"
  | "DELETED"
  | "PENDING_APPROVAL"
  | "INCOMPLETE_PROFILE";

export type AutoIncrementOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "serviceTicketSequence_ASC"
  | "serviceTicketSequence_DESC"
  | "orderSequence_ASC"
  | "orderSequence_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BuyerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "parentName_ASC"
  | "parentName_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "aadharCard_ASC"
  | "aadharCard_DESC"
  | "address_ASC"
  | "address_DESC"
  | "dateOfBirth_ASC"
  | "dateOfBirth_DESC"
  | "identityProof_ASC"
  | "identityProof_DESC"
  | "addressProof_ASC"
  | "addressProof_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TxNodeType = "COMPANY" | "COMPONENT" | "VEHICLE" | "USER";

export type ComponentStatus =
  | "REQUESTED"
  | "INSTOCK"
  | "INUSE"
  | "UNHEALTHY"
  | "DISCARDED"
  | "DELETED";

export type ProductType =
  | "BATTERY"
  | "CONTROLLER"
  | "SPEEDOMETER"
  | "TYRE"
  | "MOTOR"
  | "CHASSIS"
  | "VEHICLE"
  | "OTHERS"
  | "DCCONVERTER"
  | "LIGHTS"
  | "SWITCHES";

export type ProductSpecOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "key_ASC"
  | "key_DESC"
  | "value_ASC"
  | "value_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "required_ASC"
  | "required_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FileType =
  | "COMPANY_LOGO"
  | "DL_SIDE_1"
  | "DL_SIDE_2"
  | "PRODUCT_IMAGE"
  | "PROFILE"
  | "KYC_DL_SIDE_1"
  | "KYC_DL_SIDE_2"
  | "KYC_PROFILE"
  | "OTHERS"
  | "VEHICLE_REPORTS"
  | "VEHICLE_MODEL_IMG"
  | "VEHICLE_ADDRESS_PROOF"
  | "VEHICLE_ID_PROOF"
  | "SERVICE_TICKET_IMG";

export type genderType = "MALE" | "FEMALE" | "OTHERS";

export type Role =
  | "ADMIN"
  | "INVENTORY_MANAGER"
  | "ASSEMBLER"
  | "DISTRIBUTOR"
  | "DEALER"
  | "SALES"
  | "OPERATIONS_RS_DEPLOY"
  | "RIDER"
  | "USER"
  | "UNAUTHORISED"
  | "DEV";

export type VehicleType = "TWO" | "THREE";

export type VehicleStatus =
  | "UNSOLD"
  | "UNASSIGNED"
  | "SOLD"
  | "ASSIGNED"
  | "ASSIGNED_1"
  | "RENTAL"
  | "DELETED";

export type DeviceStatus =
  | "INITIALIZED"
  | "ACTIVATED"
  | "DISABLED"
  | "DELETED"
  | "RESET";

export type DeviceUpdateStatus =
  | "UPDATED"
  | "UPDATING"
  | "ERROR"
  | "UPDATE_REQUIRED";

export type DeviceType = "CONTROLLER" | "POINTER";

export type Protocol = "MOBILE" | "IOT" | "RIDE_SHARING";

export type TrackingPermissionStatus =
  | "REQUESTED"
  | "GRANTED"
  | "REVOKED"
  | "EXPIRED";

export type RentalStatus = "AVAILABLE" | "BOOKED" | "INSTOCK";

export type WarrantyStatus = "ACTIVATED" | "EXPIRED" | "DELETED";

export type ModelAccessType = "KEY" | "KEYLESS" | "HYBRID";

export type companyType =
  | "BASIC"
  | "DISTRIBUTOR"
  | "OEM"
  | "DEALER"
  | "RIDE_SHARING";

export type RideStatus = "BOOKED" | "ACTIVE" | "COMPLETED" | "PAUSED";

export type RideOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "bookingTime_ASC"
  | "bookingTime_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "startOdo_ASC"
  | "startOdo_DESC"
  | "endOdo_ASC"
  | "endOdo_DESC"
  | "rideStatus_ASC"
  | "rideStatus_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC"
  | "key_ASC"
  | "key_DESC"
  | "status_ASC"
  | "status_DESC"
  | "imageBuffer_ASC"
  | "imageBuffer_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VehicleOrderByInput =
  | "vin_ASC"
  | "vin_DESC"
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "protocol_ASC"
  | "protocol_DESC"
  | "isHealthy_ASC"
  | "isHealthy_DESC"
  | "lastMarkedLongitude_ASC"
  | "lastMarkedLongitude_DESC"
  | "lastMarkedLatitude_ASC"
  | "lastMarkedLatitude_DESC"
  | "rentalStatus_ASC"
  | "rentalStatus_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ComponentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "UID_ASC"
  | "UID_DESC"
  | "status_ASC"
  | "status_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeviceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "deviceId_ASC"
  | "deviceId_DESC"
  | "macId_ASC"
  | "macId_DESC"
  | "key_ASC"
  | "key_DESC"
  | "pin_ASC"
  | "pin_DESC"
  | "status_ASC"
  | "status_DESC"
  | "updateStatus_ASC"
  | "updateStatus_DESC"
  | "type_ASC"
  | "type_DESC"
  | "firmware_ASC"
  | "firmware_DESC"
  | "expectedFirmware_ASC"
  | "expectedFirmware_DESC"
  | "pinResetRequired_ASC"
  | "pinResetRequired_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TrackingPermissionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "token_ASC"
  | "token_DESC"
  | "code_ASC"
  | "code_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "phone1_ASC"
  | "phone1_DESC"
  | "phone2_ASC"
  | "phone2_DESC"
  | "address_ASC"
  | "address_DESC"
  | "logoBuffer_ASC"
  | "logoBuffer_DESC"
  | "type_ASC"
  | "type_DESC"
  | "status_ASC"
  | "status_DESC"
  | "gstNumber_ASC"
  | "gstNumber_DESC"
  | "panNumber_ASC"
  | "panNumber_DESC"
  | "cinNumber_ASC"
  | "cinNumber_DESC"
  | "ownerAadharCardNumber_ASC"
  | "ownerAadharCardNumber_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type pauseActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "pauseStart_ASC"
  | "pauseStart_DESC"
  | "pauseEnd_ASC"
  | "pauseEnd_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "address_ASC"
  | "address_DESC"
  | "email_ASC"
  | "email_DESC"
  | "openId_ASC"
  | "openId_DESC"
  | "unionId_ASC"
  | "unionId_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "altPhone1_ASC"
  | "altPhone1_DESC"
  | "altPhone2_ASC"
  | "altPhone2_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "license_ASC"
  | "license_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ModelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "status_ASC"
  | "status_DESC"
  | "name_ASC"
  | "name_DESC"
  | "key_ASC"
  | "key_DESC"
  | "type_ASC"
  | "type_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "associatedId_ASC"
  | "associatedId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "tag_ASC"
  | "tag_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FirebaseProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InvoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "date_ASC"
  | "date_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ModelConfigOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "speedDivisor_ASC"
  | "speedDivisor_DESC"
  | "odoDivisor_ASC"
  | "odoDivisor_DESC"
  | "accessType_ASC"
  | "accessType_DESC"
  | "wheelDiameter_ASC"
  | "wheelDiameter_DESC"
  | "maxSpeed_ASC"
  | "maxSpeed_DESC"
  | "hillAssistStatus_ASC"
  | "hillAssistStatus_DESC"
  | "parkingStatus_ASC"
  | "parkingStatus_DESC"
  | "regenBrakingStatus_ASC"
  | "regenBrakingStatus_DESC"
  | "speedLimit_ASC"
  | "speedLimit_DESC"
  | "pickupControlLimit_ASC"
  | "pickupControlLimit_DESC"
  | "brakeRegenLimit_ASC"
  | "brakeRegenLimit_DESC"
  | "zeroThrottleRegenLimit_ASC"
  | "zeroThrottleRegenLimit_DESC"
  | "currentLimit_ASC"
  | "currentLimit_DESC"
  | "eabsStatus_ASC"
  | "eabsStatus_DESC"
  | "overVoltageLimit_ASC"
  | "overVoltageLimit_DESC"
  | "underVoltageLimit_ASC"
  | "underVoltageLimit_DESC"
  | "batteryMinVoltage_ASC"
  | "batteryMinVoltage_DESC"
  | "batteryMaxVoltage_ASC"
  | "batteryMaxVoltage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PeripheralOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC";

export type ActivityType = "COMMENT" | "STATUS_CHANGE";

export type TicketActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceStatus =
  | "RAISED"
  | "PENDING"
  | "INPROGRESS"
  | "COMPLETED"
  | "CLOSED";

export type ServiceTicketOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "status_ASC"
  | "status_DESC"
  | "number_ASC"
  | "number_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TxType = "PERMANENT" | "RENTAL" | "TEMPORARY";

export type StakeHolderStatus =
  | "OWNER"
  | "RENTAL"
  | "PAST_OWNER"
  | "PAST_RENTAL";

export type StakeHolderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateReceived_ASC"
  | "dateReceived_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TxInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TxNodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WarrantyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "expiry_ASC"
  | "expiry_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AutoIncrementWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AutoIncrementWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  serviceTicketSequence?: Int;
  serviceTicketSequence_not?: Int;
  serviceTicketSequence_in?: Int[] | Int;
  serviceTicketSequence_not_in?: Int[] | Int;
  serviceTicketSequence_lt?: Int;
  serviceTicketSequence_lte?: Int;
  serviceTicketSequence_gt?: Int;
  serviceTicketSequence_gte?: Int;
  orderSequence?: Int;
  orderSequence_not?: Int;
  orderSequence_in?: Int[] | Int;
  orderSequence_not_in?: Int[] | Int;
  orderSequence_lt?: Int;
  orderSequence_lte?: Int;
  orderSequence_gt?: Int;
  orderSequence_gte?: Int;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  AND?: AutoIncrementWhereInput[] | AutoIncrementWhereInput;
  OR?: AutoIncrementWhereInput[] | AutoIncrementWhereInput;
  NOT?: AutoIncrementWhereInput[] | AutoIncrementWhereInput;
}

export type BuyerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BuyerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  parentName?: String;
  parentName_not?: String;
  parentName_in?: String[] | String;
  parentName_not_in?: String[] | String;
  parentName_lt?: String;
  parentName_lte?: String;
  parentName_gt?: String;
  parentName_gte?: String;
  parentName_contains?: String;
  parentName_not_contains?: String;
  parentName_starts_with?: String;
  parentName_not_starts_with?: String;
  parentName_ends_with?: String;
  parentName_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  aadharCard?: String;
  aadharCard_not?: String;
  aadharCard_in?: String[] | String;
  aadharCard_not_in?: String[] | String;
  aadharCard_lt?: String;
  aadharCard_lte?: String;
  aadharCard_gt?: String;
  aadharCard_gte?: String;
  aadharCard_contains?: String;
  aadharCard_not_contains?: String;
  aadharCard_starts_with?: String;
  aadharCard_not_starts_with?: String;
  aadharCard_ends_with?: String;
  aadharCard_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  dateOfBirth?: DateTimeInput;
  dateOfBirth_not?: DateTimeInput;
  dateOfBirth_in?: DateTimeInput[] | DateTimeInput;
  dateOfBirth_not_in?: DateTimeInput[] | DateTimeInput;
  dateOfBirth_lt?: DateTimeInput;
  dateOfBirth_lte?: DateTimeInput;
  dateOfBirth_gt?: DateTimeInput;
  dateOfBirth_gte?: DateTimeInput;
  identityProof?: String;
  identityProof_not?: String;
  identityProof_in?: String[] | String;
  identityProof_not_in?: String[] | String;
  identityProof_lt?: String;
  identityProof_lte?: String;
  identityProof_gt?: String;
  identityProof_gte?: String;
  identityProof_contains?: String;
  identityProof_not_contains?: String;
  identityProof_starts_with?: String;
  identityProof_not_starts_with?: String;
  identityProof_ends_with?: String;
  identityProof_not_ends_with?: String;
  addressProof?: String;
  addressProof_not?: String;
  addressProof_in?: String[] | String;
  addressProof_not_in?: String[] | String;
  addressProof_lt?: String;
  addressProof_lte?: String;
  addressProof_gt?: String;
  addressProof_gte?: String;
  addressProof_contains?: String;
  addressProof_not_contains?: String;
  addressProof_starts_with?: String;
  addressProof_not_starts_with?: String;
  addressProof_ends_with?: String;
  addressProof_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: BuyerWhereInput[] | BuyerWhereInput;
  OR?: BuyerWhereInput[] | BuyerWhereInput;
  NOT?: BuyerWhereInput[] | BuyerWhereInput;
}

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface ProductSpecWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  unit?: String;
  unit_not?: String;
  unit_in?: String[] | String;
  unit_not_in?: String[] | String;
  unit_lt?: String;
  unit_lte?: String;
  unit_gt?: String;
  unit_gte?: String;
  unit_contains?: String;
  unit_not_contains?: String;
  unit_starts_with?: String;
  unit_not_starts_with?: String;
  unit_ends_with?: String;
  unit_not_ends_with?: String;
  required?: Boolean;
  required_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProductSpecWhereInput[] | ProductSpecWhereInput;
  OR?: ProductSpecWhereInput[] | ProductSpecWhereInput;
  NOT?: ProductSpecWhereInput[] | ProductSpecWhereInput;
}

export interface RideWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rider?: UserWhereInput;
  vehicle?: VehicleWhereInput;
  bookingTime?: DateTimeInput;
  bookingTime_not?: DateTimeInput;
  bookingTime_in?: DateTimeInput[] | DateTimeInput;
  bookingTime_not_in?: DateTimeInput[] | DateTimeInput;
  bookingTime_lt?: DateTimeInput;
  bookingTime_lte?: DateTimeInput;
  bookingTime_gt?: DateTimeInput;
  bookingTime_gte?: DateTimeInput;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  endTime?: DateTimeInput;
  endTime_not?: DateTimeInput;
  endTime_in?: DateTimeInput[] | DateTimeInput;
  endTime_not_in?: DateTimeInput[] | DateTimeInput;
  endTime_lt?: DateTimeInput;
  endTime_lte?: DateTimeInput;
  endTime_gt?: DateTimeInput;
  endTime_gte?: DateTimeInput;
  pauseActivities_every?: pauseActivityWhereInput;
  pauseActivities_some?: pauseActivityWhereInput;
  pauseActivities_none?: pauseActivityWhereInput;
  startOdo?: Float;
  startOdo_not?: Float;
  startOdo_in?: Float[] | Float;
  startOdo_not_in?: Float[] | Float;
  startOdo_lt?: Float;
  startOdo_lte?: Float;
  startOdo_gt?: Float;
  startOdo_gte?: Float;
  endOdo?: Float;
  endOdo_not?: Float;
  endOdo_in?: Float[] | Float;
  endOdo_not_in?: Float[] | Float;
  endOdo_lt?: Float;
  endOdo_lte?: Float;
  endOdo_gt?: Float;
  endOdo_gte?: Float;
  rideStatus?: RideStatus;
  rideStatus_not?: RideStatus;
  rideStatus_in?: RideStatus[] | RideStatus;
  rideStatus_not_in?: RideStatus[] | RideStatus;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RideWhereInput[] | RideWhereInput;
  OR?: RideWhereInput[] | RideWhereInput;
  NOT?: RideWhereInput[] | RideWhereInput;
}

export interface UserWhereInput {
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  openId?: String;
  openId_not?: String;
  openId_in?: String[] | String;
  openId_not_in?: String[] | String;
  openId_lt?: String;
  openId_lte?: String;
  openId_gt?: String;
  openId_gte?: String;
  openId_contains?: String;
  openId_not_contains?: String;
  openId_starts_with?: String;
  openId_not_starts_with?: String;
  openId_ends_with?: String;
  openId_not_ends_with?: String;
  txInfo?: TxNodeWhereInput;
  unionId?: String;
  unionId_not?: String;
  unionId_in?: String[] | String;
  unionId_not_in?: String[] | String;
  unionId_lt?: String;
  unionId_lte?: String;
  unionId_gt?: String;
  unionId_gte?: String;
  unionId_contains?: String;
  unionId_not_contains?: String;
  unionId_starts_with?: String;
  unionId_not_starts_with?: String;
  unionId_ends_with?: String;
  unionId_not_ends_with?: String;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  altPhone1?: String;
  altPhone1_not?: String;
  altPhone1_in?: String[] | String;
  altPhone1_not_in?: String[] | String;
  altPhone1_lt?: String;
  altPhone1_lte?: String;
  altPhone1_gt?: String;
  altPhone1_gte?: String;
  altPhone1_contains?: String;
  altPhone1_not_contains?: String;
  altPhone1_starts_with?: String;
  altPhone1_not_starts_with?: String;
  altPhone1_ends_with?: String;
  altPhone1_not_ends_with?: String;
  altPhone2?: String;
  altPhone2_not?: String;
  altPhone2_in?: String[] | String;
  altPhone2_not_in?: String[] | String;
  altPhone2_lt?: String;
  altPhone2_lte?: String;
  altPhone2_gt?: String;
  altPhone2_gte?: String;
  altPhone2_contains?: String;
  altPhone2_not_contains?: String;
  altPhone2_starts_with?: String;
  altPhone2_not_starts_with?: String;
  altPhone2_ends_with?: String;
  altPhone2_not_ends_with?: String;
  gender?: genderType;
  gender_not?: genderType;
  gender_in?: genderType[] | genderType;
  gender_not_in?: genderType[] | genderType;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  license?: String;
  license_not?: String;
  license_in?: String[] | String;
  license_not_in?: String[] | String;
  license_lt?: String;
  license_lte?: String;
  license_gt?: String;
  license_gte?: String;
  license_contains?: String;
  license_not_contains?: String;
  license_starts_with?: String;
  license_not_starts_with?: String;
  license_ends_with?: String;
  license_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  firebase?: FirebaseProfileWhereInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  company?: CompanyWhereInput;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  vehiclesDriven_every?: RideWhereInput;
  vehiclesDriven_some?: RideWhereInput;
  vehiclesDriven_none?: RideWhereInput;
  trackingRequests_every?: TrackingPermissionWhereInput;
  trackingRequests_some?: TrackingPermissionWhereInput;
  trackingRequests_none?: TrackingPermissionWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface TxNodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: TxNodeType;
  type_not?: TxNodeType;
  type_in?: TxNodeType[] | TxNodeType;
  type_not_in?: TxNodeType[] | TxNodeType;
  company?: CompanyWhereInput;
  component?: ComponentWhereInput;
  user?: UserWhereInput;
  vehicle?: VehicleWhereInput;
  AND?: TxNodeWhereInput[] | TxNodeWhereInput;
  OR?: TxNodeWhereInput[] | TxNodeWhereInput;
  NOT?: TxNodeWhereInput[] | TxNodeWhereInput;
}

export interface CompanyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  txInfo?: TxNodeWhereInput;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  phone1?: String;
  phone1_not?: String;
  phone1_in?: String[] | String;
  phone1_not_in?: String[] | String;
  phone1_lt?: String;
  phone1_lte?: String;
  phone1_gt?: String;
  phone1_gte?: String;
  phone1_contains?: String;
  phone1_not_contains?: String;
  phone1_starts_with?: String;
  phone1_not_starts_with?: String;
  phone1_ends_with?: String;
  phone1_not_ends_with?: String;
  phone2?: String;
  phone2_not?: String;
  phone2_in?: String[] | String;
  phone2_not_in?: String[] | String;
  phone2_lt?: String;
  phone2_lte?: String;
  phone2_gt?: String;
  phone2_gte?: String;
  phone2_contains?: String;
  phone2_not_contains?: String;
  phone2_starts_with?: String;
  phone2_not_starts_with?: String;
  phone2_ends_with?: String;
  phone2_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  companyLogo?: FileWhereInput;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  logoBuffer?: String;
  logoBuffer_not?: String;
  logoBuffer_in?: String[] | String;
  logoBuffer_not_in?: String[] | String;
  logoBuffer_lt?: String;
  logoBuffer_lte?: String;
  logoBuffer_gt?: String;
  logoBuffer_gte?: String;
  logoBuffer_contains?: String;
  logoBuffer_not_contains?: String;
  logoBuffer_starts_with?: String;
  logoBuffer_not_starts_with?: String;
  logoBuffer_ends_with?: String;
  logoBuffer_not_ends_with?: String;
  models_every?: ModelWhereInput;
  models_some?: ModelWhereInput;
  models_none?: ModelWhereInput;
  components_every?: ProductWhereInput;
  components_some?: ProductWhereInput;
  components_none?: ProductWhereInput;
  inventory_every?: ComponentWhereInput;
  inventory_some?: ComponentWhereInput;
  inventory_none?: ComponentWhereInput;
  vehicles_every?: VehicleWhereInput;
  vehicles_some?: VehicleWhereInput;
  vehicles_none?: VehicleWhereInput;
  type?: companyType;
  type_not?: companyType;
  type_in?: companyType[] | companyType;
  type_not_in?: companyType[] | companyType;
  distributors_every?: CompanyWhereInput;
  distributors_some?: CompanyWhereInput;
  distributors_none?: CompanyWhereInput;
  dealers_every?: CompanyWhereInput;
  dealers_some?: CompanyWhereInput;
  dealers_none?: CompanyWhereInput;
  oems_every?: CompanyWhereInput;
  oems_some?: CompanyWhereInput;
  oems_none?: CompanyWhereInput;
  suppliers_every?: CompanyWhereInput;
  suppliers_some?: CompanyWhereInput;
  suppliers_none?: CompanyWhereInput;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  gstNumber?: String;
  gstNumber_not?: String;
  gstNumber_in?: String[] | String;
  gstNumber_not_in?: String[] | String;
  gstNumber_lt?: String;
  gstNumber_lte?: String;
  gstNumber_gt?: String;
  gstNumber_gte?: String;
  gstNumber_contains?: String;
  gstNumber_not_contains?: String;
  gstNumber_starts_with?: String;
  gstNumber_not_starts_with?: String;
  gstNumber_ends_with?: String;
  gstNumber_not_ends_with?: String;
  panNumber?: String;
  panNumber_not?: String;
  panNumber_in?: String[] | String;
  panNumber_not_in?: String[] | String;
  panNumber_lt?: String;
  panNumber_lte?: String;
  panNumber_gt?: String;
  panNumber_gte?: String;
  panNumber_contains?: String;
  panNumber_not_contains?: String;
  panNumber_starts_with?: String;
  panNumber_not_starts_with?: String;
  panNumber_ends_with?: String;
  panNumber_not_ends_with?: String;
  cinNumber?: String;
  cinNumber_not?: String;
  cinNumber_in?: String[] | String;
  cinNumber_not_in?: String[] | String;
  cinNumber_lt?: String;
  cinNumber_lte?: String;
  cinNumber_gt?: String;
  cinNumber_gte?: String;
  cinNumber_contains?: String;
  cinNumber_not_contains?: String;
  cinNumber_starts_with?: String;
  cinNumber_not_starts_with?: String;
  cinNumber_ends_with?: String;
  cinNumber_not_ends_with?: String;
  ownerAadharCardNumber?: String;
  ownerAadharCardNumber_not?: String;
  ownerAadharCardNumber_in?: String[] | String;
  ownerAadharCardNumber_not_in?: String[] | String;
  ownerAadharCardNumber_lt?: String;
  ownerAadharCardNumber_lte?: String;
  ownerAadharCardNumber_gt?: String;
  ownerAadharCardNumber_gte?: String;
  ownerAadharCardNumber_contains?: String;
  ownerAadharCardNumber_not_contains?: String;
  ownerAadharCardNumber_starts_with?: String;
  ownerAadharCardNumber_not_starts_with?: String;
  ownerAadharCardNumber_ends_with?: String;
  ownerAadharCardNumber_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CompanyWhereInput[] | CompanyWhereInput;
  OR?: CompanyWhereInput[] | CompanyWhereInput;
  NOT?: CompanyWhereInput[] | CompanyWhereInput;
}

export interface FileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  associatedId?: String;
  associatedId_not?: String;
  associatedId_in?: String[] | String;
  associatedId_not_in?: String[] | String;
  associatedId_lt?: String;
  associatedId_lte?: String;
  associatedId_gt?: String;
  associatedId_gte?: String;
  associatedId_contains?: String;
  associatedId_not_contains?: String;
  associatedId_starts_with?: String;
  associatedId_not_starts_with?: String;
  associatedId_ends_with?: String;
  associatedId_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  tag?: String;
  tag_not?: String;
  tag_in?: String[] | String;
  tag_not_in?: String[] | String;
  tag_lt?: String;
  tag_lte?: String;
  tag_gt?: String;
  tag_gte?: String;
  tag_contains?: String;
  tag_not_contains?: String;
  tag_starts_with?: String;
  tag_not_starts_with?: String;
  tag_ends_with?: String;
  tag_not_ends_with?: String;
  type?: FileType;
  type_not?: FileType;
  type_in?: FileType[] | FileType;
  type_not_in?: FileType[] | FileType;
  user?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: FileWhereInput[] | FileWhereInput;
  OR?: FileWhereInput[] | FileWhereInput;
  NOT?: FileWhereInput[] | FileWhereInput;
}

export interface ModelWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isActive?: Boolean;
  isActive_not?: Boolean;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  type?: VehicleType;
  type_not?: VehicleType;
  type_in?: VehicleType[] | VehicleType;
  type_not_in?: VehicleType[] | VehicleType;
  company?: CompanyWhereInput;
  imageFile?: FileWhereInput;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  components_every?: ProductWhereInput;
  components_some?: ProductWhereInput;
  components_none?: ProductWhereInput;
  specs_every?: ProductSpecWhereInput;
  specs_some?: ProductSpecWhereInput;
  specs_none?: ProductSpecWhereInput;
  config?: ModelConfigWhereInput;
  vehicles_every?: VehicleWhereInput;
  vehicles_some?: VehicleWhereInput;
  vehicles_none?: VehicleWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ModelWhereInput[] | ModelWhereInput;
  OR?: ModelWhereInput[] | ModelWhereInput;
  NOT?: ModelWhereInput[] | ModelWhereInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: ProductType;
  type_not?: ProductType;
  type_in?: ProductType[] | ProductType;
  type_not_in?: ProductType[] | ProductType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  specs_every?: ProductSpecWhereInput;
  specs_some?: ProductSpecWhereInput;
  specs_none?: ProductSpecWhereInput;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  image?: FileWhereInput;
  imageBuffer?: String;
  imageBuffer_not?: String;
  imageBuffer_in?: String[] | String;
  imageBuffer_not_in?: String[] | String;
  imageBuffer_lt?: String;
  imageBuffer_lte?: String;
  imageBuffer_gt?: String;
  imageBuffer_gte?: String;
  imageBuffer_contains?: String;
  imageBuffer_not_contains?: String;
  imageBuffer_starts_with?: String;
  imageBuffer_not_starts_with?: String;
  imageBuffer_ends_with?: String;
  imageBuffer_not_ends_with?: String;
  inventory_every?: ComponentWhereInput;
  inventory_some?: ComponentWhereInput;
  inventory_none?: ComponentWhereInput;
  company?: CompanyWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface ComponentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  UID?: String;
  UID_not?: String;
  UID_in?: String[] | String;
  UID_not_in?: String[] | String;
  UID_lt?: String;
  UID_lte?: String;
  UID_gt?: String;
  UID_gte?: String;
  UID_contains?: String;
  UID_not_contains?: String;
  UID_starts_with?: String;
  UID_not_starts_with?: String;
  UID_ends_with?: String;
  UID_not_ends_with?: String;
  txInfo?: TxNodeWhereInput;
  status?: ComponentStatus;
  status_not?: ComponentStatus;
  status_in?: ComponentStatus[] | ComponentStatus;
  status_not_in?: ComponentStatus[] | ComponentStatus;
  prototype?: ProductWhereInput;
  specs_every?: ProductSpecWhereInput;
  specs_some?: ProductSpecWhereInput;
  specs_none?: ProductSpecWhereInput;
  owner?: CompanyWhereInput;
  vehicle?: VehicleWhereInput;
  warranty?: WarrantyWhereInput;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ComponentWhereInput[] | ComponentWhereInput;
  OR?: ComponentWhereInput[] | ComponentWhereInput;
  NOT?: ComponentWhereInput[] | ComponentWhereInput;
}

export interface VehicleWhereInput {
  vin?: String;
  vin_not?: String;
  vin_in?: String[] | String;
  vin_not_in?: String[] | String;
  vin_lt?: String;
  vin_lte?: String;
  vin_gt?: String;
  vin_gte?: String;
  vin_contains?: String;
  vin_not_contains?: String;
  vin_starts_with?: String;
  vin_not_starts_with?: String;
  vin_ends_with?: String;
  vin_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  txInfo?: TxNodeWhereInput;
  status?: VehicleStatus;
  status_not?: VehicleStatus;
  status_in?: VehicleStatus[] | VehicleStatus;
  status_not_in?: VehicleStatus[] | VehicleStatus;
  model?: ModelWhereInput;
  dealer?: CompanyWhereInput;
  distributor?: CompanyWhereInput;
  oem?: CompanyWhereInput;
  company?: CompanyWhereInput;
  components_every?: ComponentWhereInput;
  components_some?: ComponentWhereInput;
  components_none?: ComponentWhereInput;
  specs_every?: ProductSpecWhereInput;
  specs_some?: ProductSpecWhereInput;
  specs_none?: ProductSpecWhereInput;
  buyer?: BuyerWhereInput;
  owner?: UserWhereInput;
  device?: DeviceWhereInput;
  peripheral?: PeripheralWhereInput;
  protocol?: Protocol;
  protocol_not?: Protocol;
  protocol_in?: Protocol[] | Protocol;
  protocol_not_in?: Protocol[] | Protocol;
  trackingRequests_every?: TrackingPermissionWhereInput;
  trackingRequests_some?: TrackingPermissionWhereInput;
  trackingRequests_none?: TrackingPermissionWhereInput;
  isHealthy?: Boolean;
  isHealthy_not?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLongitude_not?: String;
  lastMarkedLongitude_in?: String[] | String;
  lastMarkedLongitude_not_in?: String[] | String;
  lastMarkedLongitude_lt?: String;
  lastMarkedLongitude_lte?: String;
  lastMarkedLongitude_gt?: String;
  lastMarkedLongitude_gte?: String;
  lastMarkedLongitude_contains?: String;
  lastMarkedLongitude_not_contains?: String;
  lastMarkedLongitude_starts_with?: String;
  lastMarkedLongitude_not_starts_with?: String;
  lastMarkedLongitude_ends_with?: String;
  lastMarkedLongitude_not_ends_with?: String;
  lastMarkedLatitude?: String;
  lastMarkedLatitude_not?: String;
  lastMarkedLatitude_in?: String[] | String;
  lastMarkedLatitude_not_in?: String[] | String;
  lastMarkedLatitude_lt?: String;
  lastMarkedLatitude_lte?: String;
  lastMarkedLatitude_gt?: String;
  lastMarkedLatitude_gte?: String;
  lastMarkedLatitude_contains?: String;
  lastMarkedLatitude_not_contains?: String;
  lastMarkedLatitude_starts_with?: String;
  lastMarkedLatitude_not_starts_with?: String;
  lastMarkedLatitude_ends_with?: String;
  lastMarkedLatitude_not_ends_with?: String;
  rentalStatus?: RentalStatus;
  rentalStatus_not?: RentalStatus;
  rentalStatus_in?: RentalStatus[] | RentalStatus;
  rentalStatus_not_in?: RentalStatus[] | RentalStatus;
  rides_every?: RideWhereInput;
  rides_some?: RideWhereInput;
  rides_none?: RideWhereInput;
  currentRide?: RideWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: VehicleWhereInput[] | VehicleWhereInput;
  OR?: VehicleWhereInput[] | VehicleWhereInput;
  NOT?: VehicleWhereInput[] | VehicleWhereInput;
}

export interface DeviceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  deviceId?: String;
  deviceId_not?: String;
  deviceId_in?: String[] | String;
  deviceId_not_in?: String[] | String;
  deviceId_lt?: String;
  deviceId_lte?: String;
  deviceId_gt?: String;
  deviceId_gte?: String;
  deviceId_contains?: String;
  deviceId_not_contains?: String;
  deviceId_starts_with?: String;
  deviceId_not_starts_with?: String;
  deviceId_ends_with?: String;
  deviceId_not_ends_with?: String;
  macId?: String;
  macId_not?: String;
  macId_in?: String[] | String;
  macId_not_in?: String[] | String;
  macId_lt?: String;
  macId_lte?: String;
  macId_gt?: String;
  macId_gte?: String;
  macId_contains?: String;
  macId_not_contains?: String;
  macId_starts_with?: String;
  macId_not_starts_with?: String;
  macId_ends_with?: String;
  macId_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  pin?: String;
  pin_not?: String;
  pin_in?: String[] | String;
  pin_not_in?: String[] | String;
  pin_lt?: String;
  pin_lte?: String;
  pin_gt?: String;
  pin_gte?: String;
  pin_contains?: String;
  pin_not_contains?: String;
  pin_starts_with?: String;
  pin_not_starts_with?: String;
  pin_ends_with?: String;
  pin_not_ends_with?: String;
  status?: DeviceStatus;
  status_not?: DeviceStatus;
  status_in?: DeviceStatus[] | DeviceStatus;
  status_not_in?: DeviceStatus[] | DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  updateStatus_not?: DeviceUpdateStatus;
  updateStatus_in?: DeviceUpdateStatus[] | DeviceUpdateStatus;
  updateStatus_not_in?: DeviceUpdateStatus[] | DeviceUpdateStatus;
  type?: DeviceType;
  type_not?: DeviceType;
  type_in?: DeviceType[] | DeviceType;
  type_not_in?: DeviceType[] | DeviceType;
  vehicle?: VehicleWhereInput;
  firmware?: String;
  firmware_not?: String;
  firmware_in?: String[] | String;
  firmware_not_in?: String[] | String;
  firmware_lt?: String;
  firmware_lte?: String;
  firmware_gt?: String;
  firmware_gte?: String;
  firmware_contains?: String;
  firmware_not_contains?: String;
  firmware_starts_with?: String;
  firmware_not_starts_with?: String;
  firmware_ends_with?: String;
  firmware_not_ends_with?: String;
  expectedFirmware?: String;
  expectedFirmware_not?: String;
  expectedFirmware_in?: String[] | String;
  expectedFirmware_not_in?: String[] | String;
  expectedFirmware_lt?: String;
  expectedFirmware_lte?: String;
  expectedFirmware_gt?: String;
  expectedFirmware_gte?: String;
  expectedFirmware_contains?: String;
  expectedFirmware_not_contains?: String;
  expectedFirmware_starts_with?: String;
  expectedFirmware_not_starts_with?: String;
  expectedFirmware_ends_with?: String;
  expectedFirmware_not_ends_with?: String;
  pinResetRequired?: Boolean;
  pinResetRequired_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DeviceWhereInput[] | DeviceWhereInput;
  OR?: DeviceWhereInput[] | DeviceWhereInput;
  NOT?: DeviceWhereInput[] | DeviceWhereInput;
}

export interface PeripheralWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  device_every?: DeviceWhereInput;
  device_some?: DeviceWhereInput;
  device_none?: DeviceWhereInput;
  vehicle?: VehicleWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PeripheralWhereInput[] | PeripheralWhereInput;
  OR?: PeripheralWhereInput[] | PeripheralWhereInput;
  NOT?: PeripheralWhereInput[] | PeripheralWhereInput;
}

export interface TrackingPermissionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  endTime?: DateTimeInput;
  endTime_not?: DateTimeInput;
  endTime_in?: DateTimeInput[] | DateTimeInput;
  endTime_not_in?: DateTimeInput[] | DateTimeInput;
  endTime_lt?: DateTimeInput;
  endTime_lte?: DateTimeInput;
  endTime_gt?: DateTimeInput;
  endTime_gte?: DateTimeInput;
  accessProvider?: UserWhereInput;
  accessors_every?: CompanyWhereInput;
  accessors_some?: CompanyWhereInput;
  accessors_none?: CompanyWhereInput;
  vehicle?: VehicleWhereInput;
  status?: TrackingPermissionStatus;
  status_not?: TrackingPermissionStatus;
  status_in?: TrackingPermissionStatus[] | TrackingPermissionStatus;
  status_not_in?: TrackingPermissionStatus[] | TrackingPermissionStatus;
  AND?: TrackingPermissionWhereInput[] | TrackingPermissionWhereInput;
  OR?: TrackingPermissionWhereInput[] | TrackingPermissionWhereInput;
  NOT?: TrackingPermissionWhereInput[] | TrackingPermissionWhereInput;
}

export interface WarrantyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  expiry?: DateTimeInput;
  expiry_not?: DateTimeInput;
  expiry_in?: DateTimeInput[] | DateTimeInput;
  expiry_not_in?: DateTimeInput[] | DateTimeInput;
  expiry_lt?: DateTimeInput;
  expiry_lte?: DateTimeInput;
  expiry_gt?: DateTimeInput;
  expiry_gte?: DateTimeInput;
  status?: WarrantyStatus;
  status_not?: WarrantyStatus;
  status_in?: WarrantyStatus[] | WarrantyStatus;
  status_not_in?: WarrantyStatus[] | WarrantyStatus;
  AND?: WarrantyWhereInput[] | WarrantyWhereInput;
  OR?: WarrantyWhereInput[] | WarrantyWhereInput;
  NOT?: WarrantyWhereInput[] | WarrantyWhereInput;
}

export interface ModelConfigWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  speedDivisor?: Float;
  speedDivisor_not?: Float;
  speedDivisor_in?: Float[] | Float;
  speedDivisor_not_in?: Float[] | Float;
  speedDivisor_lt?: Float;
  speedDivisor_lte?: Float;
  speedDivisor_gt?: Float;
  speedDivisor_gte?: Float;
  odoDivisor?: Float;
  odoDivisor_not?: Float;
  odoDivisor_in?: Float[] | Float;
  odoDivisor_not_in?: Float[] | Float;
  odoDivisor_lt?: Float;
  odoDivisor_lte?: Float;
  odoDivisor_gt?: Float;
  odoDivisor_gte?: Float;
  accessType?: ModelAccessType;
  accessType_not?: ModelAccessType;
  accessType_in?: ModelAccessType[] | ModelAccessType;
  accessType_not_in?: ModelAccessType[] | ModelAccessType;
  wheelDiameter?: Float;
  wheelDiameter_not?: Float;
  wheelDiameter_in?: Float[] | Float;
  wheelDiameter_not_in?: Float[] | Float;
  wheelDiameter_lt?: Float;
  wheelDiameter_lte?: Float;
  wheelDiameter_gt?: Float;
  wheelDiameter_gte?: Float;
  maxSpeed?: Float;
  maxSpeed_not?: Float;
  maxSpeed_in?: Float[] | Float;
  maxSpeed_not_in?: Float[] | Float;
  maxSpeed_lt?: Float;
  maxSpeed_lte?: Float;
  maxSpeed_gt?: Float;
  maxSpeed_gte?: Float;
  model?: ModelWhereInput;
  hillAssistStatus?: Boolean;
  hillAssistStatus_not?: Boolean;
  parkingStatus?: Boolean;
  parkingStatus_not?: Boolean;
  regenBrakingStatus?: Boolean;
  regenBrakingStatus_not?: Boolean;
  speedLimit?: Float;
  speedLimit_not?: Float;
  speedLimit_in?: Float[] | Float;
  speedLimit_not_in?: Float[] | Float;
  speedLimit_lt?: Float;
  speedLimit_lte?: Float;
  speedLimit_gt?: Float;
  speedLimit_gte?: Float;
  pickupControlLimit?: Float;
  pickupControlLimit_not?: Float;
  pickupControlLimit_in?: Float[] | Float;
  pickupControlLimit_not_in?: Float[] | Float;
  pickupControlLimit_lt?: Float;
  pickupControlLimit_lte?: Float;
  pickupControlLimit_gt?: Float;
  pickupControlLimit_gte?: Float;
  brakeRegenLimit?: Float;
  brakeRegenLimit_not?: Float;
  brakeRegenLimit_in?: Float[] | Float;
  brakeRegenLimit_not_in?: Float[] | Float;
  brakeRegenLimit_lt?: Float;
  brakeRegenLimit_lte?: Float;
  brakeRegenLimit_gt?: Float;
  brakeRegenLimit_gte?: Float;
  zeroThrottleRegenLimit?: Float;
  zeroThrottleRegenLimit_not?: Float;
  zeroThrottleRegenLimit_in?: Float[] | Float;
  zeroThrottleRegenLimit_not_in?: Float[] | Float;
  zeroThrottleRegenLimit_lt?: Float;
  zeroThrottleRegenLimit_lte?: Float;
  zeroThrottleRegenLimit_gt?: Float;
  zeroThrottleRegenLimit_gte?: Float;
  currentLimit?: Float;
  currentLimit_not?: Float;
  currentLimit_in?: Float[] | Float;
  currentLimit_not_in?: Float[] | Float;
  currentLimit_lt?: Float;
  currentLimit_lte?: Float;
  currentLimit_gt?: Float;
  currentLimit_gte?: Float;
  eabsStatus?: Boolean;
  eabsStatus_not?: Boolean;
  overVoltageLimit?: Float;
  overVoltageLimit_not?: Float;
  overVoltageLimit_in?: Float[] | Float;
  overVoltageLimit_not_in?: Float[] | Float;
  overVoltageLimit_lt?: Float;
  overVoltageLimit_lte?: Float;
  overVoltageLimit_gt?: Float;
  overVoltageLimit_gte?: Float;
  underVoltageLimit?: Float;
  underVoltageLimit_not?: Float;
  underVoltageLimit_in?: Float[] | Float;
  underVoltageLimit_not_in?: Float[] | Float;
  underVoltageLimit_lt?: Float;
  underVoltageLimit_lte?: Float;
  underVoltageLimit_gt?: Float;
  underVoltageLimit_gte?: Float;
  batteryMinVoltage?: Float;
  batteryMinVoltage_not?: Float;
  batteryMinVoltage_in?: Float[] | Float;
  batteryMinVoltage_not_in?: Float[] | Float;
  batteryMinVoltage_lt?: Float;
  batteryMinVoltage_lte?: Float;
  batteryMinVoltage_gt?: Float;
  batteryMinVoltage_gte?: Float;
  batteryMaxVoltage?: Float;
  batteryMaxVoltage_not?: Float;
  batteryMaxVoltage_in?: Float[] | Float;
  batteryMaxVoltage_not_in?: Float[] | Float;
  batteryMaxVoltage_lt?: Float;
  batteryMaxVoltage_lte?: Float;
  batteryMaxVoltage_gt?: Float;
  batteryMaxVoltage_gte?: Float;
  AND?: ModelConfigWhereInput[] | ModelConfigWhereInput;
  OR?: ModelConfigWhereInput[] | ModelConfigWhereInput;
  NOT?: ModelConfigWhereInput[] | ModelConfigWhereInput;
}

export interface FirebaseProfileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  uid?: String;
  uid_not?: String;
  uid_in?: String[] | String;
  uid_not_in?: String[] | String;
  uid_lt?: String;
  uid_lte?: String;
  uid_gt?: String;
  uid_gte?: String;
  uid_contains?: String;
  uid_not_contains?: String;
  uid_starts_with?: String;
  uid_not_starts_with?: String;
  uid_ends_with?: String;
  uid_not_ends_with?: String;
  displayName?: String;
  displayName_not?: String;
  displayName_in?: String[] | String;
  displayName_not_in?: String[] | String;
  displayName_lt?: String;
  displayName_lte?: String;
  displayName_gt?: String;
  displayName_gte?: String;
  displayName_contains?: String;
  displayName_not_contains?: String;
  displayName_starts_with?: String;
  displayName_not_starts_with?: String;
  displayName_ends_with?: String;
  displayName_not_ends_with?: String;
  AND?: FirebaseProfileWhereInput[] | FirebaseProfileWhereInput;
  OR?: FirebaseProfileWhereInput[] | FirebaseProfileWhereInput;
  NOT?: FirebaseProfileWhereInput[] | FirebaseProfileWhereInput;
}

export interface pauseActivityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  pauseStart?: DateTimeInput;
  pauseStart_not?: DateTimeInput;
  pauseStart_in?: DateTimeInput[] | DateTimeInput;
  pauseStart_not_in?: DateTimeInput[] | DateTimeInput;
  pauseStart_lt?: DateTimeInput;
  pauseStart_lte?: DateTimeInput;
  pauseStart_gt?: DateTimeInput;
  pauseStart_gte?: DateTimeInput;
  pauseEnd?: DateTimeInput;
  pauseEnd_not?: DateTimeInput;
  pauseEnd_in?: DateTimeInput[] | DateTimeInput;
  pauseEnd_not_in?: DateTimeInput[] | DateTimeInput;
  pauseEnd_lt?: DateTimeInput;
  pauseEnd_lte?: DateTimeInput;
  pauseEnd_gt?: DateTimeInput;
  pauseEnd_gte?: DateTimeInput;
  AND?: pauseActivityWhereInput[] | pauseActivityWhereInput;
  OR?: pauseActivityWhereInput[] | pauseActivityWhereInput;
  NOT?: pauseActivityWhereInput[] | pauseActivityWhereInput;
}

export type ComponentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  UID?: String;
}>;

export type DeviceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  deviceId?: String;
}>;

export type FileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export type FirebaseProfileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  uid?: String;
}>;

export type InvoiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface InvoiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: InvoiceWhereInput[] | InvoiceWhereInput;
  OR?: InvoiceWhereInput[] | InvoiceWhereInput;
  NOT?: InvoiceWhereInput[] | InvoiceWhereInput;
}

export type ModelWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  key?: String;
}>;

export type ModelConfigWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PeripheralWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  key?: String;
}>;

export type ProductSpecWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type RideWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ServiceTicketWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TicketActivityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  type?: ActivityType;
  type_not?: ActivityType;
  type_in?: ActivityType[] | ActivityType;
  type_not_in?: ActivityType[] | ActivityType;
  user?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TicketActivityWhereInput[] | TicketActivityWhereInput;
  OR?: TicketActivityWhereInput[] | TicketActivityWhereInput;
  NOT?: TicketActivityWhereInput[] | TicketActivityWhereInput;
}

export interface ServiceTicketWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  assignee?: CompanyWhereInput;
  owner?: CompanyWhereInput;
  vehicle?: VehicleWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  ticketImages_every?: FileWhereInput;
  ticketImages_some?: FileWhereInput;
  ticketImages_none?: FileWhereInput;
  activities_every?: TicketActivityWhereInput;
  activities_some?: TicketActivityWhereInput;
  activities_none?: TicketActivityWhereInput;
  status?: ServiceStatus;
  status_not?: ServiceStatus;
  status_in?: ServiceStatus[] | ServiceStatus;
  status_not_in?: ServiceStatus[] | ServiceStatus;
  user?: UserWhereInput;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ServiceTicketWhereInput[] | ServiceTicketWhereInput;
  OR?: ServiceTicketWhereInput[] | ServiceTicketWhereInput;
  NOT?: ServiceTicketWhereInput[] | ServiceTicketWhereInput;
}

export type StakeHolderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StakeHolderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateReceived?: DateTimeInput;
  dateReceived_not?: DateTimeInput;
  dateReceived_in?: DateTimeInput[] | DateTimeInput;
  dateReceived_not_in?: DateTimeInput[] | DateTimeInput;
  dateReceived_lt?: DateTimeInput;
  dateReceived_lte?: DateTimeInput;
  dateReceived_gt?: DateTimeInput;
  dateReceived_gte?: DateTimeInput;
  owner?: TxNodeWhereInput;
  asset?: TxNodeWhereInput;
  txInfo?: TxInfoWhereInput;
  previousStakeHolder?: StakeHolderWhereInput;
  status?: StakeHolderStatus;
  status_not?: StakeHolderStatus;
  status_in?: StakeHolderStatus[] | StakeHolderStatus;
  status_not_in?: StakeHolderStatus[] | StakeHolderStatus;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: StakeHolderWhereInput[] | StakeHolderWhereInput;
  OR?: StakeHolderWhereInput[] | StakeHolderWhereInput;
  NOT?: StakeHolderWhereInput[] | StakeHolderWhereInput;
}

export interface TxInfoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: TxType;
  type_not?: TxType;
  type_in?: TxType[] | TxType;
  type_not_in?: TxType[] | TxType;
  invoice?: InvoiceWhereInput;
  AND?: TxInfoWhereInput[] | TxInfoWhereInput;
  OR?: TxInfoWhereInput[] | TxInfoWhereInput;
  NOT?: TxInfoWhereInput[] | TxInfoWhereInput;
}

export type TicketActivityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TrackingPermissionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TxInfoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TxNodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  email: String;
  openId?: String;
  unionId?: String;
  phone?: String;
  id?: ID_Input;
}>;

export type VehicleWhereUniqueInput = AtLeastOne<{
  vin: String;
  id?: ID_Input;
}>;

export type WarrantyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type pauseActivityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AutoIncrementCreateInput {
  serviceTicketSequence?: Int;
  orderSequence?: Int;
  status?: statusType;
}

export interface AutoIncrementUpdateInput {
  serviceTicketSequence?: Int;
  orderSequence?: Int;
  status?: statusType;
}

export interface AutoIncrementUpdateManyMutationInput {
  serviceTicketSequence?: Int;
  orderSequence?: Int;
  status?: statusType;
}

export interface BuyerCreateInput {
  firstName?: String;
  lastName?: String;
  parentName?: String;
  phone?: String;
  email?: String;
  aadharCard?: String;
  address?: String;
  dateOfBirth?: DateTimeInput;
  identityProof?: String;
  addressProof?: String;
}

export interface BuyerUpdateInput {
  firstName?: String;
  lastName?: String;
  parentName?: String;
  phone?: String;
  email?: String;
  aadharCard?: String;
  address?: String;
  dateOfBirth?: DateTimeInput;
  identityProof?: String;
  addressProof?: String;
}

export interface BuyerUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  parentName?: String;
  phone?: String;
  email?: String;
  aadharCard?: String;
  address?: String;
  dateOfBirth?: DateTimeInput;
  identityProof?: String;
  addressProof?: String;
}

export interface CompanyCreateInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface TxNodeCreateOneWithoutCompanyInput {
  create?: TxNodeCreateWithoutCompanyInput;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeCreateWithoutCompanyInput {
  type?: TxNodeType;
  component?: ComponentCreateOneWithoutTxInfoInput;
  user?: UserCreateOneWithoutTxInfoInput;
  vehicle?: VehicleCreateOneWithoutTxInfoInput;
}

export interface ComponentCreateOneWithoutTxInfoInput {
  create?: ComponentCreateWithoutTxInfoInput;
  connect?: ComponentWhereUniqueInput;
}

export interface ComponentCreateWithoutTxInfoInput {
  UID?: String;
  status?: ComponentStatus;
  prototype?: ProductCreateOneWithoutInventoryInput;
  specs?: ProductSpecCreateManyInput;
  owner?: CompanyCreateOneWithoutInventoryInput;
  vehicle?: VehicleCreateOneWithoutComponentsInput;
  warranty?: WarrantyCreateOneInput;
  notes?: String;
}

export interface ProductCreateOneWithoutInventoryInput {
  create?: ProductCreateWithoutInventoryInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductCreateWithoutInventoryInput {
  type?: ProductType;
  name?: String;
  key?: String;
  specs?: ProductSpecCreateManyInput;
  status?: statusType;
  image?: FileCreateOneInput;
  imageBuffer?: String;
  company?: CompanyCreateOneWithoutComponentsInput;
}

export interface ProductSpecCreateManyInput {
  create?: ProductSpecCreateInput[] | ProductSpecCreateInput;
  connect?: ProductSpecWhereUniqueInput[] | ProductSpecWhereUniqueInput;
}

export interface ProductSpecCreateInput {
  key?: String;
  value?: String;
  unit?: String;
  required?: Boolean;
}

export interface FileCreateOneInput {
  create?: FileCreateInput;
  connect?: FileWhereUniqueInput;
}

export interface FileCreateInput {
  associatedId?: String;
  name: String;
  tag?: String;
  type?: FileType;
  user: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeCreateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileCreateOneInput;
  role?: Role;
  company?: CompanyCreateOneWithoutUsersInput;
  status?: statusType;
  vehiclesDriven?: RideCreateManyWithoutRiderInput;
  trackingRequests?: TrackingPermissionCreateManyWithoutAccessProviderInput;
}

export interface TxNodeCreateOneWithoutUserInput {
  create?: TxNodeCreateWithoutUserInput;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeCreateWithoutUserInput {
  type?: TxNodeType;
  company?: CompanyCreateOneWithoutTxInfoInput;
  component?: ComponentCreateOneWithoutTxInfoInput;
  vehicle?: VehicleCreateOneWithoutTxInfoInput;
}

export interface CompanyCreateOneWithoutTxInfoInput {
  create?: CompanyCreateWithoutTxInfoInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutTxInfoInput {
  name: String;
  token?: String;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface UserCreateManyWithoutCompanyInput {
  create?: UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutCompanyInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeCreateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileCreateOneInput;
  role?: Role;
  status?: statusType;
  vehiclesDriven?: RideCreateManyWithoutRiderInput;
  trackingRequests?: TrackingPermissionCreateManyWithoutAccessProviderInput;
}

export interface FirebaseProfileCreateOneInput {
  create?: FirebaseProfileCreateInput;
  connect?: FirebaseProfileWhereUniqueInput;
}

export interface FirebaseProfileCreateInput {
  uid?: String;
  displayName?: String;
}

export interface RideCreateManyWithoutRiderInput {
  create?: RideCreateWithoutRiderInput[] | RideCreateWithoutRiderInput;
  connect?: RideWhereUniqueInput[] | RideWhereUniqueInput;
}

export interface RideCreateWithoutRiderInput {
  vehicle?: VehicleCreateOneWithoutRidesInput;
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  pauseActivities?: pauseActivityCreateManyInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface VehicleCreateOneWithoutRidesInput {
  create?: VehicleCreateWithoutRidesInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutRidesInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  currentRide?: RideCreateOneInput;
}

export interface TxNodeCreateOneWithoutVehicleInput {
  create?: TxNodeCreateWithoutVehicleInput;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeCreateWithoutVehicleInput {
  type?: TxNodeType;
  company?: CompanyCreateOneWithoutTxInfoInput;
  component?: ComponentCreateOneWithoutTxInfoInput;
  user?: UserCreateOneWithoutTxInfoInput;
}

export interface UserCreateOneWithoutTxInfoInput {
  create?: UserCreateWithoutTxInfoInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutTxInfoInput {
  address?: String;
  email?: String;
  openId?: String;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileCreateOneInput;
  role?: Role;
  company?: CompanyCreateOneWithoutUsersInput;
  status?: statusType;
  vehiclesDriven?: RideCreateManyWithoutRiderInput;
  trackingRequests?: TrackingPermissionCreateManyWithoutAccessProviderInput;
}

export interface CompanyCreateOneWithoutUsersInput {
  create?: CompanyCreateWithoutUsersInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutUsersInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface ModelCreateManyWithoutCompanyInput {
  create?: ModelCreateWithoutCompanyInput[] | ModelCreateWithoutCompanyInput;
  connect?: ModelWhereUniqueInput[] | ModelWhereUniqueInput;
}

export interface ModelCreateWithoutCompanyInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  imageFile?: FileCreateOneInput;
  image?: String;
  components?: ProductCreateManyInput;
  specs?: ProductSpecCreateManyInput;
  config?: ModelConfigCreateOneWithoutModelInput;
  vehicles?: VehicleCreateManyWithoutModelInput;
}

export interface ProductCreateManyInput {
  create?: ProductCreateInput[] | ProductCreateInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface ProductCreateInput {
  type?: ProductType;
  name?: String;
  key?: String;
  specs?: ProductSpecCreateManyInput;
  status?: statusType;
  image?: FileCreateOneInput;
  imageBuffer?: String;
  inventory?: ComponentCreateManyWithoutPrototypeInput;
  company?: CompanyCreateOneWithoutComponentsInput;
}

export interface ComponentCreateManyWithoutPrototypeInput {
  create?:
    | ComponentCreateWithoutPrototypeInput[]
    | ComponentCreateWithoutPrototypeInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
}

export interface ComponentCreateWithoutPrototypeInput {
  UID?: String;
  txInfo?: TxNodeCreateOneWithoutComponentInput;
  status?: ComponentStatus;
  specs?: ProductSpecCreateManyInput;
  owner?: CompanyCreateOneWithoutInventoryInput;
  vehicle?: VehicleCreateOneWithoutComponentsInput;
  warranty?: WarrantyCreateOneInput;
  notes?: String;
}

export interface TxNodeCreateOneWithoutComponentInput {
  create?: TxNodeCreateWithoutComponentInput;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeCreateWithoutComponentInput {
  type?: TxNodeType;
  company?: CompanyCreateOneWithoutTxInfoInput;
  user?: UserCreateOneWithoutTxInfoInput;
  vehicle?: VehicleCreateOneWithoutTxInfoInput;
}

export interface VehicleCreateOneWithoutTxInfoInput {
  create?: VehicleCreateWithoutTxInfoInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutTxInfoInput {
  vin: String;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface ModelCreateOneWithoutVehiclesInput {
  create?: ModelCreateWithoutVehiclesInput;
  connect?: ModelWhereUniqueInput;
}

export interface ModelCreateWithoutVehiclesInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  company?: CompanyCreateOneWithoutModelsInput;
  imageFile?: FileCreateOneInput;
  image?: String;
  components?: ProductCreateManyInput;
  specs?: ProductSpecCreateManyInput;
  config?: ModelConfigCreateOneWithoutModelInput;
}

export interface CompanyCreateOneWithoutModelsInput {
  create?: CompanyCreateWithoutModelsInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutModelsInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface ProductCreateManyWithoutCompanyInput {
  create?:
    | ProductCreateWithoutCompanyInput[]
    | ProductCreateWithoutCompanyInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface ProductCreateWithoutCompanyInput {
  type?: ProductType;
  name?: String;
  key?: String;
  specs?: ProductSpecCreateManyInput;
  status?: statusType;
  image?: FileCreateOneInput;
  imageBuffer?: String;
  inventory?: ComponentCreateManyWithoutPrototypeInput;
}

export interface ComponentCreateManyWithoutOwnerInput {
  create?:
    | ComponentCreateWithoutOwnerInput[]
    | ComponentCreateWithoutOwnerInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
}

export interface ComponentCreateWithoutOwnerInput {
  UID?: String;
  txInfo?: TxNodeCreateOneWithoutComponentInput;
  status?: ComponentStatus;
  prototype?: ProductCreateOneWithoutInventoryInput;
  specs?: ProductSpecCreateManyInput;
  vehicle?: VehicleCreateOneWithoutComponentsInput;
  warranty?: WarrantyCreateOneInput;
  notes?: String;
}

export interface VehicleCreateOneWithoutComponentsInput {
  create?: VehicleCreateWithoutComponentsInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutComponentsInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface CompanyCreateOneInput {
  create?: CompanyCreateInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateOneWithoutVehiclesInput {
  create?: CompanyCreateWithoutVehiclesInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutVehiclesInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyCreateManyWithoutDistributorsInput {
  create?:
    | CompanyCreateWithoutDistributorsInput[]
    | CompanyCreateWithoutDistributorsInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutDistributorsInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface VehicleCreateManyWithoutCompanyInput {
  create?:
    | VehicleCreateWithoutCompanyInput[]
    | VehicleCreateWithoutCompanyInput;
  connect?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutCompanyInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface ComponentCreateManyWithoutVehicleInput {
  create?:
    | ComponentCreateWithoutVehicleInput[]
    | ComponentCreateWithoutVehicleInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
}

export interface ComponentCreateWithoutVehicleInput {
  UID?: String;
  txInfo?: TxNodeCreateOneWithoutComponentInput;
  status?: ComponentStatus;
  prototype?: ProductCreateOneWithoutInventoryInput;
  specs?: ProductSpecCreateManyInput;
  owner?: CompanyCreateOneWithoutInventoryInput;
  warranty?: WarrantyCreateOneInput;
  notes?: String;
}

export interface CompanyCreateOneWithoutInventoryInput {
  create?: CompanyCreateWithoutInventoryInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutInventoryInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyCreateManyWithoutDealersInput {
  create?:
    | CompanyCreateWithoutDealersInput[]
    | CompanyCreateWithoutDealersInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutDealersInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyCreateManyWithoutOemsInput {
  create?: CompanyCreateWithoutOemsInput[] | CompanyCreateWithoutOemsInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutOemsInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyCreateManyWithoutSuppliersInput {
  create?:
    | CompanyCreateWithoutSuppliersInput[]
    | CompanyCreateWithoutSuppliersInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutSuppliersInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  components?: ProductCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface WarrantyCreateOneInput {
  create?: WarrantyCreateInput;
  connect?: WarrantyWhereUniqueInput;
}

export interface WarrantyCreateInput {
  number?: String;
  expiry?: DateTimeInput;
  status?: WarrantyStatus;
}

export interface BuyerCreateOneInput {
  create?: BuyerCreateInput;
  connect?: BuyerWhereUniqueInput;
}

export interface DeviceCreateOneWithoutVehicleInput {
  create?: DeviceCreateWithoutVehicleInput;
  connect?: DeviceWhereUniqueInput;
}

export interface DeviceCreateWithoutVehicleInput {
  name?: String;
  deviceId: String;
  macId: String;
  key: String;
  pin?: String;
  status?: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
}

export interface PeripheralCreateOneWithoutVehicleInput {
  create?: PeripheralCreateWithoutVehicleInput;
  connect?: PeripheralWhereUniqueInput;
}

export interface PeripheralCreateWithoutVehicleInput {
  device?: DeviceCreateManyInput;
}

export interface DeviceCreateManyInput {
  create?: DeviceCreateInput[] | DeviceCreateInput;
  connect?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
}

export interface DeviceCreateInput {
  name?: String;
  deviceId: String;
  macId: String;
  key: String;
  pin?: String;
  status?: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  vehicle?: VehicleCreateOneWithoutDeviceInput;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
}

export interface VehicleCreateOneWithoutDeviceInput {
  create?: VehicleCreateWithoutDeviceInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutDeviceInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface TrackingPermissionCreateManyWithoutVehicleInput {
  create?:
    | TrackingPermissionCreateWithoutVehicleInput[]
    | TrackingPermissionCreateWithoutVehicleInput;
  connect?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
}

export interface TrackingPermissionCreateWithoutVehicleInput {
  startTime: DateTimeInput;
  endTime: DateTimeInput;
  accessProvider?: UserCreateOneWithoutTrackingRequestsInput;
  accessors?: CompanyCreateManyInput;
  status?: TrackingPermissionStatus;
}

export interface UserCreateOneWithoutTrackingRequestsInput {
  create?: UserCreateWithoutTrackingRequestsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutTrackingRequestsInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeCreateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileCreateOneInput;
  role?: Role;
  company?: CompanyCreateOneWithoutUsersInput;
  status?: statusType;
  vehiclesDriven?: RideCreateManyWithoutRiderInput;
}

export interface CompanyCreateManyInput {
  create?: CompanyCreateInput[] | CompanyCreateInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface RideCreateManyWithoutVehicleInput {
  create?: RideCreateWithoutVehicleInput[] | RideCreateWithoutVehicleInput;
  connect?: RideWhereUniqueInput[] | RideWhereUniqueInput;
}

export interface RideCreateWithoutVehicleInput {
  rider?: UserCreateOneWithoutVehiclesDrivenInput;
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  pauseActivities?: pauseActivityCreateManyInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface UserCreateOneWithoutVehiclesDrivenInput {
  create?: UserCreateWithoutVehiclesDrivenInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutVehiclesDrivenInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeCreateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileCreateOneInput;
  role?: Role;
  company?: CompanyCreateOneWithoutUsersInput;
  status?: statusType;
  trackingRequests?: TrackingPermissionCreateManyWithoutAccessProviderInput;
}

export interface TrackingPermissionCreateManyWithoutAccessProviderInput {
  create?:
    | TrackingPermissionCreateWithoutAccessProviderInput[]
    | TrackingPermissionCreateWithoutAccessProviderInput;
  connect?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
}

export interface TrackingPermissionCreateWithoutAccessProviderInput {
  startTime: DateTimeInput;
  endTime: DateTimeInput;
  accessors?: CompanyCreateManyInput;
  vehicle: VehicleCreateOneWithoutTrackingRequestsInput;
  status?: TrackingPermissionStatus;
}

export interface VehicleCreateOneWithoutTrackingRequestsInput {
  create?: VehicleCreateWithoutTrackingRequestsInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutTrackingRequestsInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface RideCreateOneInput {
  create?: RideCreateInput;
  connect?: RideWhereUniqueInput;
}

export interface RideCreateInput {
  rider?: UserCreateOneWithoutVehiclesDrivenInput;
  vehicle?: VehicleCreateOneWithoutRidesInput;
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  pauseActivities?: pauseActivityCreateManyInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface pauseActivityCreateManyInput {
  create?: pauseActivityCreateInput[] | pauseActivityCreateInput;
  connect?: pauseActivityWhereUniqueInput[] | pauseActivityWhereUniqueInput;
}

export interface pauseActivityCreateInput {
  pauseStart?: DateTimeInput;
  pauseEnd?: DateTimeInput;
}

export interface ModelConfigCreateOneWithoutModelInput {
  create?: ModelConfigCreateWithoutModelInput;
  connect?: ModelConfigWhereUniqueInput;
}

export interface ModelConfigCreateWithoutModelInput {
  speedDivisor?: Float;
  odoDivisor?: Float;
  accessType?: ModelAccessType;
  wheelDiameter?: Float;
  maxSpeed?: Float;
  hillAssistStatus?: Boolean;
  parkingStatus?: Boolean;
  regenBrakingStatus?: Boolean;
  speedLimit?: Float;
  pickupControlLimit?: Float;
  brakeRegenLimit?: Float;
  zeroThrottleRegenLimit?: Float;
  currentLimit?: Float;
  eabsStatus?: Boolean;
  overVoltageLimit?: Float;
  underVoltageLimit?: Float;
  batteryMinVoltage?: Float;
  batteryMaxVoltage?: Float;
}

export interface CompanyCreateOneWithoutComponentsInput {
  create?: CompanyCreateWithoutComponentsInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutComponentsInput {
  name: String;
  token?: String;
  txInfo?: TxNodeCreateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileCreateOneInput;
  users?: UserCreateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelCreateManyWithoutCompanyInput;
  inventory?: ComponentCreateManyWithoutOwnerInput;
  vehicles?: VehicleCreateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyCreateManyWithoutDistributorsInput;
  dealers?: CompanyCreateManyWithoutDealersInput;
  oems?: CompanyCreateManyWithoutOemsInput;
  suppliers?: CompanyCreateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface VehicleCreateManyWithoutModelInput {
  create?: VehicleCreateWithoutModelInput[] | VehicleCreateWithoutModelInput;
  connect?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutModelInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface CompanyUpdateInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface TxNodeUpdateOneWithoutCompanyInput {
  create?: TxNodeCreateWithoutCompanyInput;
  update?: TxNodeUpdateWithoutCompanyDataInput;
  upsert?: TxNodeUpsertWithoutCompanyInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeUpdateWithoutCompanyDataInput {
  type?: TxNodeType;
  component?: ComponentUpdateOneWithoutTxInfoInput;
  user?: UserUpdateOneWithoutTxInfoInput;
  vehicle?: VehicleUpdateOneWithoutTxInfoInput;
}

export interface ComponentUpdateOneWithoutTxInfoInput {
  create?: ComponentCreateWithoutTxInfoInput;
  update?: ComponentUpdateWithoutTxInfoDataInput;
  upsert?: ComponentUpsertWithoutTxInfoInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ComponentWhereUniqueInput;
}

export interface ComponentUpdateWithoutTxInfoDataInput {
  UID?: String;
  status?: ComponentStatus;
  prototype?: ProductUpdateOneWithoutInventoryInput;
  specs?: ProductSpecUpdateManyInput;
  owner?: CompanyUpdateOneWithoutInventoryInput;
  vehicle?: VehicleUpdateOneWithoutComponentsInput;
  warranty?: WarrantyUpdateOneInput;
  notes?: String;
}

export interface ProductUpdateOneWithoutInventoryInput {
  create?: ProductCreateWithoutInventoryInput;
  update?: ProductUpdateWithoutInventoryDataInput;
  upsert?: ProductUpsertWithoutInventoryInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductWhereUniqueInput;
}

export interface ProductUpdateWithoutInventoryDataInput {
  type?: ProductType;
  name?: String;
  key?: String;
  specs?: ProductSpecUpdateManyInput;
  status?: statusType;
  image?: FileUpdateOneInput;
  imageBuffer?: String;
  company?: CompanyUpdateOneWithoutComponentsInput;
}

export interface ProductSpecUpdateManyInput {
  create?: ProductSpecCreateInput[] | ProductSpecCreateInput;
  update?:
    | ProductSpecUpdateWithWhereUniqueNestedInput[]
    | ProductSpecUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ProductSpecUpsertWithWhereUniqueNestedInput[]
    | ProductSpecUpsertWithWhereUniqueNestedInput;
  delete?: ProductSpecWhereUniqueInput[] | ProductSpecWhereUniqueInput;
  connect?: ProductSpecWhereUniqueInput[] | ProductSpecWhereUniqueInput;
  set?: ProductSpecWhereUniqueInput[] | ProductSpecWhereUniqueInput;
  disconnect?: ProductSpecWhereUniqueInput[] | ProductSpecWhereUniqueInput;
  deleteMany?: ProductSpecScalarWhereInput[] | ProductSpecScalarWhereInput;
  updateMany?:
    | ProductSpecUpdateManyWithWhereNestedInput[]
    | ProductSpecUpdateManyWithWhereNestedInput;
}

export interface ProductSpecUpdateWithWhereUniqueNestedInput {
  where: ProductSpecWhereUniqueInput;
  data: ProductSpecUpdateDataInput;
}

export interface ProductSpecUpdateDataInput {
  key?: String;
  value?: String;
  unit?: String;
  required?: Boolean;
}

export interface ProductSpecUpsertWithWhereUniqueNestedInput {
  where: ProductSpecWhereUniqueInput;
  update: ProductSpecUpdateDataInput;
  create: ProductSpecCreateInput;
}

export interface ProductSpecScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  unit?: String;
  unit_not?: String;
  unit_in?: String[] | String;
  unit_not_in?: String[] | String;
  unit_lt?: String;
  unit_lte?: String;
  unit_gt?: String;
  unit_gte?: String;
  unit_contains?: String;
  unit_not_contains?: String;
  unit_starts_with?: String;
  unit_not_starts_with?: String;
  unit_ends_with?: String;
  unit_not_ends_with?: String;
  required?: Boolean;
  required_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProductSpecScalarWhereInput[] | ProductSpecScalarWhereInput;
  OR?: ProductSpecScalarWhereInput[] | ProductSpecScalarWhereInput;
  NOT?: ProductSpecScalarWhereInput[] | ProductSpecScalarWhereInput;
}

export interface ProductSpecUpdateManyWithWhereNestedInput {
  where: ProductSpecScalarWhereInput;
  data: ProductSpecUpdateManyDataInput;
}

export interface ProductSpecUpdateManyDataInput {
  key?: String;
  value?: String;
  unit?: String;
  required?: Boolean;
}

export interface FileUpdateOneInput {
  create?: FileCreateInput;
  update?: FileUpdateDataInput;
  upsert?: FileUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FileWhereUniqueInput;
}

export interface FileUpdateDataInput {
  associatedId?: String;
  name?: String;
  tag?: String;
  type?: FileType;
  user?: UserUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeUpdateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileUpdateOneInput;
  role?: Role;
  company?: CompanyUpdateOneWithoutUsersInput;
  status?: statusType;
  vehiclesDriven?: RideUpdateManyWithoutRiderInput;
  trackingRequests?: TrackingPermissionUpdateManyWithoutAccessProviderInput;
}

export interface TxNodeUpdateOneWithoutUserInput {
  create?: TxNodeCreateWithoutUserInput;
  update?: TxNodeUpdateWithoutUserDataInput;
  upsert?: TxNodeUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeUpdateWithoutUserDataInput {
  type?: TxNodeType;
  company?: CompanyUpdateOneWithoutTxInfoInput;
  component?: ComponentUpdateOneWithoutTxInfoInput;
  vehicle?: VehicleUpdateOneWithoutTxInfoInput;
}

export interface CompanyUpdateOneWithoutTxInfoInput {
  create?: CompanyCreateWithoutTxInfoInput;
  update?: CompanyUpdateWithoutTxInfoDataInput;
  upsert?: CompanyUpsertWithoutTxInfoInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateWithoutTxInfoDataInput {
  name?: String;
  token?: String;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface UserUpdateManyWithoutCompanyInput {
  create?: UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    | UserUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    | UserUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCompanyDataInput;
}

export interface UserUpdateWithoutCompanyDataInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeUpdateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileUpdateOneInput;
  role?: Role;
  status?: statusType;
  vehiclesDriven?: RideUpdateManyWithoutRiderInput;
  trackingRequests?: TrackingPermissionUpdateManyWithoutAccessProviderInput;
}

export interface FirebaseProfileUpdateOneInput {
  create?: FirebaseProfileCreateInput;
  update?: FirebaseProfileUpdateDataInput;
  upsert?: FirebaseProfileUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FirebaseProfileWhereUniqueInput;
}

export interface FirebaseProfileUpdateDataInput {
  uid?: String;
  displayName?: String;
}

export interface FirebaseProfileUpsertNestedInput {
  update: FirebaseProfileUpdateDataInput;
  create: FirebaseProfileCreateInput;
}

export interface RideUpdateManyWithoutRiderInput {
  create?: RideCreateWithoutRiderInput[] | RideCreateWithoutRiderInput;
  delete?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  connect?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  set?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  disconnect?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  update?:
    | RideUpdateWithWhereUniqueWithoutRiderInput[]
    | RideUpdateWithWhereUniqueWithoutRiderInput;
  upsert?:
    | RideUpsertWithWhereUniqueWithoutRiderInput[]
    | RideUpsertWithWhereUniqueWithoutRiderInput;
  deleteMany?: RideScalarWhereInput[] | RideScalarWhereInput;
  updateMany?:
    | RideUpdateManyWithWhereNestedInput[]
    | RideUpdateManyWithWhereNestedInput;
}

export interface RideUpdateWithWhereUniqueWithoutRiderInput {
  where: RideWhereUniqueInput;
  data: RideUpdateWithoutRiderDataInput;
}

export interface RideUpdateWithoutRiderDataInput {
  vehicle?: VehicleUpdateOneWithoutRidesInput;
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  pauseActivities?: pauseActivityUpdateManyInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface VehicleUpdateOneWithoutRidesInput {
  create?: VehicleCreateWithoutRidesInput;
  update?: VehicleUpdateWithoutRidesDataInput;
  upsert?: VehicleUpsertWithoutRidesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleUpdateWithoutRidesDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  currentRide?: RideUpdateOneInput;
}

export interface TxNodeUpdateOneWithoutVehicleInput {
  create?: TxNodeCreateWithoutVehicleInput;
  update?: TxNodeUpdateWithoutVehicleDataInput;
  upsert?: TxNodeUpsertWithoutVehicleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeUpdateWithoutVehicleDataInput {
  type?: TxNodeType;
  company?: CompanyUpdateOneWithoutTxInfoInput;
  component?: ComponentUpdateOneWithoutTxInfoInput;
  user?: UserUpdateOneWithoutTxInfoInput;
}

export interface UserUpdateOneWithoutTxInfoInput {
  create?: UserCreateWithoutTxInfoInput;
  update?: UserUpdateWithoutTxInfoDataInput;
  upsert?: UserUpsertWithoutTxInfoInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutTxInfoDataInput {
  address?: String;
  email?: String;
  openId?: String;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileUpdateOneInput;
  role?: Role;
  company?: CompanyUpdateOneWithoutUsersInput;
  status?: statusType;
  vehiclesDriven?: RideUpdateManyWithoutRiderInput;
  trackingRequests?: TrackingPermissionUpdateManyWithoutAccessProviderInput;
}

export interface CompanyUpdateOneWithoutUsersInput {
  create?: CompanyCreateWithoutUsersInput;
  update?: CompanyUpdateWithoutUsersDataInput;
  upsert?: CompanyUpsertWithoutUsersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateWithoutUsersDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface ModelUpdateManyWithoutCompanyInput {
  create?: ModelCreateWithoutCompanyInput[] | ModelCreateWithoutCompanyInput;
  delete?: ModelWhereUniqueInput[] | ModelWhereUniqueInput;
  connect?: ModelWhereUniqueInput[] | ModelWhereUniqueInput;
  set?: ModelWhereUniqueInput[] | ModelWhereUniqueInput;
  disconnect?: ModelWhereUniqueInput[] | ModelWhereUniqueInput;
  update?:
    | ModelUpdateWithWhereUniqueWithoutCompanyInput[]
    | ModelUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | ModelUpsertWithWhereUniqueWithoutCompanyInput[]
    | ModelUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: ModelScalarWhereInput[] | ModelScalarWhereInput;
  updateMany?:
    | ModelUpdateManyWithWhereNestedInput[]
    | ModelUpdateManyWithWhereNestedInput;
}

export interface ModelUpdateWithWhereUniqueWithoutCompanyInput {
  where: ModelWhereUniqueInput;
  data: ModelUpdateWithoutCompanyDataInput;
}

export interface ModelUpdateWithoutCompanyDataInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  imageFile?: FileUpdateOneInput;
  image?: String;
  components?: ProductUpdateManyInput;
  specs?: ProductSpecUpdateManyInput;
  config?: ModelConfigUpdateOneWithoutModelInput;
  vehicles?: VehicleUpdateManyWithoutModelInput;
}

export interface ProductUpdateManyInput {
  create?: ProductCreateInput[] | ProductCreateInput;
  update?:
    | ProductUpdateWithWhereUniqueNestedInput[]
    | ProductUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ProductUpsertWithWhereUniqueNestedInput[]
    | ProductUpsertWithWhereUniqueNestedInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  set?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  deleteMany?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  updateMany?:
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput;
}

export interface ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateDataInput;
}

export interface ProductUpdateDataInput {
  type?: ProductType;
  name?: String;
  key?: String;
  specs?: ProductSpecUpdateManyInput;
  status?: statusType;
  image?: FileUpdateOneInput;
  imageBuffer?: String;
  inventory?: ComponentUpdateManyWithoutPrototypeInput;
  company?: CompanyUpdateOneWithoutComponentsInput;
}

export interface ComponentUpdateManyWithoutPrototypeInput {
  create?:
    | ComponentCreateWithoutPrototypeInput[]
    | ComponentCreateWithoutPrototypeInput;
  delete?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  set?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  disconnect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  update?:
    | ComponentUpdateWithWhereUniqueWithoutPrototypeInput[]
    | ComponentUpdateWithWhereUniqueWithoutPrototypeInput;
  upsert?:
    | ComponentUpsertWithWhereUniqueWithoutPrototypeInput[]
    | ComponentUpsertWithWhereUniqueWithoutPrototypeInput;
  deleteMany?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  updateMany?:
    | ComponentUpdateManyWithWhereNestedInput[]
    | ComponentUpdateManyWithWhereNestedInput;
}

export interface ComponentUpdateWithWhereUniqueWithoutPrototypeInput {
  where: ComponentWhereUniqueInput;
  data: ComponentUpdateWithoutPrototypeDataInput;
}

export interface ComponentUpdateWithoutPrototypeDataInput {
  UID?: String;
  txInfo?: TxNodeUpdateOneWithoutComponentInput;
  status?: ComponentStatus;
  specs?: ProductSpecUpdateManyInput;
  owner?: CompanyUpdateOneWithoutInventoryInput;
  vehicle?: VehicleUpdateOneWithoutComponentsInput;
  warranty?: WarrantyUpdateOneInput;
  notes?: String;
}

export interface TxNodeUpdateOneWithoutComponentInput {
  create?: TxNodeCreateWithoutComponentInput;
  update?: TxNodeUpdateWithoutComponentDataInput;
  upsert?: TxNodeUpsertWithoutComponentInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeUpdateWithoutComponentDataInput {
  type?: TxNodeType;
  company?: CompanyUpdateOneWithoutTxInfoInput;
  user?: UserUpdateOneWithoutTxInfoInput;
  vehicle?: VehicleUpdateOneWithoutTxInfoInput;
}

export interface VehicleUpdateOneWithoutTxInfoInput {
  create?: VehicleCreateWithoutTxInfoInput;
  update?: VehicleUpdateWithoutTxInfoDataInput;
  upsert?: VehicleUpsertWithoutTxInfoInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleUpdateWithoutTxInfoDataInput {
  vin?: String;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface ModelUpdateOneWithoutVehiclesInput {
  create?: ModelCreateWithoutVehiclesInput;
  update?: ModelUpdateWithoutVehiclesDataInput;
  upsert?: ModelUpsertWithoutVehiclesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ModelWhereUniqueInput;
}

export interface ModelUpdateWithoutVehiclesDataInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  company?: CompanyUpdateOneWithoutModelsInput;
  imageFile?: FileUpdateOneInput;
  image?: String;
  components?: ProductUpdateManyInput;
  specs?: ProductSpecUpdateManyInput;
  config?: ModelConfigUpdateOneWithoutModelInput;
}

export interface CompanyUpdateOneWithoutModelsInput {
  create?: CompanyCreateWithoutModelsInput;
  update?: CompanyUpdateWithoutModelsDataInput;
  upsert?: CompanyUpsertWithoutModelsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateWithoutModelsDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface ProductUpdateManyWithoutCompanyInput {
  create?:
    | ProductCreateWithoutCompanyInput[]
    | ProductCreateWithoutCompanyInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  set?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutCompanyInput[]
    | ProductUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutCompanyInput[]
    | ProductUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  updateMany?:
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput;
}

export interface ProductUpdateWithWhereUniqueWithoutCompanyInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCompanyDataInput;
}

export interface ProductUpdateWithoutCompanyDataInput {
  type?: ProductType;
  name?: String;
  key?: String;
  specs?: ProductSpecUpdateManyInput;
  status?: statusType;
  image?: FileUpdateOneInput;
  imageBuffer?: String;
  inventory?: ComponentUpdateManyWithoutPrototypeInput;
}

export interface ProductUpsertWithWhereUniqueWithoutCompanyInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCompanyDataInput;
  create: ProductCreateWithoutCompanyInput;
}

export interface ProductScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: ProductType;
  type_not?: ProductType;
  type_in?: ProductType[] | ProductType;
  type_not_in?: ProductType[] | ProductType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  imageBuffer?: String;
  imageBuffer_not?: String;
  imageBuffer_in?: String[] | String;
  imageBuffer_not_in?: String[] | String;
  imageBuffer_lt?: String;
  imageBuffer_lte?: String;
  imageBuffer_gt?: String;
  imageBuffer_gte?: String;
  imageBuffer_contains?: String;
  imageBuffer_not_contains?: String;
  imageBuffer_starts_with?: String;
  imageBuffer_not_starts_with?: String;
  imageBuffer_ends_with?: String;
  imageBuffer_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  OR?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  NOT?: ProductScalarWhereInput[] | ProductScalarWhereInput;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateManyDataInput {
  type?: ProductType;
  name?: String;
  key?: String;
  status?: statusType;
  imageBuffer?: String;
}

export interface ComponentUpdateManyWithoutOwnerInput {
  create?:
    | ComponentCreateWithoutOwnerInput[]
    | ComponentCreateWithoutOwnerInput;
  delete?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  set?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  disconnect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  update?:
    | ComponentUpdateWithWhereUniqueWithoutOwnerInput[]
    | ComponentUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | ComponentUpsertWithWhereUniqueWithoutOwnerInput[]
    | ComponentUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  updateMany?:
    | ComponentUpdateManyWithWhereNestedInput[]
    | ComponentUpdateManyWithWhereNestedInput;
}

export interface ComponentUpdateWithWhereUniqueWithoutOwnerInput {
  where: ComponentWhereUniqueInput;
  data: ComponentUpdateWithoutOwnerDataInput;
}

export interface ComponentUpdateWithoutOwnerDataInput {
  UID?: String;
  txInfo?: TxNodeUpdateOneWithoutComponentInput;
  status?: ComponentStatus;
  prototype?: ProductUpdateOneWithoutInventoryInput;
  specs?: ProductSpecUpdateManyInput;
  vehicle?: VehicleUpdateOneWithoutComponentsInput;
  warranty?: WarrantyUpdateOneInput;
  notes?: String;
}

export interface VehicleUpdateOneWithoutComponentsInput {
  create?: VehicleCreateWithoutComponentsInput;
  update?: VehicleUpdateWithoutComponentsDataInput;
  upsert?: VehicleUpsertWithoutComponentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleUpdateWithoutComponentsDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface CompanyUpdateOneInput {
  create?: CompanyCreateInput;
  update?: CompanyUpdateDataInput;
  upsert?: CompanyUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface VehicleUpdateManyWithoutCompanyInput {
  create?:
    | VehicleCreateWithoutCompanyInput[]
    | VehicleCreateWithoutCompanyInput;
  delete?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  connect?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  set?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  disconnect?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  update?:
    | VehicleUpdateWithWhereUniqueWithoutCompanyInput[]
    | VehicleUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | VehicleUpsertWithWhereUniqueWithoutCompanyInput[]
    | VehicleUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: VehicleScalarWhereInput[] | VehicleScalarWhereInput;
  updateMany?:
    | VehicleUpdateManyWithWhereNestedInput[]
    | VehicleUpdateManyWithWhereNestedInput;
}

export interface VehicleUpdateWithWhereUniqueWithoutCompanyInput {
  where: VehicleWhereUniqueInput;
  data: VehicleUpdateWithoutCompanyDataInput;
}

export interface VehicleUpdateWithoutCompanyDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface ComponentUpdateManyWithoutVehicleInput {
  create?:
    | ComponentCreateWithoutVehicleInput[]
    | ComponentCreateWithoutVehicleInput;
  delete?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  connect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  set?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  disconnect?: ComponentWhereUniqueInput[] | ComponentWhereUniqueInput;
  update?:
    | ComponentUpdateWithWhereUniqueWithoutVehicleInput[]
    | ComponentUpdateWithWhereUniqueWithoutVehicleInput;
  upsert?:
    | ComponentUpsertWithWhereUniqueWithoutVehicleInput[]
    | ComponentUpsertWithWhereUniqueWithoutVehicleInput;
  deleteMany?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  updateMany?:
    | ComponentUpdateManyWithWhereNestedInput[]
    | ComponentUpdateManyWithWhereNestedInput;
}

export interface ComponentUpdateWithWhereUniqueWithoutVehicleInput {
  where: ComponentWhereUniqueInput;
  data: ComponentUpdateWithoutVehicleDataInput;
}

export interface ComponentUpdateWithoutVehicleDataInput {
  UID?: String;
  txInfo?: TxNodeUpdateOneWithoutComponentInput;
  status?: ComponentStatus;
  prototype?: ProductUpdateOneWithoutInventoryInput;
  specs?: ProductSpecUpdateManyInput;
  owner?: CompanyUpdateOneWithoutInventoryInput;
  warranty?: WarrantyUpdateOneInput;
  notes?: String;
}

export interface CompanyUpdateOneWithoutInventoryInput {
  create?: CompanyCreateWithoutInventoryInput;
  update?: CompanyUpdateWithoutInventoryDataInput;
  upsert?: CompanyUpsertWithoutInventoryInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateWithoutInventoryDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpdateManyWithoutDistributorsInput {
  create?:
    | CompanyCreateWithoutDistributorsInput[]
    | CompanyCreateWithoutDistributorsInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  set?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutDistributorsInput[]
    | CompanyUpdateWithWhereUniqueWithoutDistributorsInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutDistributorsInput[]
    | CompanyUpsertWithWhereUniqueWithoutDistributorsInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateWithWhereUniqueWithoutDistributorsInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutDistributorsDataInput;
}

export interface CompanyUpdateWithoutDistributorsDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpdateManyWithoutDealersInput {
  create?:
    | CompanyCreateWithoutDealersInput[]
    | CompanyCreateWithoutDealersInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  set?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutDealersInput[]
    | CompanyUpdateWithWhereUniqueWithoutDealersInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutDealersInput[]
    | CompanyUpsertWithWhereUniqueWithoutDealersInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateWithWhereUniqueWithoutDealersInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutDealersDataInput;
}

export interface CompanyUpdateWithoutDealersDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpdateManyWithoutOemsInput {
  create?: CompanyCreateWithoutOemsInput[] | CompanyCreateWithoutOemsInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  set?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutOemsInput[]
    | CompanyUpdateWithWhereUniqueWithoutOemsInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutOemsInput[]
    | CompanyUpsertWithWhereUniqueWithoutOemsInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateWithWhereUniqueWithoutOemsInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutOemsDataInput;
}

export interface CompanyUpdateWithoutOemsDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpdateManyWithoutSuppliersInput {
  create?:
    | CompanyCreateWithoutSuppliersInput[]
    | CompanyCreateWithoutSuppliersInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  set?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutSuppliersInput[]
    | CompanyUpdateWithWhereUniqueWithoutSuppliersInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutSuppliersInput[]
    | CompanyUpsertWithWhereUniqueWithoutSuppliersInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateWithWhereUniqueWithoutSuppliersInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutSuppliersDataInput;
}

export interface CompanyUpdateWithoutSuppliersDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpsertWithWhereUniqueWithoutSuppliersInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutSuppliersDataInput;
  create: CompanyCreateWithoutSuppliersInput;
}

export interface CompanyScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  phone1?: String;
  phone1_not?: String;
  phone1_in?: String[] | String;
  phone1_not_in?: String[] | String;
  phone1_lt?: String;
  phone1_lte?: String;
  phone1_gt?: String;
  phone1_gte?: String;
  phone1_contains?: String;
  phone1_not_contains?: String;
  phone1_starts_with?: String;
  phone1_not_starts_with?: String;
  phone1_ends_with?: String;
  phone1_not_ends_with?: String;
  phone2?: String;
  phone2_not?: String;
  phone2_in?: String[] | String;
  phone2_not_in?: String[] | String;
  phone2_lt?: String;
  phone2_lte?: String;
  phone2_gt?: String;
  phone2_gte?: String;
  phone2_contains?: String;
  phone2_not_contains?: String;
  phone2_starts_with?: String;
  phone2_not_starts_with?: String;
  phone2_ends_with?: String;
  phone2_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  logoBuffer?: String;
  logoBuffer_not?: String;
  logoBuffer_in?: String[] | String;
  logoBuffer_not_in?: String[] | String;
  logoBuffer_lt?: String;
  logoBuffer_lte?: String;
  logoBuffer_gt?: String;
  logoBuffer_gte?: String;
  logoBuffer_contains?: String;
  logoBuffer_not_contains?: String;
  logoBuffer_starts_with?: String;
  logoBuffer_not_starts_with?: String;
  logoBuffer_ends_with?: String;
  logoBuffer_not_ends_with?: String;
  type?: companyType;
  type_not?: companyType;
  type_in?: companyType[] | companyType;
  type_not_in?: companyType[] | companyType;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  gstNumber?: String;
  gstNumber_not?: String;
  gstNumber_in?: String[] | String;
  gstNumber_not_in?: String[] | String;
  gstNumber_lt?: String;
  gstNumber_lte?: String;
  gstNumber_gt?: String;
  gstNumber_gte?: String;
  gstNumber_contains?: String;
  gstNumber_not_contains?: String;
  gstNumber_starts_with?: String;
  gstNumber_not_starts_with?: String;
  gstNumber_ends_with?: String;
  gstNumber_not_ends_with?: String;
  panNumber?: String;
  panNumber_not?: String;
  panNumber_in?: String[] | String;
  panNumber_not_in?: String[] | String;
  panNumber_lt?: String;
  panNumber_lte?: String;
  panNumber_gt?: String;
  panNumber_gte?: String;
  panNumber_contains?: String;
  panNumber_not_contains?: String;
  panNumber_starts_with?: String;
  panNumber_not_starts_with?: String;
  panNumber_ends_with?: String;
  panNumber_not_ends_with?: String;
  cinNumber?: String;
  cinNumber_not?: String;
  cinNumber_in?: String[] | String;
  cinNumber_not_in?: String[] | String;
  cinNumber_lt?: String;
  cinNumber_lte?: String;
  cinNumber_gt?: String;
  cinNumber_gte?: String;
  cinNumber_contains?: String;
  cinNumber_not_contains?: String;
  cinNumber_starts_with?: String;
  cinNumber_not_starts_with?: String;
  cinNumber_ends_with?: String;
  cinNumber_not_ends_with?: String;
  ownerAadharCardNumber?: String;
  ownerAadharCardNumber_not?: String;
  ownerAadharCardNumber_in?: String[] | String;
  ownerAadharCardNumber_not_in?: String[] | String;
  ownerAadharCardNumber_lt?: String;
  ownerAadharCardNumber_lte?: String;
  ownerAadharCardNumber_gt?: String;
  ownerAadharCardNumber_gte?: String;
  ownerAadharCardNumber_contains?: String;
  ownerAadharCardNumber_not_contains?: String;
  ownerAadharCardNumber_starts_with?: String;
  ownerAadharCardNumber_not_starts_with?: String;
  ownerAadharCardNumber_ends_with?: String;
  ownerAadharCardNumber_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  OR?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  NOT?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
}

export interface CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput;
  data: CompanyUpdateManyDataInput;
}

export interface CompanyUpdateManyDataInput {
  name?: String;
  token?: String;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  logoBuffer?: String;
  type?: companyType;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpsertWithWhereUniqueWithoutOemsInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutOemsDataInput;
  create: CompanyCreateWithoutOemsInput;
}

export interface CompanyUpsertWithWhereUniqueWithoutDealersInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutDealersDataInput;
  create: CompanyCreateWithoutDealersInput;
}

export interface CompanyUpsertWithWhereUniqueWithoutDistributorsInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutDistributorsDataInput;
  create: CompanyCreateWithoutDistributorsInput;
}

export interface CompanyUpsertWithoutInventoryInput {
  update: CompanyUpdateWithoutInventoryDataInput;
  create: CompanyCreateWithoutInventoryInput;
}

export interface WarrantyUpdateOneInput {
  create?: WarrantyCreateInput;
  update?: WarrantyUpdateDataInput;
  upsert?: WarrantyUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WarrantyWhereUniqueInput;
}

export interface WarrantyUpdateDataInput {
  number?: String;
  expiry?: DateTimeInput;
  status?: WarrantyStatus;
}

export interface WarrantyUpsertNestedInput {
  update: WarrantyUpdateDataInput;
  create: WarrantyCreateInput;
}

export interface ComponentUpsertWithWhereUniqueWithoutVehicleInput {
  where: ComponentWhereUniqueInput;
  update: ComponentUpdateWithoutVehicleDataInput;
  create: ComponentCreateWithoutVehicleInput;
}

export interface ComponentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  UID?: String;
  UID_not?: String;
  UID_in?: String[] | String;
  UID_not_in?: String[] | String;
  UID_lt?: String;
  UID_lte?: String;
  UID_gt?: String;
  UID_gte?: String;
  UID_contains?: String;
  UID_not_contains?: String;
  UID_starts_with?: String;
  UID_not_starts_with?: String;
  UID_ends_with?: String;
  UID_not_ends_with?: String;
  status?: ComponentStatus;
  status_not?: ComponentStatus;
  status_in?: ComponentStatus[] | ComponentStatus;
  status_not_in?: ComponentStatus[] | ComponentStatus;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  OR?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
  NOT?: ComponentScalarWhereInput[] | ComponentScalarWhereInput;
}

export interface ComponentUpdateManyWithWhereNestedInput {
  where: ComponentScalarWhereInput;
  data: ComponentUpdateManyDataInput;
}

export interface ComponentUpdateManyDataInput {
  UID?: String;
  status?: ComponentStatus;
  notes?: String;
}

export interface BuyerUpdateOneInput {
  create?: BuyerCreateInput;
  update?: BuyerUpdateDataInput;
  upsert?: BuyerUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: BuyerWhereUniqueInput;
}

export interface BuyerUpdateDataInput {
  firstName?: String;
  lastName?: String;
  parentName?: String;
  phone?: String;
  email?: String;
  aadharCard?: String;
  address?: String;
  dateOfBirth?: DateTimeInput;
  identityProof?: String;
  addressProof?: String;
}

export interface BuyerUpsertNestedInput {
  update: BuyerUpdateDataInput;
  create: BuyerCreateInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface DeviceUpdateOneWithoutVehicleInput {
  create?: DeviceCreateWithoutVehicleInput;
  update?: DeviceUpdateWithoutVehicleDataInput;
  upsert?: DeviceUpsertWithoutVehicleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DeviceWhereUniqueInput;
}

export interface DeviceUpdateWithoutVehicleDataInput {
  name?: String;
  deviceId?: String;
  macId?: String;
  key?: String;
  pin?: String;
  status?: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
}

export interface DeviceUpsertWithoutVehicleInput {
  update: DeviceUpdateWithoutVehicleDataInput;
  create: DeviceCreateWithoutVehicleInput;
}

export interface PeripheralUpdateOneWithoutVehicleInput {
  create?: PeripheralCreateWithoutVehicleInput;
  update?: PeripheralUpdateWithoutVehicleDataInput;
  upsert?: PeripheralUpsertWithoutVehicleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PeripheralWhereUniqueInput;
}

export interface PeripheralUpdateWithoutVehicleDataInput {
  device?: DeviceUpdateManyInput;
}

export interface DeviceUpdateManyInput {
  create?: DeviceCreateInput[] | DeviceCreateInput;
  update?:
    | DeviceUpdateWithWhereUniqueNestedInput[]
    | DeviceUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DeviceUpsertWithWhereUniqueNestedInput[]
    | DeviceUpsertWithWhereUniqueNestedInput;
  delete?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  connect?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  set?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  disconnect?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  deleteMany?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
  updateMany?:
    | DeviceUpdateManyWithWhereNestedInput[]
    | DeviceUpdateManyWithWhereNestedInput;
}

export interface DeviceUpdateWithWhereUniqueNestedInput {
  where: DeviceWhereUniqueInput;
  data: DeviceUpdateDataInput;
}

export interface DeviceUpdateDataInput {
  name?: String;
  deviceId?: String;
  macId?: String;
  key?: String;
  pin?: String;
  status?: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  vehicle?: VehicleUpdateOneWithoutDeviceInput;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
}

export interface VehicleUpdateOneWithoutDeviceInput {
  create?: VehicleCreateWithoutDeviceInput;
  update?: VehicleUpdateWithoutDeviceDataInput;
  upsert?: VehicleUpsertWithoutDeviceInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleUpdateWithoutDeviceDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface CompanyUpdateOneWithoutVehiclesInput {
  create?: CompanyCreateWithoutVehiclesInput;
  update?: CompanyUpdateWithoutVehiclesDataInput;
  upsert?: CompanyUpsertWithoutVehiclesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateWithoutVehiclesDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  components?: ProductUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpsertWithoutVehiclesInput {
  update: CompanyUpdateWithoutVehiclesDataInput;
  create: CompanyCreateWithoutVehiclesInput;
}

export interface TrackingPermissionUpdateManyWithoutVehicleInput {
  create?:
    | TrackingPermissionCreateWithoutVehicleInput[]
    | TrackingPermissionCreateWithoutVehicleInput;
  delete?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  connect?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  set?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  disconnect?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  update?:
    | TrackingPermissionUpdateWithWhereUniqueWithoutVehicleInput[]
    | TrackingPermissionUpdateWithWhereUniqueWithoutVehicleInput;
  upsert?:
    | TrackingPermissionUpsertWithWhereUniqueWithoutVehicleInput[]
    | TrackingPermissionUpsertWithWhereUniqueWithoutVehicleInput;
  deleteMany?:
    | TrackingPermissionScalarWhereInput[]
    | TrackingPermissionScalarWhereInput;
  updateMany?:
    | TrackingPermissionUpdateManyWithWhereNestedInput[]
    | TrackingPermissionUpdateManyWithWhereNestedInput;
}

export interface TrackingPermissionUpdateWithWhereUniqueWithoutVehicleInput {
  where: TrackingPermissionWhereUniqueInput;
  data: TrackingPermissionUpdateWithoutVehicleDataInput;
}

export interface TrackingPermissionUpdateWithoutVehicleDataInput {
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  accessProvider?: UserUpdateOneWithoutTrackingRequestsInput;
  accessors?: CompanyUpdateManyInput;
  status?: TrackingPermissionStatus;
}

export interface UserUpdateOneWithoutTrackingRequestsInput {
  create?: UserCreateWithoutTrackingRequestsInput;
  update?: UserUpdateWithoutTrackingRequestsDataInput;
  upsert?: UserUpsertWithoutTrackingRequestsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutTrackingRequestsDataInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeUpdateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileUpdateOneInput;
  role?: Role;
  company?: CompanyUpdateOneWithoutUsersInput;
  status?: statusType;
  vehiclesDriven?: RideUpdateManyWithoutRiderInput;
}

export interface UserUpsertWithoutTrackingRequestsInput {
  update: UserUpdateWithoutTrackingRequestsDataInput;
  create: UserCreateWithoutTrackingRequestsInput;
}

export interface CompanyUpdateManyInput {
  create?: CompanyCreateInput[] | CompanyCreateInput;
  update?:
    | CompanyUpdateWithWhereUniqueNestedInput[]
    | CompanyUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueNestedInput[]
    | CompanyUpsertWithWhereUniqueNestedInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  set?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateWithWhereUniqueNestedInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateDataInput;
}

export interface CompanyUpsertWithWhereUniqueNestedInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateDataInput;
  create: CompanyCreateInput;
}

export interface TrackingPermissionUpsertWithWhereUniqueWithoutVehicleInput {
  where: TrackingPermissionWhereUniqueInput;
  update: TrackingPermissionUpdateWithoutVehicleDataInput;
  create: TrackingPermissionCreateWithoutVehicleInput;
}

export interface TrackingPermissionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  endTime?: DateTimeInput;
  endTime_not?: DateTimeInput;
  endTime_in?: DateTimeInput[] | DateTimeInput;
  endTime_not_in?: DateTimeInput[] | DateTimeInput;
  endTime_lt?: DateTimeInput;
  endTime_lte?: DateTimeInput;
  endTime_gt?: DateTimeInput;
  endTime_gte?: DateTimeInput;
  status?: TrackingPermissionStatus;
  status_not?: TrackingPermissionStatus;
  status_in?: TrackingPermissionStatus[] | TrackingPermissionStatus;
  status_not_in?: TrackingPermissionStatus[] | TrackingPermissionStatus;
  AND?:
    | TrackingPermissionScalarWhereInput[]
    | TrackingPermissionScalarWhereInput;
  OR?:
    | TrackingPermissionScalarWhereInput[]
    | TrackingPermissionScalarWhereInput;
  NOT?:
    | TrackingPermissionScalarWhereInput[]
    | TrackingPermissionScalarWhereInput;
}

export interface TrackingPermissionUpdateManyWithWhereNestedInput {
  where: TrackingPermissionScalarWhereInput;
  data: TrackingPermissionUpdateManyDataInput;
}

export interface TrackingPermissionUpdateManyDataInput {
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  status?: TrackingPermissionStatus;
}

export interface RideUpdateManyWithoutVehicleInput {
  create?: RideCreateWithoutVehicleInput[] | RideCreateWithoutVehicleInput;
  delete?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  connect?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  set?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  disconnect?: RideWhereUniqueInput[] | RideWhereUniqueInput;
  update?:
    | RideUpdateWithWhereUniqueWithoutVehicleInput[]
    | RideUpdateWithWhereUniqueWithoutVehicleInput;
  upsert?:
    | RideUpsertWithWhereUniqueWithoutVehicleInput[]
    | RideUpsertWithWhereUniqueWithoutVehicleInput;
  deleteMany?: RideScalarWhereInput[] | RideScalarWhereInput;
  updateMany?:
    | RideUpdateManyWithWhereNestedInput[]
    | RideUpdateManyWithWhereNestedInput;
}

export interface RideUpdateWithWhereUniqueWithoutVehicleInput {
  where: RideWhereUniqueInput;
  data: RideUpdateWithoutVehicleDataInput;
}

export interface RideUpdateWithoutVehicleDataInput {
  rider?: UserUpdateOneWithoutVehiclesDrivenInput;
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  pauseActivities?: pauseActivityUpdateManyInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface UserUpdateOneWithoutVehiclesDrivenInput {
  create?: UserCreateWithoutVehiclesDrivenInput;
  update?: UserUpdateWithoutVehiclesDrivenDataInput;
  upsert?: UserUpsertWithoutVehiclesDrivenInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutVehiclesDrivenDataInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeUpdateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileUpdateOneInput;
  role?: Role;
  company?: CompanyUpdateOneWithoutUsersInput;
  status?: statusType;
  trackingRequests?: TrackingPermissionUpdateManyWithoutAccessProviderInput;
}

export interface TrackingPermissionUpdateManyWithoutAccessProviderInput {
  create?:
    | TrackingPermissionCreateWithoutAccessProviderInput[]
    | TrackingPermissionCreateWithoutAccessProviderInput;
  delete?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  connect?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  set?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  disconnect?:
    | TrackingPermissionWhereUniqueInput[]
    | TrackingPermissionWhereUniqueInput;
  update?:
    | TrackingPermissionUpdateWithWhereUniqueWithoutAccessProviderInput[]
    | TrackingPermissionUpdateWithWhereUniqueWithoutAccessProviderInput;
  upsert?:
    | TrackingPermissionUpsertWithWhereUniqueWithoutAccessProviderInput[]
    | TrackingPermissionUpsertWithWhereUniqueWithoutAccessProviderInput;
  deleteMany?:
    | TrackingPermissionScalarWhereInput[]
    | TrackingPermissionScalarWhereInput;
  updateMany?:
    | TrackingPermissionUpdateManyWithWhereNestedInput[]
    | TrackingPermissionUpdateManyWithWhereNestedInput;
}

export interface TrackingPermissionUpdateWithWhereUniqueWithoutAccessProviderInput {
  where: TrackingPermissionWhereUniqueInput;
  data: TrackingPermissionUpdateWithoutAccessProviderDataInput;
}

export interface TrackingPermissionUpdateWithoutAccessProviderDataInput {
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  accessors?: CompanyUpdateManyInput;
  vehicle?: VehicleUpdateOneRequiredWithoutTrackingRequestsInput;
  status?: TrackingPermissionStatus;
}

export interface VehicleUpdateOneRequiredWithoutTrackingRequestsInput {
  create?: VehicleCreateWithoutTrackingRequestsInput;
  update?: VehicleUpdateWithoutTrackingRequestsDataInput;
  upsert?: VehicleUpsertWithoutTrackingRequestsInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleUpdateWithoutTrackingRequestsDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface RideUpdateOneInput {
  create?: RideCreateInput;
  update?: RideUpdateDataInput;
  upsert?: RideUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: RideWhereUniqueInput;
}

export interface RideUpdateDataInput {
  rider?: UserUpdateOneWithoutVehiclesDrivenInput;
  vehicle?: VehicleUpdateOneWithoutRidesInput;
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  pauseActivities?: pauseActivityUpdateManyInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface pauseActivityUpdateManyInput {
  create?: pauseActivityCreateInput[] | pauseActivityCreateInput;
  update?:
    | pauseActivityUpdateWithWhereUniqueNestedInput[]
    | pauseActivityUpdateWithWhereUniqueNestedInput;
  upsert?:
    | pauseActivityUpsertWithWhereUniqueNestedInput[]
    | pauseActivityUpsertWithWhereUniqueNestedInput;
  delete?: pauseActivityWhereUniqueInput[] | pauseActivityWhereUniqueInput;
  connect?: pauseActivityWhereUniqueInput[] | pauseActivityWhereUniqueInput;
  set?: pauseActivityWhereUniqueInput[] | pauseActivityWhereUniqueInput;
  disconnect?: pauseActivityWhereUniqueInput[] | pauseActivityWhereUniqueInput;
  deleteMany?: pauseActivityScalarWhereInput[] | pauseActivityScalarWhereInput;
  updateMany?:
    | pauseActivityUpdateManyWithWhereNestedInput[]
    | pauseActivityUpdateManyWithWhereNestedInput;
}

export interface pauseActivityUpdateWithWhereUniqueNestedInput {
  where: pauseActivityWhereUniqueInput;
  data: pauseActivityUpdateDataInput;
}

export interface pauseActivityUpdateDataInput {
  pauseStart?: DateTimeInput;
  pauseEnd?: DateTimeInput;
}

export interface pauseActivityUpsertWithWhereUniqueNestedInput {
  where: pauseActivityWhereUniqueInput;
  update: pauseActivityUpdateDataInput;
  create: pauseActivityCreateInput;
}

export interface pauseActivityScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  pauseStart?: DateTimeInput;
  pauseStart_not?: DateTimeInput;
  pauseStart_in?: DateTimeInput[] | DateTimeInput;
  pauseStart_not_in?: DateTimeInput[] | DateTimeInput;
  pauseStart_lt?: DateTimeInput;
  pauseStart_lte?: DateTimeInput;
  pauseStart_gt?: DateTimeInput;
  pauseStart_gte?: DateTimeInput;
  pauseEnd?: DateTimeInput;
  pauseEnd_not?: DateTimeInput;
  pauseEnd_in?: DateTimeInput[] | DateTimeInput;
  pauseEnd_not_in?: DateTimeInput[] | DateTimeInput;
  pauseEnd_lt?: DateTimeInput;
  pauseEnd_lte?: DateTimeInput;
  pauseEnd_gt?: DateTimeInput;
  pauseEnd_gte?: DateTimeInput;
  AND?: pauseActivityScalarWhereInput[] | pauseActivityScalarWhereInput;
  OR?: pauseActivityScalarWhereInput[] | pauseActivityScalarWhereInput;
  NOT?: pauseActivityScalarWhereInput[] | pauseActivityScalarWhereInput;
}

export interface pauseActivityUpdateManyWithWhereNestedInput {
  where: pauseActivityScalarWhereInput;
  data: pauseActivityUpdateManyDataInput;
}

export interface pauseActivityUpdateManyDataInput {
  pauseStart?: DateTimeInput;
  pauseEnd?: DateTimeInput;
}

export interface RideUpsertNestedInput {
  update: RideUpdateDataInput;
  create: RideCreateInput;
}

export interface VehicleUpsertWithoutTrackingRequestsInput {
  update: VehicleUpdateWithoutTrackingRequestsDataInput;
  create: VehicleCreateWithoutTrackingRequestsInput;
}

export interface TrackingPermissionUpsertWithWhereUniqueWithoutAccessProviderInput {
  where: TrackingPermissionWhereUniqueInput;
  update: TrackingPermissionUpdateWithoutAccessProviderDataInput;
  create: TrackingPermissionCreateWithoutAccessProviderInput;
}

export interface UserUpsertWithoutVehiclesDrivenInput {
  update: UserUpdateWithoutVehiclesDrivenDataInput;
  create: UserCreateWithoutVehiclesDrivenInput;
}

export interface RideUpsertWithWhereUniqueWithoutVehicleInput {
  where: RideWhereUniqueInput;
  update: RideUpdateWithoutVehicleDataInput;
  create: RideCreateWithoutVehicleInput;
}

export interface RideScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  bookingTime?: DateTimeInput;
  bookingTime_not?: DateTimeInput;
  bookingTime_in?: DateTimeInput[] | DateTimeInput;
  bookingTime_not_in?: DateTimeInput[] | DateTimeInput;
  bookingTime_lt?: DateTimeInput;
  bookingTime_lte?: DateTimeInput;
  bookingTime_gt?: DateTimeInput;
  bookingTime_gte?: DateTimeInput;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  endTime?: DateTimeInput;
  endTime_not?: DateTimeInput;
  endTime_in?: DateTimeInput[] | DateTimeInput;
  endTime_not_in?: DateTimeInput[] | DateTimeInput;
  endTime_lt?: DateTimeInput;
  endTime_lte?: DateTimeInput;
  endTime_gt?: DateTimeInput;
  endTime_gte?: DateTimeInput;
  startOdo?: Float;
  startOdo_not?: Float;
  startOdo_in?: Float[] | Float;
  startOdo_not_in?: Float[] | Float;
  startOdo_lt?: Float;
  startOdo_lte?: Float;
  startOdo_gt?: Float;
  startOdo_gte?: Float;
  endOdo?: Float;
  endOdo_not?: Float;
  endOdo_in?: Float[] | Float;
  endOdo_not_in?: Float[] | Float;
  endOdo_lt?: Float;
  endOdo_lte?: Float;
  endOdo_gt?: Float;
  endOdo_gte?: Float;
  rideStatus?: RideStatus;
  rideStatus_not?: RideStatus;
  rideStatus_in?: RideStatus[] | RideStatus;
  rideStatus_not_in?: RideStatus[] | RideStatus;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RideScalarWhereInput[] | RideScalarWhereInput;
  OR?: RideScalarWhereInput[] | RideScalarWhereInput;
  NOT?: RideScalarWhereInput[] | RideScalarWhereInput;
}

export interface RideUpdateManyWithWhereNestedInput {
  where: RideScalarWhereInput;
  data: RideUpdateManyDataInput;
}

export interface RideUpdateManyDataInput {
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface VehicleUpsertWithoutDeviceInput {
  update: VehicleUpdateWithoutDeviceDataInput;
  create: VehicleCreateWithoutDeviceInput;
}

export interface DeviceUpsertWithWhereUniqueNestedInput {
  where: DeviceWhereUniqueInput;
  update: DeviceUpdateDataInput;
  create: DeviceCreateInput;
}

export interface DeviceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  deviceId?: String;
  deviceId_not?: String;
  deviceId_in?: String[] | String;
  deviceId_not_in?: String[] | String;
  deviceId_lt?: String;
  deviceId_lte?: String;
  deviceId_gt?: String;
  deviceId_gte?: String;
  deviceId_contains?: String;
  deviceId_not_contains?: String;
  deviceId_starts_with?: String;
  deviceId_not_starts_with?: String;
  deviceId_ends_with?: String;
  deviceId_not_ends_with?: String;
  macId?: String;
  macId_not?: String;
  macId_in?: String[] | String;
  macId_not_in?: String[] | String;
  macId_lt?: String;
  macId_lte?: String;
  macId_gt?: String;
  macId_gte?: String;
  macId_contains?: String;
  macId_not_contains?: String;
  macId_starts_with?: String;
  macId_not_starts_with?: String;
  macId_ends_with?: String;
  macId_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  pin?: String;
  pin_not?: String;
  pin_in?: String[] | String;
  pin_not_in?: String[] | String;
  pin_lt?: String;
  pin_lte?: String;
  pin_gt?: String;
  pin_gte?: String;
  pin_contains?: String;
  pin_not_contains?: String;
  pin_starts_with?: String;
  pin_not_starts_with?: String;
  pin_ends_with?: String;
  pin_not_ends_with?: String;
  status?: DeviceStatus;
  status_not?: DeviceStatus;
  status_in?: DeviceStatus[] | DeviceStatus;
  status_not_in?: DeviceStatus[] | DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  updateStatus_not?: DeviceUpdateStatus;
  updateStatus_in?: DeviceUpdateStatus[] | DeviceUpdateStatus;
  updateStatus_not_in?: DeviceUpdateStatus[] | DeviceUpdateStatus;
  type?: DeviceType;
  type_not?: DeviceType;
  type_in?: DeviceType[] | DeviceType;
  type_not_in?: DeviceType[] | DeviceType;
  firmware?: String;
  firmware_not?: String;
  firmware_in?: String[] | String;
  firmware_not_in?: String[] | String;
  firmware_lt?: String;
  firmware_lte?: String;
  firmware_gt?: String;
  firmware_gte?: String;
  firmware_contains?: String;
  firmware_not_contains?: String;
  firmware_starts_with?: String;
  firmware_not_starts_with?: String;
  firmware_ends_with?: String;
  firmware_not_ends_with?: String;
  expectedFirmware?: String;
  expectedFirmware_not?: String;
  expectedFirmware_in?: String[] | String;
  expectedFirmware_not_in?: String[] | String;
  expectedFirmware_lt?: String;
  expectedFirmware_lte?: String;
  expectedFirmware_gt?: String;
  expectedFirmware_gte?: String;
  expectedFirmware_contains?: String;
  expectedFirmware_not_contains?: String;
  expectedFirmware_starts_with?: String;
  expectedFirmware_not_starts_with?: String;
  expectedFirmware_ends_with?: String;
  expectedFirmware_not_ends_with?: String;
  pinResetRequired?: Boolean;
  pinResetRequired_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
  OR?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
  NOT?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
}

export interface DeviceUpdateManyWithWhereNestedInput {
  where: DeviceScalarWhereInput;
  data: DeviceUpdateManyDataInput;
}

export interface DeviceUpdateManyDataInput {
  name?: String;
  deviceId?: String;
  macId?: String;
  key?: String;
  pin?: String;
  status?: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
}

export interface PeripheralUpsertWithoutVehicleInput {
  update: PeripheralUpdateWithoutVehicleDataInput;
  create: PeripheralCreateWithoutVehicleInput;
}

export interface VehicleUpsertWithWhereUniqueWithoutCompanyInput {
  where: VehicleWhereUniqueInput;
  update: VehicleUpdateWithoutCompanyDataInput;
  create: VehicleCreateWithoutCompanyInput;
}

export interface VehicleScalarWhereInput {
  vin?: String;
  vin_not?: String;
  vin_in?: String[] | String;
  vin_not_in?: String[] | String;
  vin_lt?: String;
  vin_lte?: String;
  vin_gt?: String;
  vin_gte?: String;
  vin_contains?: String;
  vin_not_contains?: String;
  vin_starts_with?: String;
  vin_not_starts_with?: String;
  vin_ends_with?: String;
  vin_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  status?: VehicleStatus;
  status_not?: VehicleStatus;
  status_in?: VehicleStatus[] | VehicleStatus;
  status_not_in?: VehicleStatus[] | VehicleStatus;
  protocol?: Protocol;
  protocol_not?: Protocol;
  protocol_in?: Protocol[] | Protocol;
  protocol_not_in?: Protocol[] | Protocol;
  isHealthy?: Boolean;
  isHealthy_not?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLongitude_not?: String;
  lastMarkedLongitude_in?: String[] | String;
  lastMarkedLongitude_not_in?: String[] | String;
  lastMarkedLongitude_lt?: String;
  lastMarkedLongitude_lte?: String;
  lastMarkedLongitude_gt?: String;
  lastMarkedLongitude_gte?: String;
  lastMarkedLongitude_contains?: String;
  lastMarkedLongitude_not_contains?: String;
  lastMarkedLongitude_starts_with?: String;
  lastMarkedLongitude_not_starts_with?: String;
  lastMarkedLongitude_ends_with?: String;
  lastMarkedLongitude_not_ends_with?: String;
  lastMarkedLatitude?: String;
  lastMarkedLatitude_not?: String;
  lastMarkedLatitude_in?: String[] | String;
  lastMarkedLatitude_not_in?: String[] | String;
  lastMarkedLatitude_lt?: String;
  lastMarkedLatitude_lte?: String;
  lastMarkedLatitude_gt?: String;
  lastMarkedLatitude_gte?: String;
  lastMarkedLatitude_contains?: String;
  lastMarkedLatitude_not_contains?: String;
  lastMarkedLatitude_starts_with?: String;
  lastMarkedLatitude_not_starts_with?: String;
  lastMarkedLatitude_ends_with?: String;
  lastMarkedLatitude_not_ends_with?: String;
  rentalStatus?: RentalStatus;
  rentalStatus_not?: RentalStatus;
  rentalStatus_in?: RentalStatus[] | RentalStatus;
  rentalStatus_not_in?: RentalStatus[] | RentalStatus;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: VehicleScalarWhereInput[] | VehicleScalarWhereInput;
  OR?: VehicleScalarWhereInput[] | VehicleScalarWhereInput;
  NOT?: VehicleScalarWhereInput[] | VehicleScalarWhereInput;
}

export interface VehicleUpdateManyWithWhereNestedInput {
  where: VehicleScalarWhereInput;
  data: VehicleUpdateManyDataInput;
}

export interface VehicleUpdateManyDataInput {
  vin?: String;
  status?: VehicleStatus;
  protocol?: Protocol;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
}

export interface CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput;
  create: CompanyCreateInput;
}

export interface VehicleUpsertWithoutComponentsInput {
  update: VehicleUpdateWithoutComponentsDataInput;
  create: VehicleCreateWithoutComponentsInput;
}

export interface ComponentUpsertWithWhereUniqueWithoutOwnerInput {
  where: ComponentWhereUniqueInput;
  update: ComponentUpdateWithoutOwnerDataInput;
  create: ComponentCreateWithoutOwnerInput;
}

export interface CompanyUpsertWithoutModelsInput {
  update: CompanyUpdateWithoutModelsDataInput;
  create: CompanyCreateWithoutModelsInput;
}

export interface ModelConfigUpdateOneWithoutModelInput {
  create?: ModelConfigCreateWithoutModelInput;
  update?: ModelConfigUpdateWithoutModelDataInput;
  upsert?: ModelConfigUpsertWithoutModelInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ModelConfigWhereUniqueInput;
}

export interface ModelConfigUpdateWithoutModelDataInput {
  speedDivisor?: Float;
  odoDivisor?: Float;
  accessType?: ModelAccessType;
  wheelDiameter?: Float;
  maxSpeed?: Float;
  hillAssistStatus?: Boolean;
  parkingStatus?: Boolean;
  regenBrakingStatus?: Boolean;
  speedLimit?: Float;
  pickupControlLimit?: Float;
  brakeRegenLimit?: Float;
  zeroThrottleRegenLimit?: Float;
  currentLimit?: Float;
  eabsStatus?: Boolean;
  overVoltageLimit?: Float;
  underVoltageLimit?: Float;
  batteryMinVoltage?: Float;
  batteryMaxVoltage?: Float;
}

export interface ModelConfigUpsertWithoutModelInput {
  update: ModelConfigUpdateWithoutModelDataInput;
  create: ModelConfigCreateWithoutModelInput;
}

export interface ModelUpsertWithoutVehiclesInput {
  update: ModelUpdateWithoutVehiclesDataInput;
  create: ModelCreateWithoutVehiclesInput;
}

export interface VehicleUpsertWithoutTxInfoInput {
  update: VehicleUpdateWithoutTxInfoDataInput;
  create: VehicleCreateWithoutTxInfoInput;
}

export interface TxNodeUpsertWithoutComponentInput {
  update: TxNodeUpdateWithoutComponentDataInput;
  create: TxNodeCreateWithoutComponentInput;
}

export interface ComponentUpsertWithWhereUniqueWithoutPrototypeInput {
  where: ComponentWhereUniqueInput;
  update: ComponentUpdateWithoutPrototypeDataInput;
  create: ComponentCreateWithoutPrototypeInput;
}

export interface CompanyUpdateOneWithoutComponentsInput {
  create?: CompanyCreateWithoutComponentsInput;
  update?: CompanyUpdateWithoutComponentsDataInput;
  upsert?: CompanyUpsertWithoutComponentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateWithoutComponentsDataInput {
  name?: String;
  token?: String;
  txInfo?: TxNodeUpdateOneWithoutCompanyInput;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  companyLogo?: FileUpdateOneInput;
  users?: UserUpdateManyWithoutCompanyInput;
  logoBuffer?: String;
  models?: ModelUpdateManyWithoutCompanyInput;
  inventory?: ComponentUpdateManyWithoutOwnerInput;
  vehicles?: VehicleUpdateManyWithoutCompanyInput;
  type?: companyType;
  distributors?: CompanyUpdateManyWithoutDistributorsInput;
  dealers?: CompanyUpdateManyWithoutDealersInput;
  oems?: CompanyUpdateManyWithoutOemsInput;
  suppliers?: CompanyUpdateManyWithoutSuppliersInput;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface CompanyUpsertWithoutComponentsInput {
  update: CompanyUpdateWithoutComponentsDataInput;
  create: CompanyCreateWithoutComponentsInput;
}

export interface ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface VehicleUpdateManyWithoutModelInput {
  create?: VehicleCreateWithoutModelInput[] | VehicleCreateWithoutModelInput;
  delete?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  connect?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  set?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  disconnect?: VehicleWhereUniqueInput[] | VehicleWhereUniqueInput;
  update?:
    | VehicleUpdateWithWhereUniqueWithoutModelInput[]
    | VehicleUpdateWithWhereUniqueWithoutModelInput;
  upsert?:
    | VehicleUpsertWithWhereUniqueWithoutModelInput[]
    | VehicleUpsertWithWhereUniqueWithoutModelInput;
  deleteMany?: VehicleScalarWhereInput[] | VehicleScalarWhereInput;
  updateMany?:
    | VehicleUpdateManyWithWhereNestedInput[]
    | VehicleUpdateManyWithWhereNestedInput;
}

export interface VehicleUpdateWithWhereUniqueWithoutModelInput {
  where: VehicleWhereUniqueInput;
  data: VehicleUpdateWithoutModelDataInput;
}

export interface VehicleUpdateWithoutModelDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface VehicleUpsertWithWhereUniqueWithoutModelInput {
  where: VehicleWhereUniqueInput;
  update: VehicleUpdateWithoutModelDataInput;
  create: VehicleCreateWithoutModelInput;
}

export interface ModelUpsertWithWhereUniqueWithoutCompanyInput {
  where: ModelWhereUniqueInput;
  update: ModelUpdateWithoutCompanyDataInput;
  create: ModelCreateWithoutCompanyInput;
}

export interface ModelScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isActive?: Boolean;
  isActive_not?: Boolean;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  type?: VehicleType;
  type_not?: VehicleType;
  type_in?: VehicleType[] | VehicleType;
  type_not_in?: VehicleType[] | VehicleType;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ModelScalarWhereInput[] | ModelScalarWhereInput;
  OR?: ModelScalarWhereInput[] | ModelScalarWhereInput;
  NOT?: ModelScalarWhereInput[] | ModelScalarWhereInput;
}

export interface ModelUpdateManyWithWhereNestedInput {
  where: ModelScalarWhereInput;
  data: ModelUpdateManyDataInput;
}

export interface ModelUpdateManyDataInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  image?: String;
}

export interface CompanyUpsertWithoutUsersInput {
  update: CompanyUpdateWithoutUsersDataInput;
  create: CompanyCreateWithoutUsersInput;
}

export interface UserUpsertWithoutTxInfoInput {
  update: UserUpdateWithoutTxInfoDataInput;
  create: UserCreateWithoutTxInfoInput;
}

export interface TxNodeUpsertWithoutVehicleInput {
  update: TxNodeUpdateWithoutVehicleDataInput;
  create: TxNodeCreateWithoutVehicleInput;
}

export interface VehicleUpsertWithoutRidesInput {
  update: VehicleUpdateWithoutRidesDataInput;
  create: VehicleCreateWithoutRidesInput;
}

export interface RideUpsertWithWhereUniqueWithoutRiderInput {
  where: RideWhereUniqueInput;
  update: RideUpdateWithoutRiderDataInput;
  create: RideCreateWithoutRiderInput;
}

export interface UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCompanyDataInput;
  create: UserCreateWithoutCompanyInput;
}

export interface UserScalarWhereInput {
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  openId?: String;
  openId_not?: String;
  openId_in?: String[] | String;
  openId_not_in?: String[] | String;
  openId_lt?: String;
  openId_lte?: String;
  openId_gt?: String;
  openId_gte?: String;
  openId_contains?: String;
  openId_not_contains?: String;
  openId_starts_with?: String;
  openId_not_starts_with?: String;
  openId_ends_with?: String;
  openId_not_ends_with?: String;
  unionId?: String;
  unionId_not?: String;
  unionId_in?: String[] | String;
  unionId_not_in?: String[] | String;
  unionId_lt?: String;
  unionId_lte?: String;
  unionId_gt?: String;
  unionId_gte?: String;
  unionId_contains?: String;
  unionId_not_contains?: String;
  unionId_starts_with?: String;
  unionId_not_starts_with?: String;
  unionId_ends_with?: String;
  unionId_not_ends_with?: String;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  altPhone1?: String;
  altPhone1_not?: String;
  altPhone1_in?: String[] | String;
  altPhone1_not_in?: String[] | String;
  altPhone1_lt?: String;
  altPhone1_lte?: String;
  altPhone1_gt?: String;
  altPhone1_gte?: String;
  altPhone1_contains?: String;
  altPhone1_not_contains?: String;
  altPhone1_starts_with?: String;
  altPhone1_not_starts_with?: String;
  altPhone1_ends_with?: String;
  altPhone1_not_ends_with?: String;
  altPhone2?: String;
  altPhone2_not?: String;
  altPhone2_in?: String[] | String;
  altPhone2_not_in?: String[] | String;
  altPhone2_lt?: String;
  altPhone2_lte?: String;
  altPhone2_gt?: String;
  altPhone2_gte?: String;
  altPhone2_contains?: String;
  altPhone2_not_contains?: String;
  altPhone2_starts_with?: String;
  altPhone2_not_starts_with?: String;
  altPhone2_ends_with?: String;
  altPhone2_not_ends_with?: String;
  gender?: genderType;
  gender_not?: genderType;
  gender_in?: genderType[] | genderType;
  gender_not_in?: genderType[] | genderType;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  license?: String;
  license_not?: String;
  license_in?: String[] | String;
  license_not_in?: String[] | String;
  license_lt?: String;
  license_lte?: String;
  license_gt?: String;
  license_gte?: String;
  license_contains?: String;
  license_not_contains?: String;
  license_starts_with?: String;
  license_not_starts_with?: String;
  license_ends_with?: String;
  license_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  status?: statusType;
  status_not?: statusType;
  status_in?: statusType[] | statusType;
  status_not_in?: statusType[] | statusType;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  address?: String;
  email?: String;
  openId?: String;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  role?: Role;
  status?: statusType;
}

export interface CompanyUpsertWithoutTxInfoInput {
  update: CompanyUpdateWithoutTxInfoDataInput;
  create: CompanyCreateWithoutTxInfoInput;
}

export interface TxNodeUpsertWithoutUserInput {
  update: TxNodeUpdateWithoutUserDataInput;
  create: TxNodeCreateWithoutUserInput;
}

export interface FileUpsertNestedInput {
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export interface ProductUpsertWithoutInventoryInput {
  update: ProductUpdateWithoutInventoryDataInput;
  create: ProductCreateWithoutInventoryInput;
}

export interface ComponentUpsertWithoutTxInfoInput {
  update: ComponentUpdateWithoutTxInfoDataInput;
  create: ComponentCreateWithoutTxInfoInput;
}

export interface TxNodeUpsertWithoutCompanyInput {
  update: TxNodeUpdateWithoutCompanyDataInput;
  create: TxNodeCreateWithoutCompanyInput;
}

export interface CompanyUpdateManyMutationInput {
  name?: String;
  token?: String;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  logoBuffer?: String;
  type?: companyType;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
}

export interface ComponentCreateInput {
  UID?: String;
  txInfo?: TxNodeCreateOneWithoutComponentInput;
  status?: ComponentStatus;
  prototype?: ProductCreateOneWithoutInventoryInput;
  specs?: ProductSpecCreateManyInput;
  owner?: CompanyCreateOneWithoutInventoryInput;
  vehicle?: VehicleCreateOneWithoutComponentsInput;
  warranty?: WarrantyCreateOneInput;
  notes?: String;
}

export interface ComponentUpdateInput {
  UID?: String;
  txInfo?: TxNodeUpdateOneWithoutComponentInput;
  status?: ComponentStatus;
  prototype?: ProductUpdateOneWithoutInventoryInput;
  specs?: ProductSpecUpdateManyInput;
  owner?: CompanyUpdateOneWithoutInventoryInput;
  vehicle?: VehicleUpdateOneWithoutComponentsInput;
  warranty?: WarrantyUpdateOneInput;
  notes?: String;
}

export interface ComponentUpdateManyMutationInput {
  UID?: String;
  status?: ComponentStatus;
  notes?: String;
}

export interface DeviceUpdateInput {
  name?: String;
  deviceId?: String;
  macId?: String;
  key?: String;
  pin?: String;
  status?: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  vehicle?: VehicleUpdateOneWithoutDeviceInput;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
}

export interface DeviceUpdateManyMutationInput {
  name?: String;
  deviceId?: String;
  macId?: String;
  key?: String;
  pin?: String;
  status?: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
}

export interface FileUpdateInput {
  associatedId?: String;
  name?: String;
  tag?: String;
  type?: FileType;
  user?: UserUpdateOneRequiredInput;
}

export interface FileUpdateManyMutationInput {
  associatedId?: String;
  name?: String;
  tag?: String;
  type?: FileType;
}

export interface FirebaseProfileUpdateInput {
  uid?: String;
  displayName?: String;
}

export interface FirebaseProfileUpdateManyMutationInput {
  uid?: String;
  displayName?: String;
}

export interface InvoiceCreateInput {
  number?: String;
  date?: DateTimeInput;
  amount?: Float;
}

export interface InvoiceUpdateInput {
  number?: String;
  date?: DateTimeInput;
  amount?: Float;
}

export interface InvoiceUpdateManyMutationInput {
  number?: String;
  date?: DateTimeInput;
  amount?: Float;
}

export interface ModelCreateInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  company?: CompanyCreateOneWithoutModelsInput;
  imageFile?: FileCreateOneInput;
  image?: String;
  components?: ProductCreateManyInput;
  specs?: ProductSpecCreateManyInput;
  config?: ModelConfigCreateOneWithoutModelInput;
  vehicles?: VehicleCreateManyWithoutModelInput;
}

export interface ModelUpdateInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  company?: CompanyUpdateOneWithoutModelsInput;
  imageFile?: FileUpdateOneInput;
  image?: String;
  components?: ProductUpdateManyInput;
  specs?: ProductSpecUpdateManyInput;
  config?: ModelConfigUpdateOneWithoutModelInput;
  vehicles?: VehicleUpdateManyWithoutModelInput;
}

export interface ModelUpdateManyMutationInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  image?: String;
}

export interface ModelConfigCreateInput {
  speedDivisor?: Float;
  odoDivisor?: Float;
  accessType?: ModelAccessType;
  wheelDiameter?: Float;
  maxSpeed?: Float;
  model?: ModelCreateOneWithoutConfigInput;
  hillAssistStatus?: Boolean;
  parkingStatus?: Boolean;
  regenBrakingStatus?: Boolean;
  speedLimit?: Float;
  pickupControlLimit?: Float;
  brakeRegenLimit?: Float;
  zeroThrottleRegenLimit?: Float;
  currentLimit?: Float;
  eabsStatus?: Boolean;
  overVoltageLimit?: Float;
  underVoltageLimit?: Float;
  batteryMinVoltage?: Float;
  batteryMaxVoltage?: Float;
}

export interface ModelCreateOneWithoutConfigInput {
  create?: ModelCreateWithoutConfigInput;
  connect?: ModelWhereUniqueInput;
}

export interface ModelCreateWithoutConfigInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  company?: CompanyCreateOneWithoutModelsInput;
  imageFile?: FileCreateOneInput;
  image?: String;
  components?: ProductCreateManyInput;
  specs?: ProductSpecCreateManyInput;
  vehicles?: VehicleCreateManyWithoutModelInput;
}

export interface ModelConfigUpdateInput {
  speedDivisor?: Float;
  odoDivisor?: Float;
  accessType?: ModelAccessType;
  wheelDiameter?: Float;
  maxSpeed?: Float;
  model?: ModelUpdateOneWithoutConfigInput;
  hillAssistStatus?: Boolean;
  parkingStatus?: Boolean;
  regenBrakingStatus?: Boolean;
  speedLimit?: Float;
  pickupControlLimit?: Float;
  brakeRegenLimit?: Float;
  zeroThrottleRegenLimit?: Float;
  currentLimit?: Float;
  eabsStatus?: Boolean;
  overVoltageLimit?: Float;
  underVoltageLimit?: Float;
  batteryMinVoltage?: Float;
  batteryMaxVoltage?: Float;
}

export interface ModelUpdateOneWithoutConfigInput {
  create?: ModelCreateWithoutConfigInput;
  update?: ModelUpdateWithoutConfigDataInput;
  upsert?: ModelUpsertWithoutConfigInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ModelWhereUniqueInput;
}

export interface ModelUpdateWithoutConfigDataInput {
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type?: VehicleType;
  company?: CompanyUpdateOneWithoutModelsInput;
  imageFile?: FileUpdateOneInput;
  image?: String;
  components?: ProductUpdateManyInput;
  specs?: ProductSpecUpdateManyInput;
  vehicles?: VehicleUpdateManyWithoutModelInput;
}

export interface ModelUpsertWithoutConfigInput {
  update: ModelUpdateWithoutConfigDataInput;
  create: ModelCreateWithoutConfigInput;
}

export interface ModelConfigUpdateManyMutationInput {
  speedDivisor?: Float;
  odoDivisor?: Float;
  accessType?: ModelAccessType;
  wheelDiameter?: Float;
  maxSpeed?: Float;
  hillAssistStatus?: Boolean;
  parkingStatus?: Boolean;
  regenBrakingStatus?: Boolean;
  speedLimit?: Float;
  pickupControlLimit?: Float;
  brakeRegenLimit?: Float;
  zeroThrottleRegenLimit?: Float;
  currentLimit?: Float;
  eabsStatus?: Boolean;
  overVoltageLimit?: Float;
  underVoltageLimit?: Float;
  batteryMinVoltage?: Float;
  batteryMaxVoltage?: Float;
}

export interface PeripheralCreateInput {
  device?: DeviceCreateManyInput;
  vehicle?: VehicleCreateOneWithoutPeripheralInput;
}

export interface VehicleCreateOneWithoutPeripheralInput {
  create?: VehicleCreateWithoutPeripheralInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleCreateWithoutPeripheralInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface PeripheralUpdateInput {
  device?: DeviceUpdateManyInput;
  vehicle?: VehicleUpdateOneWithoutPeripheralInput;
}

export interface VehicleUpdateOneWithoutPeripheralInput {
  create?: VehicleCreateWithoutPeripheralInput;
  update?: VehicleUpdateWithoutPeripheralDataInput;
  upsert?: VehicleUpsertWithoutPeripheralInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleUpdateWithoutPeripheralDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface VehicleUpsertWithoutPeripheralInput {
  update: VehicleUpdateWithoutPeripheralDataInput;
  create: VehicleCreateWithoutPeripheralInput;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  text: String;
}

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
}

export interface PostUpdateManyMutationInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
}

export interface ProductUpdateInput {
  type?: ProductType;
  name?: String;
  key?: String;
  specs?: ProductSpecUpdateManyInput;
  status?: statusType;
  image?: FileUpdateOneInput;
  imageBuffer?: String;
  inventory?: ComponentUpdateManyWithoutPrototypeInput;
  company?: CompanyUpdateOneWithoutComponentsInput;
}

export interface ProductUpdateManyMutationInput {
  type?: ProductType;
  name?: String;
  key?: String;
  status?: statusType;
  imageBuffer?: String;
}

export interface ProductSpecUpdateInput {
  key?: String;
  value?: String;
  unit?: String;
  required?: Boolean;
}

export interface ProductSpecUpdateManyMutationInput {
  key?: String;
  value?: String;
  unit?: String;
  required?: Boolean;
}

export interface RideUpdateInput {
  rider?: UserUpdateOneWithoutVehiclesDrivenInput;
  vehicle?: VehicleUpdateOneWithoutRidesInput;
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  pauseActivities?: pauseActivityUpdateManyInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface RideUpdateManyMutationInput {
  bookingTime?: DateTimeInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
}

export interface ServiceTicketCreateInput {
  assignee?: CompanyCreateOneInput;
  owner?: CompanyCreateOneInput;
  vehicle?: VehicleCreateOneInput;
  title: String;
  description?: String;
  ticketImages?: FileCreateManyInput;
  logoBuffer?: ServiceTicketCreatelogoBufferInput;
  activities?: TicketActivityCreateManyInput;
  tags?: ServiceTicketCreatetagsInput;
  status?: ServiceStatus;
  user: UserCreateOneInput;
  number?: String;
}

export interface VehicleCreateOneInput {
  create?: VehicleCreateInput;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleCreateInput {
  vin: String;
  txInfo?: TxNodeCreateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelCreateOneWithoutVehiclesInput;
  dealer?: CompanyCreateOneInput;
  distributor?: CompanyCreateOneInput;
  oem?: CompanyCreateOneInput;
  company?: CompanyCreateOneWithoutVehiclesInput;
  components?: ComponentCreateManyWithoutVehicleInput;
  specs?: ProductSpecCreateManyInput;
  buyer?: BuyerCreateOneInput;
  owner?: UserCreateOneInput;
  device?: DeviceCreateOneWithoutVehicleInput;
  peripheral?: PeripheralCreateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionCreateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideCreateManyWithoutVehicleInput;
  currentRide?: RideCreateOneInput;
}

export interface FileCreateManyInput {
  create?: FileCreateInput[] | FileCreateInput;
  connect?: FileWhereUniqueInput[] | FileWhereUniqueInput;
}

export interface ServiceTicketCreatelogoBufferInput {
  set?: String[] | String;
}

export interface TicketActivityCreateManyInput {
  create?: TicketActivityCreateInput[] | TicketActivityCreateInput;
  connect?: TicketActivityWhereUniqueInput[] | TicketActivityWhereUniqueInput;
}

export interface TicketActivityCreateInput {
  comment?: String;
  type?: ActivityType;
  user: UserCreateOneInput;
}

export interface ServiceTicketCreatetagsInput {
  set?: String[] | String;
}

export interface ServiceTicketUpdateInput {
  assignee?: CompanyUpdateOneInput;
  owner?: CompanyUpdateOneInput;
  vehicle?: VehicleUpdateOneInput;
  title?: String;
  description?: String;
  ticketImages?: FileUpdateManyInput;
  logoBuffer?: ServiceTicketUpdatelogoBufferInput;
  activities?: TicketActivityUpdateManyInput;
  tags?: ServiceTicketUpdatetagsInput;
  status?: ServiceStatus;
  user?: UserUpdateOneRequiredInput;
  number?: String;
}

export interface VehicleUpdateOneInput {
  create?: VehicleCreateInput;
  update?: VehicleUpdateDataInput;
  upsert?: VehicleUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VehicleWhereUniqueInput;
}

export interface VehicleUpdateDataInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface VehicleUpsertNestedInput {
  update: VehicleUpdateDataInput;
  create: VehicleCreateInput;
}

export interface FileUpdateManyInput {
  create?: FileCreateInput[] | FileCreateInput;
  update?:
    | FileUpdateWithWhereUniqueNestedInput[]
    | FileUpdateWithWhereUniqueNestedInput;
  upsert?:
    | FileUpsertWithWhereUniqueNestedInput[]
    | FileUpsertWithWhereUniqueNestedInput;
  delete?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  connect?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  set?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  disconnect?: FileWhereUniqueInput[] | FileWhereUniqueInput;
  deleteMany?: FileScalarWhereInput[] | FileScalarWhereInput;
  updateMany?:
    | FileUpdateManyWithWhereNestedInput[]
    | FileUpdateManyWithWhereNestedInput;
}

export interface FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput;
  data: FileUpdateDataInput;
}

export interface FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput;
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export interface FileScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  associatedId?: String;
  associatedId_not?: String;
  associatedId_in?: String[] | String;
  associatedId_not_in?: String[] | String;
  associatedId_lt?: String;
  associatedId_lte?: String;
  associatedId_gt?: String;
  associatedId_gte?: String;
  associatedId_contains?: String;
  associatedId_not_contains?: String;
  associatedId_starts_with?: String;
  associatedId_not_starts_with?: String;
  associatedId_ends_with?: String;
  associatedId_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  tag?: String;
  tag_not?: String;
  tag_in?: String[] | String;
  tag_not_in?: String[] | String;
  tag_lt?: String;
  tag_lte?: String;
  tag_gt?: String;
  tag_gte?: String;
  tag_contains?: String;
  tag_not_contains?: String;
  tag_starts_with?: String;
  tag_not_starts_with?: String;
  tag_ends_with?: String;
  tag_not_ends_with?: String;
  type?: FileType;
  type_not?: FileType;
  type_in?: FileType[] | FileType;
  type_not_in?: FileType[] | FileType;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: FileScalarWhereInput[] | FileScalarWhereInput;
  OR?: FileScalarWhereInput[] | FileScalarWhereInput;
  NOT?: FileScalarWhereInput[] | FileScalarWhereInput;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface FileUpdateManyDataInput {
  associatedId?: String;
  name?: String;
  tag?: String;
  type?: FileType;
}

export interface ServiceTicketUpdatelogoBufferInput {
  set?: String[] | String;
}

export interface TicketActivityUpdateManyInput {
  create?: TicketActivityCreateInput[] | TicketActivityCreateInput;
  update?:
    | TicketActivityUpdateWithWhereUniqueNestedInput[]
    | TicketActivityUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TicketActivityUpsertWithWhereUniqueNestedInput[]
    | TicketActivityUpsertWithWhereUniqueNestedInput;
  delete?: TicketActivityWhereUniqueInput[] | TicketActivityWhereUniqueInput;
  connect?: TicketActivityWhereUniqueInput[] | TicketActivityWhereUniqueInput;
  set?: TicketActivityWhereUniqueInput[] | TicketActivityWhereUniqueInput;
  disconnect?:
    | TicketActivityWhereUniqueInput[]
    | TicketActivityWhereUniqueInput;
  deleteMany?:
    | TicketActivityScalarWhereInput[]
    | TicketActivityScalarWhereInput;
  updateMany?:
    | TicketActivityUpdateManyWithWhereNestedInput[]
    | TicketActivityUpdateManyWithWhereNestedInput;
}

export interface TicketActivityUpdateWithWhereUniqueNestedInput {
  where: TicketActivityWhereUniqueInput;
  data: TicketActivityUpdateDataInput;
}

export interface TicketActivityUpdateDataInput {
  comment?: String;
  type?: ActivityType;
  user?: UserUpdateOneRequiredInput;
}

export interface TicketActivityUpsertWithWhereUniqueNestedInput {
  where: TicketActivityWhereUniqueInput;
  update: TicketActivityUpdateDataInput;
  create: TicketActivityCreateInput;
}

export interface TicketActivityScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  type?: ActivityType;
  type_not?: ActivityType;
  type_in?: ActivityType[] | ActivityType;
  type_not_in?: ActivityType[] | ActivityType;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TicketActivityScalarWhereInput[] | TicketActivityScalarWhereInput;
  OR?: TicketActivityScalarWhereInput[] | TicketActivityScalarWhereInput;
  NOT?: TicketActivityScalarWhereInput[] | TicketActivityScalarWhereInput;
}

export interface TicketActivityUpdateManyWithWhereNestedInput {
  where: TicketActivityScalarWhereInput;
  data: TicketActivityUpdateManyDataInput;
}

export interface TicketActivityUpdateManyDataInput {
  comment?: String;
  type?: ActivityType;
}

export interface ServiceTicketUpdatetagsInput {
  set?: String[] | String;
}

export interface ServiceTicketUpdateManyMutationInput {
  title?: String;
  description?: String;
  logoBuffer?: ServiceTicketUpdatelogoBufferInput;
  tags?: ServiceTicketUpdatetagsInput;
  status?: ServiceStatus;
  number?: String;
}

export interface StakeHolderCreateInput {
  dateReceived?: DateTimeInput;
  owner?: TxNodeCreateOneInput;
  asset?: TxNodeCreateOneInput;
  txInfo?: TxInfoCreateOneInput;
  previousStakeHolder?: StakeHolderCreateOneWithoutPreviousStakeHolderInput;
  status?: StakeHolderStatus;
}

export interface TxNodeCreateOneInput {
  create?: TxNodeCreateInput;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeCreateInput {
  type?: TxNodeType;
  company?: CompanyCreateOneWithoutTxInfoInput;
  component?: ComponentCreateOneWithoutTxInfoInput;
  user?: UserCreateOneWithoutTxInfoInput;
  vehicle?: VehicleCreateOneWithoutTxInfoInput;
}

export interface TxInfoCreateOneInput {
  create?: TxInfoCreateInput;
  connect?: TxInfoWhereUniqueInput;
}

export interface TxInfoCreateInput {
  type?: TxType;
  invoice?: InvoiceCreateOneInput;
}

export interface InvoiceCreateOneInput {
  create?: InvoiceCreateInput;
  connect?: InvoiceWhereUniqueInput;
}

export interface StakeHolderCreateOneWithoutPreviousStakeHolderInput {
  create?: StakeHolderCreateWithoutPreviousStakeHolderInput;
  connect?: StakeHolderWhereUniqueInput;
}

export interface StakeHolderCreateWithoutPreviousStakeHolderInput {
  dateReceived?: DateTimeInput;
  owner?: TxNodeCreateOneInput;
  asset?: TxNodeCreateOneInput;
  txInfo?: TxInfoCreateOneInput;
  status?: StakeHolderStatus;
}

export interface StakeHolderUpdateInput {
  dateReceived?: DateTimeInput;
  owner?: TxNodeUpdateOneInput;
  asset?: TxNodeUpdateOneInput;
  txInfo?: TxInfoUpdateOneInput;
  previousStakeHolder?: StakeHolderUpdateOneWithoutPreviousStakeHolderInput;
  status?: StakeHolderStatus;
}

export interface TxNodeUpdateOneInput {
  create?: TxNodeCreateInput;
  update?: TxNodeUpdateDataInput;
  upsert?: TxNodeUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TxNodeWhereUniqueInput;
}

export interface TxNodeUpdateDataInput {
  type?: TxNodeType;
  company?: CompanyUpdateOneWithoutTxInfoInput;
  component?: ComponentUpdateOneWithoutTxInfoInput;
  user?: UserUpdateOneWithoutTxInfoInput;
  vehicle?: VehicleUpdateOneWithoutTxInfoInput;
}

export interface TxNodeUpsertNestedInput {
  update: TxNodeUpdateDataInput;
  create: TxNodeCreateInput;
}

export interface TxInfoUpdateOneInput {
  create?: TxInfoCreateInput;
  update?: TxInfoUpdateDataInput;
  upsert?: TxInfoUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TxInfoWhereUniqueInput;
}

export interface TxInfoUpdateDataInput {
  type?: TxType;
  invoice?: InvoiceUpdateOneInput;
}

export interface InvoiceUpdateOneInput {
  create?: InvoiceCreateInput;
  update?: InvoiceUpdateDataInput;
  upsert?: InvoiceUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: InvoiceWhereUniqueInput;
}

export interface InvoiceUpdateDataInput {
  number?: String;
  date?: DateTimeInput;
  amount?: Float;
}

export interface InvoiceUpsertNestedInput {
  update: InvoiceUpdateDataInput;
  create: InvoiceCreateInput;
}

export interface TxInfoUpsertNestedInput {
  update: TxInfoUpdateDataInput;
  create: TxInfoCreateInput;
}

export interface StakeHolderUpdateOneWithoutPreviousStakeHolderInput {
  create?: StakeHolderCreateWithoutPreviousStakeHolderInput;
  update?: StakeHolderUpdateWithoutPreviousStakeHolderDataInput;
  upsert?: StakeHolderUpsertWithoutPreviousStakeHolderInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: StakeHolderWhereUniqueInput;
}

export interface StakeHolderUpdateWithoutPreviousStakeHolderDataInput {
  dateReceived?: DateTimeInput;
  owner?: TxNodeUpdateOneInput;
  asset?: TxNodeUpdateOneInput;
  txInfo?: TxInfoUpdateOneInput;
  status?: StakeHolderStatus;
}

export interface StakeHolderUpsertWithoutPreviousStakeHolderInput {
  update: StakeHolderUpdateWithoutPreviousStakeHolderDataInput;
  create: StakeHolderCreateWithoutPreviousStakeHolderInput;
}

export interface StakeHolderUpdateManyMutationInput {
  dateReceived?: DateTimeInput;
  status?: StakeHolderStatus;
}

export interface TicketActivityUpdateInput {
  comment?: String;
  type?: ActivityType;
  user?: UserUpdateOneRequiredInput;
}

export interface TicketActivityUpdateManyMutationInput {
  comment?: String;
  type?: ActivityType;
}

export interface TrackingPermissionCreateInput {
  startTime: DateTimeInput;
  endTime: DateTimeInput;
  accessProvider?: UserCreateOneWithoutTrackingRequestsInput;
  accessors?: CompanyCreateManyInput;
  vehicle: VehicleCreateOneWithoutTrackingRequestsInput;
  status?: TrackingPermissionStatus;
}

export interface TrackingPermissionUpdateInput {
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  accessProvider?: UserUpdateOneWithoutTrackingRequestsInput;
  accessors?: CompanyUpdateManyInput;
  vehicle?: VehicleUpdateOneRequiredWithoutTrackingRequestsInput;
  status?: TrackingPermissionStatus;
}

export interface TrackingPermissionUpdateManyMutationInput {
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  status?: TrackingPermissionStatus;
}

export interface TxInfoUpdateInput {
  type?: TxType;
  invoice?: InvoiceUpdateOneInput;
}

export interface TxInfoUpdateManyMutationInput {
  type?: TxType;
}

export interface TxNodeUpdateInput {
  type?: TxNodeType;
  company?: CompanyUpdateOneWithoutTxInfoInput;
  component?: ComponentUpdateOneWithoutTxInfoInput;
  user?: UserUpdateOneWithoutTxInfoInput;
  vehicle?: VehicleUpdateOneWithoutTxInfoInput;
}

export interface TxNodeUpdateManyMutationInput {
  type?: TxNodeType;
}

export interface UserUpdateInput {
  address?: String;
  email?: String;
  openId?: String;
  txInfo?: TxNodeUpdateOneWithoutUserInput;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  firebase?: FirebaseProfileUpdateOneInput;
  role?: Role;
  company?: CompanyUpdateOneWithoutUsersInput;
  status?: statusType;
  vehiclesDriven?: RideUpdateManyWithoutRiderInput;
  trackingRequests?: TrackingPermissionUpdateManyWithoutAccessProviderInput;
}

export interface UserUpdateManyMutationInput {
  address?: String;
  email?: String;
  openId?: String;
  unionId?: String;
  dob?: DateTimeInput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  role?: Role;
  status?: statusType;
}

export interface VehicleUpdateInput {
  vin?: String;
  txInfo?: TxNodeUpdateOneWithoutVehicleInput;
  status?: VehicleStatus;
  model?: ModelUpdateOneWithoutVehiclesInput;
  dealer?: CompanyUpdateOneInput;
  distributor?: CompanyUpdateOneInput;
  oem?: CompanyUpdateOneInput;
  company?: CompanyUpdateOneWithoutVehiclesInput;
  components?: ComponentUpdateManyWithoutVehicleInput;
  specs?: ProductSpecUpdateManyInput;
  buyer?: BuyerUpdateOneInput;
  owner?: UserUpdateOneInput;
  device?: DeviceUpdateOneWithoutVehicleInput;
  peripheral?: PeripheralUpdateOneWithoutVehicleInput;
  protocol?: Protocol;
  trackingRequests?: TrackingPermissionUpdateManyWithoutVehicleInput;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  rides?: RideUpdateManyWithoutVehicleInput;
  currentRide?: RideUpdateOneInput;
}

export interface VehicleUpdateManyMutationInput {
  vin?: String;
  status?: VehicleStatus;
  protocol?: Protocol;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
}

export interface WarrantyUpdateInput {
  number?: String;
  expiry?: DateTimeInput;
  status?: WarrantyStatus;
}

export interface WarrantyUpdateManyMutationInput {
  number?: String;
  expiry?: DateTimeInput;
  status?: WarrantyStatus;
}

export interface pauseActivityUpdateInput {
  pauseStart?: DateTimeInput;
  pauseEnd?: DateTimeInput;
}

export interface pauseActivityUpdateManyMutationInput {
  pauseStart?: DateTimeInput;
  pauseEnd?: DateTimeInput;
}

export interface AutoIncrementSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AutoIncrementWhereInput;
  AND?:
    | AutoIncrementSubscriptionWhereInput[]
    | AutoIncrementSubscriptionWhereInput;
  OR?:
    | AutoIncrementSubscriptionWhereInput[]
    | AutoIncrementSubscriptionWhereInput;
  NOT?:
    | AutoIncrementSubscriptionWhereInput[]
    | AutoIncrementSubscriptionWhereInput;
}

export interface BuyerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BuyerWhereInput;
  AND?: BuyerSubscriptionWhereInput[] | BuyerSubscriptionWhereInput;
  OR?: BuyerSubscriptionWhereInput[] | BuyerSubscriptionWhereInput;
  NOT?: BuyerSubscriptionWhereInput[] | BuyerSubscriptionWhereInput;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyWhereInput;
  AND?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  OR?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  NOT?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
}

export interface ComponentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ComponentWhereInput;
  AND?: ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput;
  OR?: ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput;
  NOT?: ComponentSubscriptionWhereInput[] | ComponentSubscriptionWhereInput;
}

export interface DeviceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeviceWhereInput;
  AND?: DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput;
  OR?: DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput;
  NOT?: DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FileWhereInput;
  AND?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  OR?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  NOT?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
}

export interface FirebaseProfileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FirebaseProfileWhereInput;
  AND?:
    | FirebaseProfileSubscriptionWhereInput[]
    | FirebaseProfileSubscriptionWhereInput;
  OR?:
    | FirebaseProfileSubscriptionWhereInput[]
    | FirebaseProfileSubscriptionWhereInput;
  NOT?:
    | FirebaseProfileSubscriptionWhereInput[]
    | FirebaseProfileSubscriptionWhereInput;
}

export interface InvoiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InvoiceWhereInput;
  AND?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
  OR?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
  NOT?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
}

export interface ModelSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ModelWhereInput;
  AND?: ModelSubscriptionWhereInput[] | ModelSubscriptionWhereInput;
  OR?: ModelSubscriptionWhereInput[] | ModelSubscriptionWhereInput;
  NOT?: ModelSubscriptionWhereInput[] | ModelSubscriptionWhereInput;
}

export interface ModelConfigSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ModelConfigWhereInput;
  AND?: ModelConfigSubscriptionWhereInput[] | ModelConfigSubscriptionWhereInput;
  OR?: ModelConfigSubscriptionWhereInput[] | ModelConfigSubscriptionWhereInput;
  NOT?: ModelConfigSubscriptionWhereInput[] | ModelConfigSubscriptionWhereInput;
}

export interface PeripheralSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PeripheralWhereInput;
  AND?: PeripheralSubscriptionWhereInput[] | PeripheralSubscriptionWhereInput;
  OR?: PeripheralSubscriptionWhereInput[] | PeripheralSubscriptionWhereInput;
  NOT?: PeripheralSubscriptionWhereInput[] | PeripheralSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface ProductSpecSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductSpecWhereInput;
  AND?: ProductSpecSubscriptionWhereInput[] | ProductSpecSubscriptionWhereInput;
  OR?: ProductSpecSubscriptionWhereInput[] | ProductSpecSubscriptionWhereInput;
  NOT?: ProductSpecSubscriptionWhereInput[] | ProductSpecSubscriptionWhereInput;
}

export interface RideSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RideWhereInput;
  AND?: RideSubscriptionWhereInput[] | RideSubscriptionWhereInput;
  OR?: RideSubscriptionWhereInput[] | RideSubscriptionWhereInput;
  NOT?: RideSubscriptionWhereInput[] | RideSubscriptionWhereInput;
}

export interface ServiceTicketSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceTicketWhereInput;
  AND?:
    | ServiceTicketSubscriptionWhereInput[]
    | ServiceTicketSubscriptionWhereInput;
  OR?:
    | ServiceTicketSubscriptionWhereInput[]
    | ServiceTicketSubscriptionWhereInput;
  NOT?:
    | ServiceTicketSubscriptionWhereInput[]
    | ServiceTicketSubscriptionWhereInput;
}

export interface StakeHolderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StakeHolderWhereInput;
  AND?: StakeHolderSubscriptionWhereInput[] | StakeHolderSubscriptionWhereInput;
  OR?: StakeHolderSubscriptionWhereInput[] | StakeHolderSubscriptionWhereInput;
  NOT?: StakeHolderSubscriptionWhereInput[] | StakeHolderSubscriptionWhereInput;
}

export interface TicketActivitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TicketActivityWhereInput;
  AND?:
    | TicketActivitySubscriptionWhereInput[]
    | TicketActivitySubscriptionWhereInput;
  OR?:
    | TicketActivitySubscriptionWhereInput[]
    | TicketActivitySubscriptionWhereInput;
  NOT?:
    | TicketActivitySubscriptionWhereInput[]
    | TicketActivitySubscriptionWhereInput;
}

export interface TrackingPermissionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TrackingPermissionWhereInput;
  AND?:
    | TrackingPermissionSubscriptionWhereInput[]
    | TrackingPermissionSubscriptionWhereInput;
  OR?:
    | TrackingPermissionSubscriptionWhereInput[]
    | TrackingPermissionSubscriptionWhereInput;
  NOT?:
    | TrackingPermissionSubscriptionWhereInput[]
    | TrackingPermissionSubscriptionWhereInput;
}

export interface TxInfoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TxInfoWhereInput;
  AND?: TxInfoSubscriptionWhereInput[] | TxInfoSubscriptionWhereInput;
  OR?: TxInfoSubscriptionWhereInput[] | TxInfoSubscriptionWhereInput;
  NOT?: TxInfoSubscriptionWhereInput[] | TxInfoSubscriptionWhereInput;
}

export interface TxNodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TxNodeWhereInput;
  AND?: TxNodeSubscriptionWhereInput[] | TxNodeSubscriptionWhereInput;
  OR?: TxNodeSubscriptionWhereInput[] | TxNodeSubscriptionWhereInput;
  NOT?: TxNodeSubscriptionWhereInput[] | TxNodeSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface VehicleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VehicleWhereInput;
  AND?: VehicleSubscriptionWhereInput[] | VehicleSubscriptionWhereInput;
  OR?: VehicleSubscriptionWhereInput[] | VehicleSubscriptionWhereInput;
  NOT?: VehicleSubscriptionWhereInput[] | VehicleSubscriptionWhereInput;
}

export interface WarrantySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WarrantyWhereInput;
  AND?: WarrantySubscriptionWhereInput[] | WarrantySubscriptionWhereInput;
  OR?: WarrantySubscriptionWhereInput[] | WarrantySubscriptionWhereInput;
  NOT?: WarrantySubscriptionWhereInput[] | WarrantySubscriptionWhereInput;
}

export interface pauseActivitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: pauseActivityWhereInput;
  AND?:
    | pauseActivitySubscriptionWhereInput[]
    | pauseActivitySubscriptionWhereInput;
  OR?:
    | pauseActivitySubscriptionWhereInput[]
    | pauseActivitySubscriptionWhereInput;
  NOT?:
    | pauseActivitySubscriptionWhereInput[]
    | pauseActivitySubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AutoIncrement {
  id: ID_Output;
  serviceTicketSequence: Int;
  orderSequence: Int;
  status?: statusType;
}

export interface AutoIncrementPromise
  extends Promise<AutoIncrement>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceTicketSequence: () => Promise<Int>;
  orderSequence: () => Promise<Int>;
  status: () => Promise<statusType>;
}

export interface AutoIncrementSubscription
  extends Promise<AsyncIterator<AutoIncrement>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceTicketSequence: () => Promise<AsyncIterator<Int>>;
  orderSequence: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<statusType>>;
}

export interface AutoIncrementConnection {
  pageInfo: PageInfo;
  edges: AutoIncrementEdge[];
}

export interface AutoIncrementConnectionPromise
  extends Promise<AutoIncrementConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AutoIncrementEdge>>() => T;
  aggregate: <T = AggregateAutoIncrementPromise>() => T;
}

export interface AutoIncrementConnectionSubscription
  extends Promise<AsyncIterator<AutoIncrementConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AutoIncrementEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAutoIncrementSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AutoIncrementEdge {
  node: AutoIncrement;
  cursor: String;
}

export interface AutoIncrementEdgePromise
  extends Promise<AutoIncrementEdge>,
    Fragmentable {
  node: <T = AutoIncrementPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AutoIncrementEdgeSubscription
  extends Promise<AsyncIterator<AutoIncrementEdge>>,
    Fragmentable {
  node: <T = AutoIncrementSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAutoIncrement {
  count: Int;
}

export interface AggregateAutoIncrementPromise
  extends Promise<AggregateAutoIncrement>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAutoIncrementSubscription
  extends Promise<AsyncIterator<AggregateAutoIncrement>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Buyer {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  parentName?: String;
  phone?: String;
  email?: String;
  aadharCard?: String;
  address?: String;
  dateOfBirth?: DateTimeOutput;
  identityProof?: String;
  addressProof?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BuyerPromise extends Promise<Buyer>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  parentName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  aadharCard: () => Promise<String>;
  address: () => Promise<String>;
  dateOfBirth: () => Promise<DateTimeOutput>;
  identityProof: () => Promise<String>;
  addressProof: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BuyerSubscription
  extends Promise<AsyncIterator<Buyer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  parentName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  aadharCard: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<DateTimeOutput>>;
  identityProof: () => Promise<AsyncIterator<String>>;
  addressProof: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BuyerConnection {
  pageInfo: PageInfo;
  edges: BuyerEdge[];
}

export interface BuyerConnectionPromise
  extends Promise<BuyerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BuyerEdge>>() => T;
  aggregate: <T = AggregateBuyerPromise>() => T;
}

export interface BuyerConnectionSubscription
  extends Promise<AsyncIterator<BuyerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BuyerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBuyerSubscription>() => T;
}

export interface BuyerEdge {
  node: Buyer;
  cursor: String;
}

export interface BuyerEdgePromise extends Promise<BuyerEdge>, Fragmentable {
  node: <T = BuyerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BuyerEdgeSubscription
  extends Promise<AsyncIterator<BuyerEdge>>,
    Fragmentable {
  node: <T = BuyerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBuyer {
  count: Int;
}

export interface AggregateBuyerPromise
  extends Promise<AggregateBuyer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBuyerSubscription
  extends Promise<AsyncIterator<AggregateBuyer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Company {
  id: ID_Output;
  name: String;
  token?: String;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  logoBuffer?: String;
  type?: companyType;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  token: () => Promise<String>;
  txInfo: <T = TxNodePromise>() => T;
  code: () => Promise<String>;
  phone: () => Promise<String>;
  phone1: () => Promise<String>;
  phone2: () => Promise<String>;
  address: () => Promise<String>;
  companyLogo: <T = FilePromise>() => T;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  logoBuffer: () => Promise<String>;
  models: <T = FragmentableArray<Model>>(
    args?: {
      where?: ModelWhereInput;
      orderBy?: ModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  components: <T = FragmentableArray<Product>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inventory: <T = FragmentableArray<Component>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  vehicles: <T = FragmentableArray<Vehicle>>(
    args?: {
      where?: VehicleWhereInput;
      orderBy?: VehicleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  type: () => Promise<companyType>;
  distributors: <T = FragmentableArray<Company>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dealers: <T = FragmentableArray<Company>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  oems: <T = FragmentableArray<Company>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  suppliers: <T = FragmentableArray<Company>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<statusType>;
  gstNumber: () => Promise<String>;
  panNumber: () => Promise<String>;
  cinNumber: () => Promise<String>;
  ownerAadharCardNumber: () => Promise<String>;
  notes: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  txInfo: <T = TxNodeSubscription>() => T;
  code: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  phone1: () => Promise<AsyncIterator<String>>;
  phone2: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  companyLogo: <T = FileSubscription>() => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  logoBuffer: () => Promise<AsyncIterator<String>>;
  models: <T = Promise<AsyncIterator<ModelSubscription>>>(
    args?: {
      where?: ModelWhereInput;
      orderBy?: ModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  components: <T = Promise<AsyncIterator<ProductSubscription>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inventory: <T = Promise<AsyncIterator<ComponentSubscription>>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  vehicles: <T = Promise<AsyncIterator<VehicleSubscription>>>(
    args?: {
      where?: VehicleWhereInput;
      orderBy?: VehicleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  type: () => Promise<AsyncIterator<companyType>>;
  distributors: <T = Promise<AsyncIterator<CompanySubscription>>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dealers: <T = Promise<AsyncIterator<CompanySubscription>>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  oems: <T = Promise<AsyncIterator<CompanySubscription>>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  suppliers: <T = Promise<AsyncIterator<CompanySubscription>>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<AsyncIterator<statusType>>;
  gstNumber: () => Promise<AsyncIterator<String>>;
  panNumber: () => Promise<AsyncIterator<String>>;
  cinNumber: () => Promise<AsyncIterator<String>>;
  ownerAadharCardNumber: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TxNode {
  id: ID_Output;
  type?: TxNodeType;
}

export interface TxNodePromise extends Promise<TxNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<TxNodeType>;
  company: <T = CompanyPromise>() => T;
  component: <T = ComponentPromise>() => T;
  user: <T = UserPromise>() => T;
  vehicle: <T = VehiclePromise>() => T;
}

export interface TxNodeSubscription
  extends Promise<AsyncIterator<TxNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<TxNodeType>>;
  company: <T = CompanySubscription>() => T;
  component: <T = ComponentSubscription>() => T;
  user: <T = UserSubscription>() => T;
  vehicle: <T = VehicleSubscription>() => T;
}

export interface Component {
  id: ID_Output;
  UID?: String;
  status?: ComponentStatus;
  notes?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ComponentPromise extends Promise<Component>, Fragmentable {
  id: () => Promise<ID_Output>;
  UID: () => Promise<String>;
  txInfo: <T = TxNodePromise>() => T;
  status: () => Promise<ComponentStatus>;
  prototype: <T = ProductPromise>() => T;
  specs: <T = FragmentableArray<ProductSpec>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = CompanyPromise>() => T;
  vehicle: <T = VehiclePromise>() => T;
  warranty: <T = WarrantyPromise>() => T;
  notes: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ComponentSubscription
  extends Promise<AsyncIterator<Component>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  UID: () => Promise<AsyncIterator<String>>;
  txInfo: <T = TxNodeSubscription>() => T;
  status: () => Promise<AsyncIterator<ComponentStatus>>;
  prototype: <T = ProductSubscription>() => T;
  specs: <T = Promise<AsyncIterator<ProductSpecSubscription>>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = CompanySubscription>() => T;
  vehicle: <T = VehicleSubscription>() => T;
  warranty: <T = WarrantySubscription>() => T;
  notes: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Product {
  id: ID_Output;
  type?: ProductType;
  name?: String;
  key?: String;
  status?: statusType;
  imageBuffer?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ProductType>;
  name: () => Promise<String>;
  key: () => Promise<String>;
  specs: <T = FragmentableArray<ProductSpec>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<statusType>;
  image: <T = FilePromise>() => T;
  imageBuffer: () => Promise<String>;
  inventory: <T = FragmentableArray<Component>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  company: <T = CompanyPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ProductType>>;
  name: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  specs: <T = Promise<AsyncIterator<ProductSpecSubscription>>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<AsyncIterator<statusType>>;
  image: <T = FileSubscription>() => T;
  imageBuffer: () => Promise<AsyncIterator<String>>;
  inventory: <T = Promise<AsyncIterator<ComponentSubscription>>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  company: <T = CompanySubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSpec {
  id: ID_Output;
  key?: String;
  value?: String;
  unit?: String;
  required?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductSpecPromise extends Promise<ProductSpec>, Fragmentable {
  id: () => Promise<ID_Output>;
  key: () => Promise<String>;
  value: () => Promise<String>;
  unit: () => Promise<String>;
  required: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSpecSubscription
  extends Promise<AsyncIterator<ProductSpec>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  required: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface File {
  id: ID_Output;
  associatedId?: String;
  name: String;
  tag?: String;
  type?: FileType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  associatedId: () => Promise<String>;
  name: () => Promise<String>;
  tag: () => Promise<String>;
  type: () => Promise<FileType>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  associatedId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  tag: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<FileType>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  address?: String;
  email?: String;
  openId?: String;
  unionId?: String;
  dob?: DateTimeOutput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  role: Role;
  status?: statusType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  address: () => Promise<String>;
  email: () => Promise<String>;
  openId: () => Promise<String>;
  txInfo: <T = TxNodePromise>() => T;
  unionId: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  phone: () => Promise<String>;
  altPhone1: () => Promise<String>;
  altPhone2: () => Promise<String>;
  gender: () => Promise<genderType>;
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  license: () => Promise<String>;
  password: () => Promise<String>;
  firebase: <T = FirebaseProfilePromise>() => T;
  role: () => Promise<Role>;
  company: <T = CompanyPromise>() => T;
  status: () => Promise<statusType>;
  vehiclesDriven: <T = FragmentableArray<Ride>>(
    args?: {
      where?: RideWhereInput;
      orderBy?: RideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  trackingRequests: <T = FragmentableArray<TrackingPermission>>(
    args?: {
      where?: TrackingPermissionWhereInput;
      orderBy?: TrackingPermissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  openId: () => Promise<AsyncIterator<String>>;
  txInfo: <T = TxNodeSubscription>() => T;
  unionId: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  phone: () => Promise<AsyncIterator<String>>;
  altPhone1: () => Promise<AsyncIterator<String>>;
  altPhone2: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<genderType>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  license: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firebase: <T = FirebaseProfileSubscription>() => T;
  role: () => Promise<AsyncIterator<Role>>;
  company: <T = CompanySubscription>() => T;
  status: () => Promise<AsyncIterator<statusType>>;
  vehiclesDriven: <T = Promise<AsyncIterator<RideSubscription>>>(
    args?: {
      where?: RideWhereInput;
      orderBy?: RideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  trackingRequests: <
    T = Promise<AsyncIterator<TrackingPermissionSubscription>>
  >(
    args?: {
      where?: TrackingPermissionWhereInput;
      orderBy?: TrackingPermissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FirebaseProfile {
  id: ID_Output;
  uid?: String;
  displayName?: String;
}

export interface FirebaseProfilePromise
  extends Promise<FirebaseProfile>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  displayName: () => Promise<String>;
}

export interface FirebaseProfileSubscription
  extends Promise<AsyncIterator<FirebaseProfile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
}

export interface Ride {
  id: ID_Output;
  bookingTime?: DateTimeOutput;
  startTime?: DateTimeOutput;
  endTime?: DateTimeOutput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RidePromise extends Promise<Ride>, Fragmentable {
  id: () => Promise<ID_Output>;
  rider: <T = UserPromise>() => T;
  vehicle: <T = VehiclePromise>() => T;
  bookingTime: () => Promise<DateTimeOutput>;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  pauseActivities: <T = FragmentableArray<pauseActivity>>(
    args?: {
      where?: pauseActivityWhereInput;
      orderBy?: pauseActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  startOdo: () => Promise<Float>;
  endOdo: () => Promise<Float>;
  rideStatus: () => Promise<RideStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RideSubscription
  extends Promise<AsyncIterator<Ride>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rider: <T = UserSubscription>() => T;
  vehicle: <T = VehicleSubscription>() => T;
  bookingTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  pauseActivities: <T = Promise<AsyncIterator<pauseActivitySubscription>>>(
    args?: {
      where?: pauseActivityWhereInput;
      orderBy?: pauseActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  startOdo: () => Promise<AsyncIterator<Float>>;
  endOdo: () => Promise<AsyncIterator<Float>>;
  rideStatus: () => Promise<AsyncIterator<RideStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Vehicle {
  vin: String;
  id: ID_Output;
  status: VehicleStatus;
  protocol?: Protocol;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VehiclePromise extends Promise<Vehicle>, Fragmentable {
  vin: () => Promise<String>;
  id: () => Promise<ID_Output>;
  txInfo: <T = TxNodePromise>() => T;
  status: () => Promise<VehicleStatus>;
  model: <T = ModelPromise>() => T;
  dealer: <T = CompanyPromise>() => T;
  distributor: <T = CompanyPromise>() => T;
  oem: <T = CompanyPromise>() => T;
  company: <T = CompanyPromise>() => T;
  components: <T = FragmentableArray<Component>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  specs: <T = FragmentableArray<ProductSpec>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  buyer: <T = BuyerPromise>() => T;
  owner: <T = UserPromise>() => T;
  device: <T = DevicePromise>() => T;
  peripheral: <T = PeripheralPromise>() => T;
  protocol: () => Promise<Protocol>;
  trackingRequests: <T = FragmentableArray<TrackingPermission>>(
    args?: {
      where?: TrackingPermissionWhereInput;
      orderBy?: TrackingPermissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isHealthy: () => Promise<Boolean>;
  lastMarkedLongitude: () => Promise<String>;
  lastMarkedLatitude: () => Promise<String>;
  rentalStatus: () => Promise<RentalStatus>;
  rides: <T = FragmentableArray<Ride>>(
    args?: {
      where?: RideWhereInput;
      orderBy?: RideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  currentRide: <T = RidePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VehicleSubscription
  extends Promise<AsyncIterator<Vehicle>>,
    Fragmentable {
  vin: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  txInfo: <T = TxNodeSubscription>() => T;
  status: () => Promise<AsyncIterator<VehicleStatus>>;
  model: <T = ModelSubscription>() => T;
  dealer: <T = CompanySubscription>() => T;
  distributor: <T = CompanySubscription>() => T;
  oem: <T = CompanySubscription>() => T;
  company: <T = CompanySubscription>() => T;
  components: <T = Promise<AsyncIterator<ComponentSubscription>>>(
    args?: {
      where?: ComponentWhereInput;
      orderBy?: ComponentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  specs: <T = Promise<AsyncIterator<ProductSpecSubscription>>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  buyer: <T = BuyerSubscription>() => T;
  owner: <T = UserSubscription>() => T;
  device: <T = DeviceSubscription>() => T;
  peripheral: <T = PeripheralSubscription>() => T;
  protocol: () => Promise<AsyncIterator<Protocol>>;
  trackingRequests: <
    T = Promise<AsyncIterator<TrackingPermissionSubscription>>
  >(
    args?: {
      where?: TrackingPermissionWhereInput;
      orderBy?: TrackingPermissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isHealthy: () => Promise<AsyncIterator<Boolean>>;
  lastMarkedLongitude: () => Promise<AsyncIterator<String>>;
  lastMarkedLatitude: () => Promise<AsyncIterator<String>>;
  rentalStatus: () => Promise<AsyncIterator<RentalStatus>>;
  rides: <T = Promise<AsyncIterator<RideSubscription>>>(
    args?: {
      where?: RideWhereInput;
      orderBy?: RideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  currentRide: <T = RideSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Model {
  id: ID_Output;
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type: VehicleType;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ModelPromise extends Promise<Model>, Fragmentable {
  id: () => Promise<ID_Output>;
  isActive: () => Promise<Boolean>;
  status: () => Promise<statusType>;
  name: () => Promise<String>;
  key: () => Promise<String>;
  type: () => Promise<VehicleType>;
  company: <T = CompanyPromise>() => T;
  imageFile: <T = FilePromise>() => T;
  image: () => Promise<String>;
  components: <T = FragmentableArray<Product>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  specs: <T = FragmentableArray<ProductSpec>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  config: <T = ModelConfigPromise>() => T;
  vehicles: <T = FragmentableArray<Vehicle>>(
    args?: {
      where?: VehicleWhereInput;
      orderBy?: VehicleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ModelSubscription
  extends Promise<AsyncIterator<Model>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<statusType>>;
  name: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<VehicleType>>;
  company: <T = CompanySubscription>() => T;
  imageFile: <T = FileSubscription>() => T;
  image: () => Promise<AsyncIterator<String>>;
  components: <T = Promise<AsyncIterator<ProductSubscription>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  specs: <T = Promise<AsyncIterator<ProductSpecSubscription>>>(
    args?: {
      where?: ProductSpecWhereInput;
      orderBy?: ProductSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  config: <T = ModelConfigSubscription>() => T;
  vehicles: <T = Promise<AsyncIterator<VehicleSubscription>>>(
    args?: {
      where?: VehicleWhereInput;
      orderBy?: VehicleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ModelConfig {
  id: ID_Output;
  speedDivisor?: Float;
  odoDivisor?: Float;
  accessType?: ModelAccessType;
  wheelDiameter?: Float;
  maxSpeed?: Float;
  hillAssistStatus?: Boolean;
  parkingStatus?: Boolean;
  regenBrakingStatus?: Boolean;
  speedLimit?: Float;
  pickupControlLimit?: Float;
  brakeRegenLimit?: Float;
  zeroThrottleRegenLimit?: Float;
  currentLimit?: Float;
  eabsStatus?: Boolean;
  overVoltageLimit?: Float;
  underVoltageLimit?: Float;
  batteryMinVoltage?: Float;
  batteryMaxVoltage?: Float;
}

export interface ModelConfigPromise extends Promise<ModelConfig>, Fragmentable {
  id: () => Promise<ID_Output>;
  speedDivisor: () => Promise<Float>;
  odoDivisor: () => Promise<Float>;
  accessType: () => Promise<ModelAccessType>;
  wheelDiameter: () => Promise<Float>;
  maxSpeed: () => Promise<Float>;
  model: <T = ModelPromise>() => T;
  hillAssistStatus: () => Promise<Boolean>;
  parkingStatus: () => Promise<Boolean>;
  regenBrakingStatus: () => Promise<Boolean>;
  speedLimit: () => Promise<Float>;
  pickupControlLimit: () => Promise<Float>;
  brakeRegenLimit: () => Promise<Float>;
  zeroThrottleRegenLimit: () => Promise<Float>;
  currentLimit: () => Promise<Float>;
  eabsStatus: () => Promise<Boolean>;
  overVoltageLimit: () => Promise<Float>;
  underVoltageLimit: () => Promise<Float>;
  batteryMinVoltage: () => Promise<Float>;
  batteryMaxVoltage: () => Promise<Float>;
}

export interface ModelConfigSubscription
  extends Promise<AsyncIterator<ModelConfig>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  speedDivisor: () => Promise<AsyncIterator<Float>>;
  odoDivisor: () => Promise<AsyncIterator<Float>>;
  accessType: () => Promise<AsyncIterator<ModelAccessType>>;
  wheelDiameter: () => Promise<AsyncIterator<Float>>;
  maxSpeed: () => Promise<AsyncIterator<Float>>;
  model: <T = ModelSubscription>() => T;
  hillAssistStatus: () => Promise<AsyncIterator<Boolean>>;
  parkingStatus: () => Promise<AsyncIterator<Boolean>>;
  regenBrakingStatus: () => Promise<AsyncIterator<Boolean>>;
  speedLimit: () => Promise<AsyncIterator<Float>>;
  pickupControlLimit: () => Promise<AsyncIterator<Float>>;
  brakeRegenLimit: () => Promise<AsyncIterator<Float>>;
  zeroThrottleRegenLimit: () => Promise<AsyncIterator<Float>>;
  currentLimit: () => Promise<AsyncIterator<Float>>;
  eabsStatus: () => Promise<AsyncIterator<Boolean>>;
  overVoltageLimit: () => Promise<AsyncIterator<Float>>;
  underVoltageLimit: () => Promise<AsyncIterator<Float>>;
  batteryMinVoltage: () => Promise<AsyncIterator<Float>>;
  batteryMaxVoltage: () => Promise<AsyncIterator<Float>>;
}

export interface Device {
  id: ID_Output;
  name?: String;
  deviceId: String;
  macId: String;
  key: String;
  pin?: String;
  status: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DevicePromise extends Promise<Device>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  deviceId: () => Promise<String>;
  macId: () => Promise<String>;
  key: () => Promise<String>;
  pin: () => Promise<String>;
  status: () => Promise<DeviceStatus>;
  updateStatus: () => Promise<DeviceUpdateStatus>;
  type: () => Promise<DeviceType>;
  vehicle: <T = VehiclePromise>() => T;
  firmware: () => Promise<String>;
  expectedFirmware: () => Promise<String>;
  pinResetRequired: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DeviceSubscription
  extends Promise<AsyncIterator<Device>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  deviceId: () => Promise<AsyncIterator<String>>;
  macId: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  pin: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<DeviceStatus>>;
  updateStatus: () => Promise<AsyncIterator<DeviceUpdateStatus>>;
  type: () => Promise<AsyncIterator<DeviceType>>;
  vehicle: <T = VehicleSubscription>() => T;
  firmware: () => Promise<AsyncIterator<String>>;
  expectedFirmware: () => Promise<AsyncIterator<String>>;
  pinResetRequired: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Peripheral {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PeripheralPromise extends Promise<Peripheral>, Fragmentable {
  id: () => Promise<ID_Output>;
  device: <T = FragmentableArray<Device>>(
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  vehicle: <T = VehiclePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PeripheralSubscription
  extends Promise<AsyncIterator<Peripheral>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  device: <T = Promise<AsyncIterator<DeviceSubscription>>>(
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  vehicle: <T = VehicleSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TrackingPermission {
  id: ID_Output;
  startTime: DateTimeOutput;
  endTime: DateTimeOutput;
  status: TrackingPermissionStatus;
}

export interface TrackingPermissionPromise
  extends Promise<TrackingPermission>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  accessProvider: <T = UserPromise>() => T;
  accessors: <T = FragmentableArray<Company>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  vehicle: <T = VehiclePromise>() => T;
  status: () => Promise<TrackingPermissionStatus>;
}

export interface TrackingPermissionSubscription
  extends Promise<AsyncIterator<TrackingPermission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  accessProvider: <T = UserSubscription>() => T;
  accessors: <T = Promise<AsyncIterator<CompanySubscription>>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  vehicle: <T = VehicleSubscription>() => T;
  status: () => Promise<AsyncIterator<TrackingPermissionStatus>>;
}

export interface pauseActivity {
  id: ID_Output;
  pauseStart?: DateTimeOutput;
  pauseEnd?: DateTimeOutput;
}

export interface pauseActivityPromise
  extends Promise<pauseActivity>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  pauseStart: () => Promise<DateTimeOutput>;
  pauseEnd: () => Promise<DateTimeOutput>;
}

export interface pauseActivitySubscription
  extends Promise<AsyncIterator<pauseActivity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  pauseStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  pauseEnd: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Warranty {
  id: ID_Output;
  number?: String;
  expiry?: DateTimeOutput;
  status?: WarrantyStatus;
}

export interface WarrantyPromise extends Promise<Warranty>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
  expiry: () => Promise<DateTimeOutput>;
  status: () => Promise<WarrantyStatus>;
}

export interface WarrantySubscription
  extends Promise<AsyncIterator<Warranty>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
  expiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<WarrantyStatus>>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ComponentConnection {
  pageInfo: PageInfo;
  edges: ComponentEdge[];
}

export interface ComponentConnectionPromise
  extends Promise<ComponentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ComponentEdge>>() => T;
  aggregate: <T = AggregateComponentPromise>() => T;
}

export interface ComponentConnectionSubscription
  extends Promise<AsyncIterator<ComponentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ComponentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateComponentSubscription>() => T;
}

export interface ComponentEdge {
  node: Component;
  cursor: String;
}

export interface ComponentEdgePromise
  extends Promise<ComponentEdge>,
    Fragmentable {
  node: <T = ComponentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ComponentEdgeSubscription
  extends Promise<AsyncIterator<ComponentEdge>>,
    Fragmentable {
  node: <T = ComponentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComponent {
  count: Int;
}

export interface AggregateComponentPromise
  extends Promise<AggregateComponent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateComponentSubscription
  extends Promise<AsyncIterator<AggregateComponent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeviceConnection {
  pageInfo: PageInfo;
  edges: DeviceEdge[];
}

export interface DeviceConnectionPromise
  extends Promise<DeviceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeviceEdge>>() => T;
  aggregate: <T = AggregateDevicePromise>() => T;
}

export interface DeviceConnectionSubscription
  extends Promise<AsyncIterator<DeviceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeviceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeviceSubscription>() => T;
}

export interface DeviceEdge {
  node: Device;
  cursor: String;
}

export interface DeviceEdgePromise extends Promise<DeviceEdge>, Fragmentable {
  node: <T = DevicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeviceEdgeSubscription
  extends Promise<AsyncIterator<DeviceEdge>>,
    Fragmentable {
  node: <T = DeviceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDevice {
  count: Int;
}

export interface AggregateDevicePromise
  extends Promise<AggregateDevice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeviceSubscription
  extends Promise<AsyncIterator<AggregateDevice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FirebaseProfileConnection {
  pageInfo: PageInfo;
  edges: FirebaseProfileEdge[];
}

export interface FirebaseProfileConnectionPromise
  extends Promise<FirebaseProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FirebaseProfileEdge>>() => T;
  aggregate: <T = AggregateFirebaseProfilePromise>() => T;
}

export interface FirebaseProfileConnectionSubscription
  extends Promise<AsyncIterator<FirebaseProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FirebaseProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFirebaseProfileSubscription>() => T;
}

export interface FirebaseProfileEdge {
  node: FirebaseProfile;
  cursor: String;
}

export interface FirebaseProfileEdgePromise
  extends Promise<FirebaseProfileEdge>,
    Fragmentable {
  node: <T = FirebaseProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FirebaseProfileEdgeSubscription
  extends Promise<AsyncIterator<FirebaseProfileEdge>>,
    Fragmentable {
  node: <T = FirebaseProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFirebaseProfile {
  count: Int;
}

export interface AggregateFirebaseProfilePromise
  extends Promise<AggregateFirebaseProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFirebaseProfileSubscription
  extends Promise<AsyncIterator<AggregateFirebaseProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Invoice {
  id: ID_Output;
  number?: String;
  date?: DateTimeOutput;
  amount?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InvoicePromise extends Promise<Invoice>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  amount: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InvoiceSubscription
  extends Promise<AsyncIterator<Invoice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InvoiceConnection {
  pageInfo: PageInfo;
  edges: InvoiceEdge[];
}

export interface InvoiceConnectionPromise
  extends Promise<InvoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InvoiceEdge>>() => T;
  aggregate: <T = AggregateInvoicePromise>() => T;
}

export interface InvoiceConnectionSubscription
  extends Promise<AsyncIterator<InvoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InvoiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInvoiceSubscription>() => T;
}

export interface InvoiceEdge {
  node: Invoice;
  cursor: String;
}

export interface InvoiceEdgePromise extends Promise<InvoiceEdge>, Fragmentable {
  node: <T = InvoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InvoiceEdgeSubscription
  extends Promise<AsyncIterator<InvoiceEdge>>,
    Fragmentable {
  node: <T = InvoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInvoice {
  count: Int;
}

export interface AggregateInvoicePromise
  extends Promise<AggregateInvoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvoiceSubscription
  extends Promise<AsyncIterator<AggregateInvoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ModelConnection {
  pageInfo: PageInfo;
  edges: ModelEdge[];
}

export interface ModelConnectionPromise
  extends Promise<ModelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ModelEdge>>() => T;
  aggregate: <T = AggregateModelPromise>() => T;
}

export interface ModelConnectionSubscription
  extends Promise<AsyncIterator<ModelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ModelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateModelSubscription>() => T;
}

export interface ModelEdge {
  node: Model;
  cursor: String;
}

export interface ModelEdgePromise extends Promise<ModelEdge>, Fragmentable {
  node: <T = ModelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ModelEdgeSubscription
  extends Promise<AsyncIterator<ModelEdge>>,
    Fragmentable {
  node: <T = ModelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateModel {
  count: Int;
}

export interface AggregateModelPromise
  extends Promise<AggregateModel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateModelSubscription
  extends Promise<AsyncIterator<AggregateModel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ModelConfigConnection {
  pageInfo: PageInfo;
  edges: ModelConfigEdge[];
}

export interface ModelConfigConnectionPromise
  extends Promise<ModelConfigConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ModelConfigEdge>>() => T;
  aggregate: <T = AggregateModelConfigPromise>() => T;
}

export interface ModelConfigConnectionSubscription
  extends Promise<AsyncIterator<ModelConfigConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ModelConfigEdgeSubscription>>>() => T;
  aggregate: <T = AggregateModelConfigSubscription>() => T;
}

export interface ModelConfigEdge {
  node: ModelConfig;
  cursor: String;
}

export interface ModelConfigEdgePromise
  extends Promise<ModelConfigEdge>,
    Fragmentable {
  node: <T = ModelConfigPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ModelConfigEdgeSubscription
  extends Promise<AsyncIterator<ModelConfigEdge>>,
    Fragmentable {
  node: <T = ModelConfigSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateModelConfig {
  count: Int;
}

export interface AggregateModelConfigPromise
  extends Promise<AggregateModelConfig>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateModelConfigSubscription
  extends Promise<AsyncIterator<AggregateModelConfig>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PeripheralConnection {
  pageInfo: PageInfo;
  edges: PeripheralEdge[];
}

export interface PeripheralConnectionPromise
  extends Promise<PeripheralConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PeripheralEdge>>() => T;
  aggregate: <T = AggregatePeripheralPromise>() => T;
}

export interface PeripheralConnectionSubscription
  extends Promise<AsyncIterator<PeripheralConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PeripheralEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePeripheralSubscription>() => T;
}

export interface PeripheralEdge {
  node: Peripheral;
  cursor: String;
}

export interface PeripheralEdgePromise
  extends Promise<PeripheralEdge>,
    Fragmentable {
  node: <T = PeripheralPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PeripheralEdgeSubscription
  extends Promise<AsyncIterator<PeripheralEdge>>,
    Fragmentable {
  node: <T = PeripheralSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePeripheral {
  count: Int;
}

export interface AggregatePeripheralPromise
  extends Promise<AggregatePeripheral>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePeripheralSubscription
  extends Promise<AsyncIterator<AggregatePeripheral>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  text: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  text: () => Promise<String>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductSpecConnection {
  pageInfo: PageInfo;
  edges: ProductSpecEdge[];
}

export interface ProductSpecConnectionPromise
  extends Promise<ProductSpecConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductSpecEdge>>() => T;
  aggregate: <T = AggregateProductSpecPromise>() => T;
}

export interface ProductSpecConnectionSubscription
  extends Promise<AsyncIterator<ProductSpecConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductSpecEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSpecSubscription>() => T;
}

export interface ProductSpecEdge {
  node: ProductSpec;
  cursor: String;
}

export interface ProductSpecEdgePromise
  extends Promise<ProductSpecEdge>,
    Fragmentable {
  node: <T = ProductSpecPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductSpecEdgeSubscription
  extends Promise<AsyncIterator<ProductSpecEdge>>,
    Fragmentable {
  node: <T = ProductSpecSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductSpec {
  count: Int;
}

export interface AggregateProductSpecPromise
  extends Promise<AggregateProductSpec>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSpecSubscription
  extends Promise<AsyncIterator<AggregateProductSpec>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RideConnection {
  pageInfo: PageInfo;
  edges: RideEdge[];
}

export interface RideConnectionPromise
  extends Promise<RideConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RideEdge>>() => T;
  aggregate: <T = AggregateRidePromise>() => T;
}

export interface RideConnectionSubscription
  extends Promise<AsyncIterator<RideConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RideEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRideSubscription>() => T;
}

export interface RideEdge {
  node: Ride;
  cursor: String;
}

export interface RideEdgePromise extends Promise<RideEdge>, Fragmentable {
  node: <T = RidePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RideEdgeSubscription
  extends Promise<AsyncIterator<RideEdge>>,
    Fragmentable {
  node: <T = RideSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRide {
  count: Int;
}

export interface AggregateRidePromise
  extends Promise<AggregateRide>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRideSubscription
  extends Promise<AsyncIterator<AggregateRide>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceTicket {
  id: ID_Output;
  title: String;
  description?: String;
  logoBuffer: String[];
  tags: String[];
  status: ServiceStatus;
  number?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ServiceTicketPromise
  extends Promise<ServiceTicket>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  assignee: <T = CompanyPromise>() => T;
  owner: <T = CompanyPromise>() => T;
  vehicle: <T = VehiclePromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  ticketImages: <T = FragmentableArray<File>>(
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  logoBuffer: () => Promise<String[]>;
  activities: <T = FragmentableArray<TicketActivity>>(
    args?: {
      where?: TicketActivityWhereInput;
      orderBy?: TicketActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tags: () => Promise<String[]>;
  status: () => Promise<ServiceStatus>;
  user: <T = UserPromise>() => T;
  number: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ServiceTicketSubscription
  extends Promise<AsyncIterator<ServiceTicket>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  assignee: <T = CompanySubscription>() => T;
  owner: <T = CompanySubscription>() => T;
  vehicle: <T = VehicleSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  ticketImages: <T = Promise<AsyncIterator<FileSubscription>>>(
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  logoBuffer: () => Promise<AsyncIterator<String[]>>;
  activities: <T = Promise<AsyncIterator<TicketActivitySubscription>>>(
    args?: {
      where?: TicketActivityWhereInput;
      orderBy?: TicketActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tags: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<ServiceStatus>>;
  user: <T = UserSubscription>() => T;
  number: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TicketActivity {
  id: ID_Output;
  comment?: String;
  type: ActivityType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TicketActivityPromise
  extends Promise<TicketActivity>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  type: () => Promise<ActivityType>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TicketActivitySubscription
  extends Promise<AsyncIterator<TicketActivity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ActivityType>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceTicketConnection {
  pageInfo: PageInfo;
  edges: ServiceTicketEdge[];
}

export interface ServiceTicketConnectionPromise
  extends Promise<ServiceTicketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceTicketEdge>>() => T;
  aggregate: <T = AggregateServiceTicketPromise>() => T;
}

export interface ServiceTicketConnectionSubscription
  extends Promise<AsyncIterator<ServiceTicketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceTicketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceTicketSubscription>() => T;
}

export interface ServiceTicketEdge {
  node: ServiceTicket;
  cursor: String;
}

export interface ServiceTicketEdgePromise
  extends Promise<ServiceTicketEdge>,
    Fragmentable {
  node: <T = ServiceTicketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceTicketEdgeSubscription
  extends Promise<AsyncIterator<ServiceTicketEdge>>,
    Fragmentable {
  node: <T = ServiceTicketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceTicket {
  count: Int;
}

export interface AggregateServiceTicketPromise
  extends Promise<AggregateServiceTicket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceTicketSubscription
  extends Promise<AsyncIterator<AggregateServiceTicket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StakeHolder {
  id: ID_Output;
  dateReceived?: DateTimeOutput;
  status?: StakeHolderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StakeHolderPromise extends Promise<StakeHolder>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateReceived: () => Promise<DateTimeOutput>;
  owner: <T = TxNodePromise>() => T;
  asset: <T = TxNodePromise>() => T;
  txInfo: <T = TxInfoPromise>() => T;
  previousStakeHolder: <T = StakeHolderPromise>() => T;
  status: () => Promise<StakeHolderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StakeHolderSubscription
  extends Promise<AsyncIterator<StakeHolder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateReceived: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = TxNodeSubscription>() => T;
  asset: <T = TxNodeSubscription>() => T;
  txInfo: <T = TxInfoSubscription>() => T;
  previousStakeHolder: <T = StakeHolderSubscription>() => T;
  status: () => Promise<AsyncIterator<StakeHolderStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TxInfo {
  id: ID_Output;
  type?: TxType;
}

export interface TxInfoPromise extends Promise<TxInfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<TxType>;
  invoice: <T = InvoicePromise>() => T;
}

export interface TxInfoSubscription
  extends Promise<AsyncIterator<TxInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<TxType>>;
  invoice: <T = InvoiceSubscription>() => T;
}

export interface StakeHolderConnection {
  pageInfo: PageInfo;
  edges: StakeHolderEdge[];
}

export interface StakeHolderConnectionPromise
  extends Promise<StakeHolderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StakeHolderEdge>>() => T;
  aggregate: <T = AggregateStakeHolderPromise>() => T;
}

export interface StakeHolderConnectionSubscription
  extends Promise<AsyncIterator<StakeHolderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StakeHolderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStakeHolderSubscription>() => T;
}

export interface StakeHolderEdge {
  node: StakeHolder;
  cursor: String;
}

export interface StakeHolderEdgePromise
  extends Promise<StakeHolderEdge>,
    Fragmentable {
  node: <T = StakeHolderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StakeHolderEdgeSubscription
  extends Promise<AsyncIterator<StakeHolderEdge>>,
    Fragmentable {
  node: <T = StakeHolderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStakeHolder {
  count: Int;
}

export interface AggregateStakeHolderPromise
  extends Promise<AggregateStakeHolder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStakeHolderSubscription
  extends Promise<AsyncIterator<AggregateStakeHolder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TicketActivityConnection {
  pageInfo: PageInfo;
  edges: TicketActivityEdge[];
}

export interface TicketActivityConnectionPromise
  extends Promise<TicketActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TicketActivityEdge>>() => T;
  aggregate: <T = AggregateTicketActivityPromise>() => T;
}

export interface TicketActivityConnectionSubscription
  extends Promise<AsyncIterator<TicketActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TicketActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTicketActivitySubscription>() => T;
}

export interface TicketActivityEdge {
  node: TicketActivity;
  cursor: String;
}

export interface TicketActivityEdgePromise
  extends Promise<TicketActivityEdge>,
    Fragmentable {
  node: <T = TicketActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TicketActivityEdgeSubscription
  extends Promise<AsyncIterator<TicketActivityEdge>>,
    Fragmentable {
  node: <T = TicketActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTicketActivity {
  count: Int;
}

export interface AggregateTicketActivityPromise
  extends Promise<AggregateTicketActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTicketActivitySubscription
  extends Promise<AsyncIterator<AggregateTicketActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TrackingPermissionConnection {
  pageInfo: PageInfo;
  edges: TrackingPermissionEdge[];
}

export interface TrackingPermissionConnectionPromise
  extends Promise<TrackingPermissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrackingPermissionEdge>>() => T;
  aggregate: <T = AggregateTrackingPermissionPromise>() => T;
}

export interface TrackingPermissionConnectionSubscription
  extends Promise<AsyncIterator<TrackingPermissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<TrackingPermissionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateTrackingPermissionSubscription>() => T;
}

export interface TrackingPermissionEdge {
  node: TrackingPermission;
  cursor: String;
}

export interface TrackingPermissionEdgePromise
  extends Promise<TrackingPermissionEdge>,
    Fragmentable {
  node: <T = TrackingPermissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrackingPermissionEdgeSubscription
  extends Promise<AsyncIterator<TrackingPermissionEdge>>,
    Fragmentable {
  node: <T = TrackingPermissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTrackingPermission {
  count: Int;
}

export interface AggregateTrackingPermissionPromise
  extends Promise<AggregateTrackingPermission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrackingPermissionSubscription
  extends Promise<AsyncIterator<AggregateTrackingPermission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TxInfoConnection {
  pageInfo: PageInfo;
  edges: TxInfoEdge[];
}

export interface TxInfoConnectionPromise
  extends Promise<TxInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TxInfoEdge>>() => T;
  aggregate: <T = AggregateTxInfoPromise>() => T;
}

export interface TxInfoConnectionSubscription
  extends Promise<AsyncIterator<TxInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TxInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTxInfoSubscription>() => T;
}

export interface TxInfoEdge {
  node: TxInfo;
  cursor: String;
}

export interface TxInfoEdgePromise extends Promise<TxInfoEdge>, Fragmentable {
  node: <T = TxInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TxInfoEdgeSubscription
  extends Promise<AsyncIterator<TxInfoEdge>>,
    Fragmentable {
  node: <T = TxInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTxInfo {
  count: Int;
}

export interface AggregateTxInfoPromise
  extends Promise<AggregateTxInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTxInfoSubscription
  extends Promise<AsyncIterator<AggregateTxInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TxNodeConnection {
  pageInfo: PageInfo;
  edges: TxNodeEdge[];
}

export interface TxNodeConnectionPromise
  extends Promise<TxNodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TxNodeEdge>>() => T;
  aggregate: <T = AggregateTxNodePromise>() => T;
}

export interface TxNodeConnectionSubscription
  extends Promise<AsyncIterator<TxNodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TxNodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTxNodeSubscription>() => T;
}

export interface TxNodeEdge {
  node: TxNode;
  cursor: String;
}

export interface TxNodeEdgePromise extends Promise<TxNodeEdge>, Fragmentable {
  node: <T = TxNodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TxNodeEdgeSubscription
  extends Promise<AsyncIterator<TxNodeEdge>>,
    Fragmentable {
  node: <T = TxNodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTxNode {
  count: Int;
}

export interface AggregateTxNodePromise
  extends Promise<AggregateTxNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTxNodeSubscription
  extends Promise<AsyncIterator<AggregateTxNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VehicleConnection {
  pageInfo: PageInfo;
  edges: VehicleEdge[];
}

export interface VehicleConnectionPromise
  extends Promise<VehicleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VehicleEdge>>() => T;
  aggregate: <T = AggregateVehiclePromise>() => T;
}

export interface VehicleConnectionSubscription
  extends Promise<AsyncIterator<VehicleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VehicleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVehicleSubscription>() => T;
}

export interface VehicleEdge {
  node: Vehicle;
  cursor: String;
}

export interface VehicleEdgePromise extends Promise<VehicleEdge>, Fragmentable {
  node: <T = VehiclePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VehicleEdgeSubscription
  extends Promise<AsyncIterator<VehicleEdge>>,
    Fragmentable {
  node: <T = VehicleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVehicle {
  count: Int;
}

export interface AggregateVehiclePromise
  extends Promise<AggregateVehicle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVehicleSubscription
  extends Promise<AsyncIterator<AggregateVehicle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WarrantyConnection {
  pageInfo: PageInfo;
  edges: WarrantyEdge[];
}

export interface WarrantyConnectionPromise
  extends Promise<WarrantyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WarrantyEdge>>() => T;
  aggregate: <T = AggregateWarrantyPromise>() => T;
}

export interface WarrantyConnectionSubscription
  extends Promise<AsyncIterator<WarrantyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WarrantyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWarrantySubscription>() => T;
}

export interface WarrantyEdge {
  node: Warranty;
  cursor: String;
}

export interface WarrantyEdgePromise
  extends Promise<WarrantyEdge>,
    Fragmentable {
  node: <T = WarrantyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WarrantyEdgeSubscription
  extends Promise<AsyncIterator<WarrantyEdge>>,
    Fragmentable {
  node: <T = WarrantySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWarranty {
  count: Int;
}

export interface AggregateWarrantyPromise
  extends Promise<AggregateWarranty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWarrantySubscription
  extends Promise<AsyncIterator<AggregateWarranty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface pauseActivityConnection {
  pageInfo: PageInfo;
  edges: pauseActivityEdge[];
}

export interface pauseActivityConnectionPromise
  extends Promise<pauseActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<pauseActivityEdge>>() => T;
  aggregate: <T = AggregatepauseActivityPromise>() => T;
}

export interface pauseActivityConnectionSubscription
  extends Promise<AsyncIterator<pauseActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<pauseActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregatepauseActivitySubscription>() => T;
}

export interface pauseActivityEdge {
  node: pauseActivity;
  cursor: String;
}

export interface pauseActivityEdgePromise
  extends Promise<pauseActivityEdge>,
    Fragmentable {
  node: <T = pauseActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface pauseActivityEdgeSubscription
  extends Promise<AsyncIterator<pauseActivityEdge>>,
    Fragmentable {
  node: <T = pauseActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatepauseActivity {
  count: Int;
}

export interface AggregatepauseActivityPromise
  extends Promise<AggregatepauseActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatepauseActivitySubscription
  extends Promise<AsyncIterator<AggregatepauseActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AutoIncrementSubscriptionPayload {
  mutation: MutationType;
  node: AutoIncrement;
  updatedFields: String[];
  previousValues: AutoIncrementPreviousValues;
}

export interface AutoIncrementSubscriptionPayloadPromise
  extends Promise<AutoIncrementSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AutoIncrementPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AutoIncrementPreviousValuesPromise>() => T;
}

export interface AutoIncrementSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AutoIncrementSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AutoIncrementSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AutoIncrementPreviousValuesSubscription>() => T;
}

export interface AutoIncrementPreviousValues {
  id: ID_Output;
  serviceTicketSequence: Int;
  orderSequence: Int;
  status?: statusType;
}

export interface AutoIncrementPreviousValuesPromise
  extends Promise<AutoIncrementPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceTicketSequence: () => Promise<Int>;
  orderSequence: () => Promise<Int>;
  status: () => Promise<statusType>;
}

export interface AutoIncrementPreviousValuesSubscription
  extends Promise<AsyncIterator<AutoIncrementPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceTicketSequence: () => Promise<AsyncIterator<Int>>;
  orderSequence: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<statusType>>;
}

export interface BuyerSubscriptionPayload {
  mutation: MutationType;
  node: Buyer;
  updatedFields: String[];
  previousValues: BuyerPreviousValues;
}

export interface BuyerSubscriptionPayloadPromise
  extends Promise<BuyerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BuyerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BuyerPreviousValuesPromise>() => T;
}

export interface BuyerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BuyerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BuyerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BuyerPreviousValuesSubscription>() => T;
}

export interface BuyerPreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  parentName?: String;
  phone?: String;
  email?: String;
  aadharCard?: String;
  address?: String;
  dateOfBirth?: DateTimeOutput;
  identityProof?: String;
  addressProof?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BuyerPreviousValuesPromise
  extends Promise<BuyerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  parentName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  aadharCard: () => Promise<String>;
  address: () => Promise<String>;
  dateOfBirth: () => Promise<DateTimeOutput>;
  identityProof: () => Promise<String>;
  addressProof: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BuyerPreviousValuesSubscription
  extends Promise<AsyncIterator<BuyerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  parentName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  aadharCard: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<DateTimeOutput>>;
  identityProof: () => Promise<AsyncIterator<String>>;
  addressProof: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  name: String;
  token?: String;
  code?: String;
  phone?: String;
  phone1?: String;
  phone2?: String;
  address?: String;
  logoBuffer?: String;
  type?: companyType;
  status?: statusType;
  gstNumber?: String;
  panNumber?: String;
  cinNumber?: String;
  ownerAadharCardNumber?: String;
  notes?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  token: () => Promise<String>;
  code: () => Promise<String>;
  phone: () => Promise<String>;
  phone1: () => Promise<String>;
  phone2: () => Promise<String>;
  address: () => Promise<String>;
  logoBuffer: () => Promise<String>;
  type: () => Promise<companyType>;
  status: () => Promise<statusType>;
  gstNumber: () => Promise<String>;
  panNumber: () => Promise<String>;
  cinNumber: () => Promise<String>;
  ownerAadharCardNumber: () => Promise<String>;
  notes: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  phone1: () => Promise<AsyncIterator<String>>;
  phone2: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  logoBuffer: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<companyType>>;
  status: () => Promise<AsyncIterator<statusType>>;
  gstNumber: () => Promise<AsyncIterator<String>>;
  panNumber: () => Promise<AsyncIterator<String>>;
  cinNumber: () => Promise<AsyncIterator<String>>;
  ownerAadharCardNumber: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ComponentSubscriptionPayload {
  mutation: MutationType;
  node: Component;
  updatedFields: String[];
  previousValues: ComponentPreviousValues;
}

export interface ComponentSubscriptionPayloadPromise
  extends Promise<ComponentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ComponentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ComponentPreviousValuesPromise>() => T;
}

export interface ComponentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ComponentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ComponentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ComponentPreviousValuesSubscription>() => T;
}

export interface ComponentPreviousValues {
  id: ID_Output;
  UID?: String;
  status?: ComponentStatus;
  notes?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ComponentPreviousValuesPromise
  extends Promise<ComponentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  UID: () => Promise<String>;
  status: () => Promise<ComponentStatus>;
  notes: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ComponentPreviousValuesSubscription
  extends Promise<AsyncIterator<ComponentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  UID: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ComponentStatus>>;
  notes: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeviceSubscriptionPayload {
  mutation: MutationType;
  node: Device;
  updatedFields: String[];
  previousValues: DevicePreviousValues;
}

export interface DeviceSubscriptionPayloadPromise
  extends Promise<DeviceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DevicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DevicePreviousValuesPromise>() => T;
}

export interface DeviceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeviceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeviceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DevicePreviousValuesSubscription>() => T;
}

export interface DevicePreviousValues {
  id: ID_Output;
  name?: String;
  deviceId: String;
  macId: String;
  key: String;
  pin?: String;
  status: DeviceStatus;
  updateStatus?: DeviceUpdateStatus;
  type?: DeviceType;
  firmware?: String;
  expectedFirmware?: String;
  pinResetRequired?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DevicePreviousValuesPromise
  extends Promise<DevicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  deviceId: () => Promise<String>;
  macId: () => Promise<String>;
  key: () => Promise<String>;
  pin: () => Promise<String>;
  status: () => Promise<DeviceStatus>;
  updateStatus: () => Promise<DeviceUpdateStatus>;
  type: () => Promise<DeviceType>;
  firmware: () => Promise<String>;
  expectedFirmware: () => Promise<String>;
  pinResetRequired: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DevicePreviousValuesSubscription
  extends Promise<AsyncIterator<DevicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  deviceId: () => Promise<AsyncIterator<String>>;
  macId: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  pin: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<DeviceStatus>>;
  updateStatus: () => Promise<AsyncIterator<DeviceUpdateStatus>>;
  type: () => Promise<AsyncIterator<DeviceType>>;
  firmware: () => Promise<AsyncIterator<String>>;
  expectedFirmware: () => Promise<AsyncIterator<String>>;
  pinResetRequired: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  associatedId?: String;
  name: String;
  tag?: String;
  type?: FileType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  associatedId: () => Promise<String>;
  name: () => Promise<String>;
  tag: () => Promise<String>;
  type: () => Promise<FileType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  associatedId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  tag: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<FileType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FirebaseProfileSubscriptionPayload {
  mutation: MutationType;
  node: FirebaseProfile;
  updatedFields: String[];
  previousValues: FirebaseProfilePreviousValues;
}

export interface FirebaseProfileSubscriptionPayloadPromise
  extends Promise<FirebaseProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FirebaseProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FirebaseProfilePreviousValuesPromise>() => T;
}

export interface FirebaseProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FirebaseProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FirebaseProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FirebaseProfilePreviousValuesSubscription>() => T;
}

export interface FirebaseProfilePreviousValues {
  id: ID_Output;
  uid?: String;
  displayName?: String;
}

export interface FirebaseProfilePreviousValuesPromise
  extends Promise<FirebaseProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  displayName: () => Promise<String>;
}

export interface FirebaseProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<FirebaseProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
}

export interface InvoiceSubscriptionPayload {
  mutation: MutationType;
  node: Invoice;
  updatedFields: String[];
  previousValues: InvoicePreviousValues;
}

export interface InvoiceSubscriptionPayloadPromise
  extends Promise<InvoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InvoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvoicePreviousValuesPromise>() => T;
}

export interface InvoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvoicePreviousValuesSubscription>() => T;
}

export interface InvoicePreviousValues {
  id: ID_Output;
  number?: String;
  date?: DateTimeOutput;
  amount?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InvoicePreviousValuesPromise
  extends Promise<InvoicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  amount: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InvoicePreviousValuesSubscription
  extends Promise<AsyncIterator<InvoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ModelSubscriptionPayload {
  mutation: MutationType;
  node: Model;
  updatedFields: String[];
  previousValues: ModelPreviousValues;
}

export interface ModelSubscriptionPayloadPromise
  extends Promise<ModelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ModelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ModelPreviousValuesPromise>() => T;
}

export interface ModelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ModelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ModelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ModelPreviousValuesSubscription>() => T;
}

export interface ModelPreviousValues {
  id: ID_Output;
  isActive?: Boolean;
  status?: statusType;
  name?: String;
  key?: String;
  type: VehicleType;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ModelPreviousValuesPromise
  extends Promise<ModelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isActive: () => Promise<Boolean>;
  status: () => Promise<statusType>;
  name: () => Promise<String>;
  key: () => Promise<String>;
  type: () => Promise<VehicleType>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ModelPreviousValuesSubscription
  extends Promise<AsyncIterator<ModelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<statusType>>;
  name: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<VehicleType>>;
  image: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ModelConfigSubscriptionPayload {
  mutation: MutationType;
  node: ModelConfig;
  updatedFields: String[];
  previousValues: ModelConfigPreviousValues;
}

export interface ModelConfigSubscriptionPayloadPromise
  extends Promise<ModelConfigSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ModelConfigPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ModelConfigPreviousValuesPromise>() => T;
}

export interface ModelConfigSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ModelConfigSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ModelConfigSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ModelConfigPreviousValuesSubscription>() => T;
}

export interface ModelConfigPreviousValues {
  id: ID_Output;
  speedDivisor?: Float;
  odoDivisor?: Float;
  accessType?: ModelAccessType;
  wheelDiameter?: Float;
  maxSpeed?: Float;
  hillAssistStatus?: Boolean;
  parkingStatus?: Boolean;
  regenBrakingStatus?: Boolean;
  speedLimit?: Float;
  pickupControlLimit?: Float;
  brakeRegenLimit?: Float;
  zeroThrottleRegenLimit?: Float;
  currentLimit?: Float;
  eabsStatus?: Boolean;
  overVoltageLimit?: Float;
  underVoltageLimit?: Float;
  batteryMinVoltage?: Float;
  batteryMaxVoltage?: Float;
}

export interface ModelConfigPreviousValuesPromise
  extends Promise<ModelConfigPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  speedDivisor: () => Promise<Float>;
  odoDivisor: () => Promise<Float>;
  accessType: () => Promise<ModelAccessType>;
  wheelDiameter: () => Promise<Float>;
  maxSpeed: () => Promise<Float>;
  hillAssistStatus: () => Promise<Boolean>;
  parkingStatus: () => Promise<Boolean>;
  regenBrakingStatus: () => Promise<Boolean>;
  speedLimit: () => Promise<Float>;
  pickupControlLimit: () => Promise<Float>;
  brakeRegenLimit: () => Promise<Float>;
  zeroThrottleRegenLimit: () => Promise<Float>;
  currentLimit: () => Promise<Float>;
  eabsStatus: () => Promise<Boolean>;
  overVoltageLimit: () => Promise<Float>;
  underVoltageLimit: () => Promise<Float>;
  batteryMinVoltage: () => Promise<Float>;
  batteryMaxVoltage: () => Promise<Float>;
}

export interface ModelConfigPreviousValuesSubscription
  extends Promise<AsyncIterator<ModelConfigPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  speedDivisor: () => Promise<AsyncIterator<Float>>;
  odoDivisor: () => Promise<AsyncIterator<Float>>;
  accessType: () => Promise<AsyncIterator<ModelAccessType>>;
  wheelDiameter: () => Promise<AsyncIterator<Float>>;
  maxSpeed: () => Promise<AsyncIterator<Float>>;
  hillAssistStatus: () => Promise<AsyncIterator<Boolean>>;
  parkingStatus: () => Promise<AsyncIterator<Boolean>>;
  regenBrakingStatus: () => Promise<AsyncIterator<Boolean>>;
  speedLimit: () => Promise<AsyncIterator<Float>>;
  pickupControlLimit: () => Promise<AsyncIterator<Float>>;
  brakeRegenLimit: () => Promise<AsyncIterator<Float>>;
  zeroThrottleRegenLimit: () => Promise<AsyncIterator<Float>>;
  currentLimit: () => Promise<AsyncIterator<Float>>;
  eabsStatus: () => Promise<AsyncIterator<Boolean>>;
  overVoltageLimit: () => Promise<AsyncIterator<Float>>;
  underVoltageLimit: () => Promise<AsyncIterator<Float>>;
  batteryMinVoltage: () => Promise<AsyncIterator<Float>>;
  batteryMaxVoltage: () => Promise<AsyncIterator<Float>>;
}

export interface PeripheralSubscriptionPayload {
  mutation: MutationType;
  node: Peripheral;
  updatedFields: String[];
  previousValues: PeripheralPreviousValues;
}

export interface PeripheralSubscriptionPayloadPromise
  extends Promise<PeripheralSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PeripheralPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PeripheralPreviousValuesPromise>() => T;
}

export interface PeripheralSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PeripheralSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PeripheralSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PeripheralPreviousValuesSubscription>() => T;
}

export interface PeripheralPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PeripheralPreviousValuesPromise
  extends Promise<PeripheralPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PeripheralPreviousValuesSubscription
  extends Promise<AsyncIterator<PeripheralPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  text: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  text: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  type?: ProductType;
  name?: String;
  key?: String;
  status?: statusType;
  imageBuffer?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ProductType>;
  name: () => Promise<String>;
  key: () => Promise<String>;
  status: () => Promise<statusType>;
  imageBuffer: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ProductType>>;
  name: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<statusType>>;
  imageBuffer: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSpecSubscriptionPayload {
  mutation: MutationType;
  node: ProductSpec;
  updatedFields: String[];
  previousValues: ProductSpecPreviousValues;
}

export interface ProductSpecSubscriptionPayloadPromise
  extends Promise<ProductSpecSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductSpecPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductSpecPreviousValuesPromise>() => T;
}

export interface ProductSpecSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSpecSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSpecSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductSpecPreviousValuesSubscription>() => T;
}

export interface ProductSpecPreviousValues {
  id: ID_Output;
  key?: String;
  value?: String;
  unit?: String;
  required?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductSpecPreviousValuesPromise
  extends Promise<ProductSpecPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  key: () => Promise<String>;
  value: () => Promise<String>;
  unit: () => Promise<String>;
  required: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSpecPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductSpecPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  required: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RideSubscriptionPayload {
  mutation: MutationType;
  node: Ride;
  updatedFields: String[];
  previousValues: RidePreviousValues;
}

export interface RideSubscriptionPayloadPromise
  extends Promise<RideSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RidePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RidePreviousValuesPromise>() => T;
}

export interface RideSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RideSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RideSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RidePreviousValuesSubscription>() => T;
}

export interface RidePreviousValues {
  id: ID_Output;
  bookingTime?: DateTimeOutput;
  startTime?: DateTimeOutput;
  endTime?: DateTimeOutput;
  startOdo?: Float;
  endOdo?: Float;
  rideStatus?: RideStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RidePreviousValuesPromise
  extends Promise<RidePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bookingTime: () => Promise<DateTimeOutput>;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  startOdo: () => Promise<Float>;
  endOdo: () => Promise<Float>;
  rideStatus: () => Promise<RideStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RidePreviousValuesSubscription
  extends Promise<AsyncIterator<RidePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bookingTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  startOdo: () => Promise<AsyncIterator<Float>>;
  endOdo: () => Promise<AsyncIterator<Float>>;
  rideStatus: () => Promise<AsyncIterator<RideStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceTicketSubscriptionPayload {
  mutation: MutationType;
  node: ServiceTicket;
  updatedFields: String[];
  previousValues: ServiceTicketPreviousValues;
}

export interface ServiceTicketSubscriptionPayloadPromise
  extends Promise<ServiceTicketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceTicketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceTicketPreviousValuesPromise>() => T;
}

export interface ServiceTicketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceTicketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceTicketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceTicketPreviousValuesSubscription>() => T;
}

export interface ServiceTicketPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  logoBuffer: String[];
  tags: String[];
  status: ServiceStatus;
  number?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ServiceTicketPreviousValuesPromise
  extends Promise<ServiceTicketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  logoBuffer: () => Promise<String[]>;
  tags: () => Promise<String[]>;
  status: () => Promise<ServiceStatus>;
  number: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ServiceTicketPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceTicketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  logoBuffer: () => Promise<AsyncIterator<String[]>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<ServiceStatus>>;
  number: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StakeHolderSubscriptionPayload {
  mutation: MutationType;
  node: StakeHolder;
  updatedFields: String[];
  previousValues: StakeHolderPreviousValues;
}

export interface StakeHolderSubscriptionPayloadPromise
  extends Promise<StakeHolderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StakeHolderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StakeHolderPreviousValuesPromise>() => T;
}

export interface StakeHolderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StakeHolderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StakeHolderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StakeHolderPreviousValuesSubscription>() => T;
}

export interface StakeHolderPreviousValues {
  id: ID_Output;
  dateReceived?: DateTimeOutput;
  status?: StakeHolderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StakeHolderPreviousValuesPromise
  extends Promise<StakeHolderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateReceived: () => Promise<DateTimeOutput>;
  status: () => Promise<StakeHolderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StakeHolderPreviousValuesSubscription
  extends Promise<AsyncIterator<StakeHolderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateReceived: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<StakeHolderStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TicketActivitySubscriptionPayload {
  mutation: MutationType;
  node: TicketActivity;
  updatedFields: String[];
  previousValues: TicketActivityPreviousValues;
}

export interface TicketActivitySubscriptionPayloadPromise
  extends Promise<TicketActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TicketActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TicketActivityPreviousValuesPromise>() => T;
}

export interface TicketActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TicketActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TicketActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TicketActivityPreviousValuesSubscription>() => T;
}

export interface TicketActivityPreviousValues {
  id: ID_Output;
  comment?: String;
  type: ActivityType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TicketActivityPreviousValuesPromise
  extends Promise<TicketActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  type: () => Promise<ActivityType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TicketActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<TicketActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ActivityType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TrackingPermissionSubscriptionPayload {
  mutation: MutationType;
  node: TrackingPermission;
  updatedFields: String[];
  previousValues: TrackingPermissionPreviousValues;
}

export interface TrackingPermissionSubscriptionPayloadPromise
  extends Promise<TrackingPermissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrackingPermissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrackingPermissionPreviousValuesPromise>() => T;
}

export interface TrackingPermissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrackingPermissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrackingPermissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrackingPermissionPreviousValuesSubscription>() => T;
}

export interface TrackingPermissionPreviousValues {
  id: ID_Output;
  startTime: DateTimeOutput;
  endTime: DateTimeOutput;
  status: TrackingPermissionStatus;
}

export interface TrackingPermissionPreviousValuesPromise
  extends Promise<TrackingPermissionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  status: () => Promise<TrackingPermissionStatus>;
}

export interface TrackingPermissionPreviousValuesSubscription
  extends Promise<AsyncIterator<TrackingPermissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<TrackingPermissionStatus>>;
}

export interface TxInfoSubscriptionPayload {
  mutation: MutationType;
  node: TxInfo;
  updatedFields: String[];
  previousValues: TxInfoPreviousValues;
}

export interface TxInfoSubscriptionPayloadPromise
  extends Promise<TxInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TxInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TxInfoPreviousValuesPromise>() => T;
}

export interface TxInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TxInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TxInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TxInfoPreviousValuesSubscription>() => T;
}

export interface TxInfoPreviousValues {
  id: ID_Output;
  type?: TxType;
}

export interface TxInfoPreviousValuesPromise
  extends Promise<TxInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<TxType>;
}

export interface TxInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<TxInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<TxType>>;
}

export interface TxNodeSubscriptionPayload {
  mutation: MutationType;
  node: TxNode;
  updatedFields: String[];
  previousValues: TxNodePreviousValues;
}

export interface TxNodeSubscriptionPayloadPromise
  extends Promise<TxNodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TxNodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TxNodePreviousValuesPromise>() => T;
}

export interface TxNodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TxNodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TxNodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TxNodePreviousValuesSubscription>() => T;
}

export interface TxNodePreviousValues {
  id: ID_Output;
  type?: TxNodeType;
}

export interface TxNodePreviousValuesPromise
  extends Promise<TxNodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<TxNodeType>;
}

export interface TxNodePreviousValuesSubscription
  extends Promise<AsyncIterator<TxNodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<TxNodeType>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  address?: String;
  email?: String;
  openId?: String;
  unionId?: String;
  dob?: DateTimeOutput;
  phone?: String;
  altPhone1?: String;
  altPhone2?: String;
  gender?: genderType;
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  license?: String;
  password?: String;
  role: Role;
  status?: statusType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  address: () => Promise<String>;
  email: () => Promise<String>;
  openId: () => Promise<String>;
  unionId: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  phone: () => Promise<String>;
  altPhone1: () => Promise<String>;
  altPhone2: () => Promise<String>;
  gender: () => Promise<genderType>;
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  license: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  status: () => Promise<statusType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  openId: () => Promise<AsyncIterator<String>>;
  unionId: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  phone: () => Promise<AsyncIterator<String>>;
  altPhone1: () => Promise<AsyncIterator<String>>;
  altPhone2: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<genderType>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  license: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  status: () => Promise<AsyncIterator<statusType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VehicleSubscriptionPayload {
  mutation: MutationType;
  node: Vehicle;
  updatedFields: String[];
  previousValues: VehiclePreviousValues;
}

export interface VehicleSubscriptionPayloadPromise
  extends Promise<VehicleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VehiclePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VehiclePreviousValuesPromise>() => T;
}

export interface VehicleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VehicleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VehicleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VehiclePreviousValuesSubscription>() => T;
}

export interface VehiclePreviousValues {
  vin: String;
  id: ID_Output;
  status: VehicleStatus;
  protocol?: Protocol;
  isHealthy?: Boolean;
  lastMarkedLongitude?: String;
  lastMarkedLatitude?: String;
  rentalStatus?: RentalStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VehiclePreviousValuesPromise
  extends Promise<VehiclePreviousValues>,
    Fragmentable {
  vin: () => Promise<String>;
  id: () => Promise<ID_Output>;
  status: () => Promise<VehicleStatus>;
  protocol: () => Promise<Protocol>;
  isHealthy: () => Promise<Boolean>;
  lastMarkedLongitude: () => Promise<String>;
  lastMarkedLatitude: () => Promise<String>;
  rentalStatus: () => Promise<RentalStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VehiclePreviousValuesSubscription
  extends Promise<AsyncIterator<VehiclePreviousValues>>,
    Fragmentable {
  vin: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<VehicleStatus>>;
  protocol: () => Promise<AsyncIterator<Protocol>>;
  isHealthy: () => Promise<AsyncIterator<Boolean>>;
  lastMarkedLongitude: () => Promise<AsyncIterator<String>>;
  lastMarkedLatitude: () => Promise<AsyncIterator<String>>;
  rentalStatus: () => Promise<AsyncIterator<RentalStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WarrantySubscriptionPayload {
  mutation: MutationType;
  node: Warranty;
  updatedFields: String[];
  previousValues: WarrantyPreviousValues;
}

export interface WarrantySubscriptionPayloadPromise
  extends Promise<WarrantySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WarrantyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WarrantyPreviousValuesPromise>() => T;
}

export interface WarrantySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WarrantySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WarrantySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WarrantyPreviousValuesSubscription>() => T;
}

export interface WarrantyPreviousValues {
  id: ID_Output;
  number?: String;
  expiry?: DateTimeOutput;
  status?: WarrantyStatus;
}

export interface WarrantyPreviousValuesPromise
  extends Promise<WarrantyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<String>;
  expiry: () => Promise<DateTimeOutput>;
  status: () => Promise<WarrantyStatus>;
}

export interface WarrantyPreviousValuesSubscription
  extends Promise<AsyncIterator<WarrantyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<String>>;
  expiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<WarrantyStatus>>;
}

export interface pauseActivitySubscriptionPayload {
  mutation: MutationType;
  node: pauseActivity;
  updatedFields: String[];
  previousValues: pauseActivityPreviousValues;
}

export interface pauseActivitySubscriptionPayloadPromise
  extends Promise<pauseActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = pauseActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = pauseActivityPreviousValuesPromise>() => T;
}

export interface pauseActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<pauseActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = pauseActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = pauseActivityPreviousValuesSubscription>() => T;
}

export interface pauseActivityPreviousValues {
  id: ID_Output;
  pauseStart?: DateTimeOutput;
  pauseEnd?: DateTimeOutput;
}

export interface pauseActivityPreviousValuesPromise
  extends Promise<pauseActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  pauseStart: () => Promise<DateTimeOutput>;
  pauseEnd: () => Promise<DateTimeOutput>;
}

export interface pauseActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<pauseActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  pauseStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  pauseEnd: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "statusType",
    embedded: false
  },
  {
    name: "AutoIncrement",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "companyType",
    embedded: false
  },
  {
    name: "FileType",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "ComponentStatus",
    embedded: false
  },
  {
    name: "ProductType",
    embedded: false
  },
  {
    name: "ProductSpec",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Component",
    embedded: false
  },
  {
    name: "TxNode",
    embedded: false
  },
  {
    name: "TxNodeType",
    embedded: false
  },
  {
    name: "StakeHolder",
    embedded: false
  },
  {
    name: "TxInfo",
    embedded: false
  },
  {
    name: "TxType",
    embedded: false
  },
  {
    name: "StakeHolderStatus",
    embedded: false
  },
  {
    name: "Invoice",
    embedded: false
  },
  {
    name: "ServiceStatus",
    embedded: false
  },
  {
    name: "ActivityType",
    embedded: false
  },
  {
    name: "ServiceTicket",
    embedded: false
  },
  {
    name: "TicketActivity",
    embedded: false
  },
  {
    name: "TrackingPermissionStatus",
    embedded: false
  },
  {
    name: "TrackingPermission",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "LoginType",
    embedded: false
  },
  {
    name: "genderType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "FirebaseProfile",
    embedded: false
  },
  {
    name: "VehicleType",
    embedded: false
  },
  {
    name: "ModelAccessType",
    embedded: false
  },
  {
    name: "ModelConfig",
    embedded: false
  },
  {
    name: "Model",
    embedded: false
  },
  {
    name: "VehicleStatus",
    embedded: false
  },
  {
    name: "DeviceStatus",
    embedded: false
  },
  {
    name: "DeviceUpdateStatus",
    embedded: false
  },
  {
    name: "DeviceType",
    embedded: false
  },
  {
    name: "WarrantyStatus",
    embedded: false
  },
  {
    name: "Protocol",
    embedded: false
  },
  {
    name: "Vehicle",
    embedded: false
  },
  {
    name: "Warranty",
    embedded: false
  },
  {
    name: "Device",
    embedded: false
  },
  {
    name: "Peripheral",
    embedded: false
  },
  {
    name: "Buyer",
    embedded: false
  },
  {
    name: "Ride",
    embedded: false
  },
  {
    name: "pauseActivity",
    embedded: false
  },
  {
    name: "RideStatus",
    embedded: false
  },
  {
    name: "RentalStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://13.233.43.135:4466`
});
export const prisma = new Prisma();
